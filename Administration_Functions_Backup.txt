
Dim iValue 'Reference variable for checking if the 'Save' button is enabled/disabled in 'Add New Module' window
Dim sValue  'Reference variable for storing the random string
Dim sText 'Reference variable for setting the field type
Dim welElement 'Reference object for webelement
Dim sTabValue 'Reference variable for getting the default selected tab name in 'Security Items' screen
Dim sCode, sCode1 'Reference variable for getting the Code field value
Dim sName 'Reference variable for getting the Name field value
Dim sButton 'Reference variable for button to be clicked for performing the functionality
Dim iTblRecCount 'Reference variable for getting the count of records in the table
Dim sResultModuleFolderName 'Reference variable for getting the module folder name to store HTML report

'*******************************************************************************************************************
'  Description	   	:   This function initiate HTML variable with module name and also Create HTML report 
'  Date Created     :   15th May, 2017
'  Author           :  	Karan Mehta 	
'*******************************************************************************************************************
'	Module Name	
	sResultModuleFolderName = "Administration"

'	Initiate report
	CreateResultFile
'*******************************************************************************************************************
'*******************************************************************************************************************

'Browser names for 'Administration' screens
sUsrMaintBrowser = "Working Capital Solutions Online Portal" 'Browser name for 'User Maintenance' screen
sGrpMaintBrowser = "Working Capital Solutions Online Portal" 'Browser name for 'Group Maintenance' screen
sSecItemBrowser = "Working Capital Solutions Online Portal" 'Browser name for 'Security Items' screen
sSysCodeBrowser = "Working Capital Solutions Online Portal" 'Browser name for 'System Codes' screen
sClntGrpBrowser = "Working Capital Solutions Online Portal" 'Browser name for 'Client Groups' screen
sApplnLogBrowser = "Working Capital Solutions Online Portal" 'Browser name for 'Application Log' screen
sExcptnLogBrowser = "Working Capital Solutions Online Portal" 'Browser name for 'Exception Log' screen

'Page names for 'Administration' screens
sUsrMaintPage = "Working Capital Solutions Online Portal" 'Page name for 'User Maintenance' screen
sGrpMaintPage = "Working Capital Solutions Online Portal" 'Page name for 'Group Maintenance' screen
sSecItemPage = "Working Capital Solutions Online Portal" 'Page name for 'Security Items' screen
sSysCodePage = "Working Capital Solutions Online Portal" 'Page name for 'System Codes' screen
sClntGrpPage = "Working Capital Solutions Online Portal" 'Page name for 'Client Groups' screen
sApplnLogPage = "Working Capital Solutions Online Portal" 'Page name for 'Application Log' screen
sExcptnLogPage = "Working Capital Solutions Online Portal" 'Page name for 'Exception Log' screen

sUsrMaintLink = "Admin->User maintenance" 'Link for opening 'User Maintenance' screen
sGrpMaintLink = "Admin->Group maintenance" 'Link for opening 'Group Maintenance' screen
sSecItemLink = "Admin->Security Items" 'Link for opening 'Security Items' screen
sSysCodeLink = "Admin->System Codes" 'Link for opening 'System Codes' screen
sClntGrpLink = "Admin->Client Groups" 'Link for opening 'Client Groups' screen
sApplnLogLink = "Admin->Application Log" 'Link for opening 'Application Log' screen
sExcptnLogLink = "Admin->Exception Log" 'Link for opening 'Exception Log' screen

'************************************************************************************************************************************************************************
'****************************************************SECURITY ITEMS SCREEN***********************************************************************************************
'************************************************************************************************************************************************************************

sTDFileSI = "C:\Users\Public\WCSAutomation\TestData\Administration\SecurityItems\SecurityItems.xls" 'Test Data File Path for 'Security Items' screen
sModSISheet = "Modules" 'Sheet name for Test Data sheet containing details for 'Modules' section of 'Security Items' screen
sScrSISheet = "Screens" 'Sheet name for Test Data sheet containing details for 'Screens' section of 'Security Items' screen
sFuncSISheet = "Functionality" 'Sheet name for Test Data sheet containing details for 'Functionality' section of 'Security Items' screen
sMenuSISheet = "Menus" 'Sheet name for Test Data sheet containing details for 'Menus' section of 'Security Items' screen
sCntrlrSISheet = "Controllers" 'Sheet name for Test Data sheet containing details for 'Controllers' section of 'Security Items' screen
sCntrlrMapSISheet = "Controller Mapping" 'Sheet name for Test Data sheet containing details for 'Controller Mapping' section of 'Security Items' screen
sAddCntrlrMapSISheet = "Add_ControllerMap" 'Sheet name for Test Data sheet containing details for adding record in 'Controller Mapping' section of 'Security Items' screen

sDefModAddScr = "Please select a module..." 'Default value for 'Module' field in 'Add Screen' window of 'Security Items' screen
sCntrlrMapScr = "Controller Mapping" 'Controller Mapping screen name

sExpClrMapSI = "rgb(222, 37, 51)" 'Expected color style for fields in 'Add New Controller Mapping'/'Edit Mapping' window

arrSortType = Array("ASCENDING", "DESCENDING") 'Array for storing the sorting types
arrAdminLinks = Array("User maintenance", "Group maintenance", "Security Items", "System Codes", "Client Groups", "Application Log", "Exception Log") 'Array for storing the 'Admin' links
arrAdminScrTitle = Array("User Maintenance", "Group Maintenance", "Security Items", "Code Types", "Client Groups", "Search Application Log", "Search Exception Log") 'Array for storing the Screen titles for 'Administration' screens
arrWinNameSI = Array("Add New Module", "Edit Module", "Add New Screen", "Edit Screen", "Add New Functionality", "Edit Functionality", "Add New Menu", "Edit Menu", "Add New Controller", "Edit Controller") 'Array containing window names in 'Security Items' screen

arrDelModDlgTxt = Array("Are you sure that you want to delete this module?", "This will also result in the deletion of ", " records related to it.") 'Array for storing the validation dialog text which appears when deleting the record in 'Modules' section of 'Security Items' screen
arrDelScrDlgTxt = Array("Are you sure that you want to delete this screen?", "This will also result in the deletion of ", " records related to it.") 'Array for storing the validation dialog text which appears when deleting the record in 'Screens' section of 'Security Items' screen
arrDelFuncDlgTxt = Array("Are you sure that you want to delete this functionality?", "This will also result in the deletion of ", " records related to it.") 'Array for storing the validation dialog text which appears when deleting the record in 'Functionality' section of 'Security Items' screen
arrDelMenuDlgTxt = Array("Are you sure that you want to delete this menu?", "This will also result in the deletion of ", " records related to it.") 'Array for storing the validation dialog text which appears when deleting the record in 'Menus' section of 'Security Items' screen
arrTabsInSI = Array("Modules", "Screens", "Functionality", "Menus", "Controllers") 'Array for storing the tabs in 'Security Items' screen
arrDelDlgBtnsSI = Array("Delete", "Cancel") 'Array for storing the buttons of validation dialog to delete the record in 'Security Items' screen

arrElmntsAddModSI = Array("Code", "Name", "Description", "Active", "Save", "Cancel") 'Array for storing the elements which needs to be checked in 'Add New Module' window of 'Modules' section in 'Security Items' screen
arrElmntsEdtModSI = Array("Code", "Name", "Description", "Active", "Save", "Cancel") 'Array for storing the elements which needs to be checked in 'Edit Module' window of 'Modules' section in 'Security Items' screen
arrFldsAddModSI = Array("Code", "Name", "Description", "Active") 'Array for storing the field names where value needs to be entered for adding a Module in 'Modules' section of 'Security Items' screen
arrFldsEdtModSI = Array("Code", "Name", "Description", "Active") 'Array for storing the field names where value needs to be entered for editing a Module in 'Modules' section of 'Security Items' screen
arrModSITblCols = Array("Actions", "ID", "Code", "Name", "Description", "Active") 'Array for storing the column names of table in 'Modules' section of 'Security Items' screen
arrModSITblColsSort = Array("ID", "Code", "Name", "Description", "Active") 'Array for storing the columns to check sorting functionality in 'Modules' section of 'Security Items' screen
arrModSITblColsTypSort = Array("Num", "Text", "Text", "Text", "Text") 'Array for storing the type of data columns contain in 'Modules' section of 'Security Items' screen

arrElmntsAddScrSI = Array("Code", "Name", "Description", "Module", "URL", "Active", "Save", "Cancel") 'Array for storing the elements which needs to be checked in 'Add New Screen' window of 'Screens' section in 'Security Items' screen
arrElmntsEdtScrSI = Array("Code", "Name", "Description", "Module", "URL", "Active", "Save", "Cancel") 'Array for storing the elements which needs to be checked in 'Edit Screen' window of 'Screens' section in 'Security Items' screen
arrFldsAddScrSI = Array("Code", "Name", "Description", "Module", "URL", "Active") 'Array for storing the field names where value needs to be entered for adding a Screen in 'Screens' section of 'Security Items' screen
arrFldsEdtScrSI = Array("Code", "Name", "Description", "Module", "URL", "Active") 'Array for storing the field names where value needs to be entered for editing a Module in 'Screens' section of 'Security Items' screen
arrScrSITblCols = Array("Actions", "ID", "Code", "Name", "Description", "Module", "URL", "Active") 'Array for storing the column names of table in 'Screens' section of 'Security Items' screen
arrScrSITblColsSort = Array("ID", "Code", "Name", "Description", "Module", "URL", "Active") 'Array for storing the columns to check sorting functionality in 'Screens' section of 'Security Items' screen
arrScrSITblColsTypSort = Array("Num", "Text", "Text", "Text", "Text", "Text", "Text") 'Array for storing the type of data columns contain in 'Modules' section of 'Security Items' screen

arrElmntsAddFuncSI = Array("Code", "Name", "Description", "Screen", "Active", "Save", "Cancel") 'Array for storing the elements which needs to be checked in 'Add New Functionality' window of 'Functionality' section in 'Security Items' screen
arrElmntsEdtFuncSI = Array("Code", "Name", "Description", "Screen", "Active", "Save", "Cancel") 'Array for storing the elements which needs to be checked in 'Edit Functionality' window of 'Functionality' section in 'Security Items' screen
arrFldsAddFuncSI = Array("Code", "Name", "Description", "Screen", "Active") 'Array for storing the field names where value needs to be entered for adding a functionality in 'Functionality' section of 'Security Items' screen
arrFldsEdtFuncSI = Array("Code", "Name", "Description", "Screen", "Active") 'Array for storing the field names where value needs to be entered for editing a functionality in 'Functionality' section of 'Security Items' screen
arrFuncSITblCols = Array("Actions", "ID", "Code", "Name", "Description", "Screen Name", "Active") 'Array for storing the column names of table in 'Functionality' section of 'Security Items' screen
arrFuncSITblColsSort = Array("ID", "Code", "Name", "Description", "Screen Name", "Active") 'Array for storing the columns to check sorting functionality in 'Functionality' section of 'Security Items' screen
arrFuncSITblColsTypSort = Array("Num", "Text", "Text", "Text", "Text", "Text") 'Array for storing the type of data columns contain in 'Functionality' section of 'Security Items' screen

arrElmntsAddMenuSI = Array("Name", "Description", "Screen (optional)", "Parent", "Order", "Active", "Save", "Cancel") 'Array for storing the elements which needs to be checked in 'Add New Menu' window of 'Menus' section in 'Security Items' screen
arrElmntsEdtMenuSI = Array("Name", "Description", "Screen (optional)", "Parent", "Order", "Active", "Save", "Cancel") 'Array for storing the elements which needs to be checked in 'Edit Menu' window of 'Menus' section in 'Security Items' screen
arrFldsAddMenuSI = Array("Name", "Description", "Screen (optional)", "Parent", "Order", "Active") 'Array for storing the field names where value needs to be entered for adding a Menu in 'Menus' section of 'Security Items' screen
arrFldsEdtMenuSI = Array("Name", "Description", "Screen (optional)", "Parent", "Order", "Active") 'Array for storing the field names where value needs to be entered for editing a Menu in 'Menus' section of 'Security Items' screen
arrMenuSITblCols = Array("Actions", "ID", "Parent", "Name", "Description", "Screen", "Order", "Active") 'Array for storing the column names of table in 'Menus' section of 'Security Items' screen
arrMenuSITblColsSort = Array("ID", "Parent", "Name", "Description", "Screen", "Order", "Active") 'Array for storing the columns to check sorting functionality in 'Menus' section of 'Security Items' screen
arrMenuSITblColsTypSort = Array("Num", "Text", "Text", "Text", "Text", "Text", "Text") 'Array for storing the type of data columns contain in 'Menus' section of 'Security Items' screen

arrCntrlrTblCols = Array("Actions", "ID", "Name", "Description", "Active") 'Array for storing the column names of table in 'Controllers' section of 'Security Items' screen
arrCntrlrSITblColsSort = Array("ID", "Name", "Description", "Active") 'Array for storing the columns to check sorting functionality in 'Controllers' section of 'Security Items' screen
arrCntrlrSITblColsFltr = Array("ID", "Name", "Description") 'Array for storing the columns to check the filter functionality in 'Controllers' section of 'Security Items' screen
arrCntrlrSITblColsTypSort = Array("Num", "Text", "Text", "Text") 'Array for storing the type of data columns contain in 'Controllers' section of 'Security Items' screen
arrFldsAddCntrlrSI = Array("Name", "Description") 'Array for storing the field names in 'Add Controller' window of 'Controllers' screen
arrFldsEdtCntrlrSI = Array("Name", "Description") 'Array for storign the field names in 'Edit Controller' window of 'Controllers' screen
arrCntrlrMapTblCols = Array("Actions", "Screen Name", "Functionality Name") 'Array for storing the column names of table in 'Controllers>>Controller Mapping' section of 'Security Items' screen
arrCntrlrMapTblColsSort = Array("Screen Name", "Functionality Name") 'Array for storing the columns to check sorting functionality in 'Controllers>>Controller Mapping' section of 'Security Items' screen
arrCntrlrMapTblColsTypSort = Array("Text", "Text") 'Array for storing the type of data columns contain in 'Controllers>>Controller Mapping' section of 'Security Items' screen
arrCntrlrMapTblColsFltr = Array("Screen Name", "Functionality Name") 'Array for storing the columns to check filter functionality in 'Controllers>>Controller Mapping' section of 'Security Items' screen

arrRecPerPgSI = Array("5", "10", "25", "50", "100", "All") 'Array for storing the options available in 'Records Per Page' dropdown for 'Security Items' screen


'*******************************************************************************************************************************************************************************
'****************************************************SYSTEM CODES SCREEN********************************************************************************************************
'*******************************************************************************************************************************************************************************

sTDFileSC = "C:\Users\Public\WCSAutomation\TestData\Administration\SystemCodes\SystemCodes.xls" 'Test Data File Path for 'System Codes' screen
sCodeTypeSheetSC = "CodeType" 'Sheet containing TestData for 'Code Type' section of 'System Codes' screen
sCodeSheetSC = "Code" 'Sheet containing TestData for 'Code' section of 'System Codes' screen
sAddCodeTypeSheetSC = "AddCodeType" 'Sheet containing TestData for adding a record in 'Code Type' section of 'System Codes' screen
sAddCodeSheetSC = "AddCode" 'Sheet containing TestData for adding a record in 'Code' section of 'System Codes' screen

sSysCodeScr = "Code Types" 'System Codes screen name

iMaxStrLenAlphaFldsEdtCodeSC = 2083 'Max. string length for Alpha Fields in 'Edit Code' window of 'System Codes' screen
sAlphaFldsValStrEdtCodeSC = ";/?:@=&" & chr(34) & "<>#%{}|\^~[]`" 

arrRecPerPgSC = Array("5", "10", "25", "50", "100", "All") 'Array for storing the options in 'Records Per Page' dropdown of 'System Codes' screen

arrTblColsCT = Array("Actions", "ID", "Code Type ID", "Description", "User Groups", "Active") 'Array for storing the column names of table in 'Code Types' screen
arrTblColsSortCT = Array("ID", "Code Type ID", "Description", "User Groups", "Active") 'Array for storing the columns to check sorting functionality in 'Code Types' screen
arrTblColsSortTypCT = Array("Num", "Num", "Text", "Text", "Text") 'Array for storing the type of data column contains in 'Code Types' screen
arrTblColsCode = Array("Actions", "Code ID", "Code Alpha", "Description", "Active", "Comments") 'Array for storring the table column names in 'Code' section of 'System Codes' screen

arrWinNameSC = Array("Add Code Type", "Edit Code Type", "Add Code", "Edit Code")  'Array containing window names in 'System Codes' screen
arrElmntsAddCTSC = Array("Code Type ID", "Code Description", "User Groups", "Active", "Save", "Cancel") 'Array for storing the elements in 'Add Code Type' window of 'System Codes' screen
arrElmntsEdtCTSC = Array("Code Type ID", "Code Description", "User Groups", "Active", "Save", "Cancel") 'Array for storing the elements in 'Edit Code Type' window of 'System Codes' screen
arrElmntsAddCodeSC = Array("Code Type Description", "Code ID", "Code Alpha", "Code Description", "Comments", "Active", "Save", "Cancel", "Save and add another code") 'Array for storing the elements in 'Add Code' window of 'System Codes' screen
arrElmntsEdtCodeSC = Array("Code Type Description", "Code ID", "Code Alpha", "Code Description", "Comments", "Active", "Save", "Cancel", "+ Add additional attribute (optional)") 'Array for storing the elements in 'Edit Code' window of 'System Codes' screen
arrAdtnlElmntsEdtCodeSC = Array("Alpha Attr 1", "Alpha Attr 2", "Alpha Attr 3", "Num Attr 1", "Num Attr 2", "Num Attr 3", "Y/N Attr 1", "Y/N Attr 2", "Y/N Attr 3") 'Array for storing the additional elements in 'Edit Code' window of 'System Codes' screen
arrAlphaFldsEdtCodeSC = Array("Alpha Attr 1", "Alpha Attr 2", "Alpha Attr 3") 'Object for Alpha fields in 'Edit Code' window of 'System Codes' screen


'*******************************************************************************************************************************************************************************
'****************************************************USER MAINTENANCE SCREEN********************************************************************************************************
'*******************************************************************************************************************************************************************************

sTDFileUM = "C:\Users\Public\WCSAutomation\TestData\Administration\User Maintenance\UserMaintenance.xls" 'Test Data File Path for 'User Maintenance' screen
sSrchSheetUM = "Search" 'Sheet containing TestData for checking the 'Search' functionality in 'User Maintenance' screen
sAddFuncSheetUM = "AddFunc" 'Sheet containing TestData for checking the 'Add User' functionality in 'User Maintenance' screen
sUserInfoSheetUM = "UserInfo" 'Sheet containing TestData for checking the 'User's SSO' functionality in 'User Maintenance' screen
sStatChngSheetUM = "StatusChng" 'Sheet containing TestData for checking the 'Status Change' functionality in 'User Maintenance' screen
sEdtFuncSheetUM = "EditFunc" 'Sheet containing TestData for checking the 'Edit User' functionality in 'User Maintenance' screen
sCopyFuncSheetUM = "CopyFunc" 'Sheet containing TestData for checking the 'Copy User' functionality in 'User Maintenance' screen
sCpyUsrSheetUM = "CopyUsr" 'Sheet containing TestData for copying a user in 'User Maintenance' screen
sMngDOALmtSheetUM = "MngDOALmt" 'Sheet containing TestData for checking 'Manage DOA Limit' functionality in 'User Maintenance' screen
sDirInpSheetMCUM =  "DirInput" 'Sheet containing TestData for checking 'Direct Input' functionality in 'Manage Clients' screen of 'User Maintenance'
sChkSecSheetMCUM = "SecChkMC" 'Sheet containing TestData for checking the sections under 'Manage Clients' screen of 'User Maintenance'

sUsrMainScr = "User Maintenance" 'User Maintenance screen name
sUsrSSOCol = "UserSSO"  'Column containing user's 'SSO' information in TestData sheet

'Arrays
arrTabsInUsrMain = Array("Active Users", "Inactive Users") 'Array containing the tabs in 'User Maintenance' screen
arrRecPerPgUM = Array("5", "10", "25", "50", "100", "All") 'Array for storing the options available in 'Records Per Page' dropdown for 'User Maintenance' screen

arrTblColsActUsrUM = Array("Actions", "ID", "Name", "SSO") 'Array containing the column names of table in 'Active Users' section of 'User Maintenance' screen
arrTblColsSortActUsrUM = Array("ID", "Name", "SSO") 'Array containing the column names for checking the sorting functionality in 'Active Users' section of 'User Maintenance' screen
arrTblColsSortTypActUsrUM = Array("Num", "Text", "Num") 'Array for storing the type of data columns contain in 'Active Users' section of 'User Maintenance' screen

arrTblColsInactUsrUM = Array("Actions", "ID", "Name", "SSO") 'Array containing the column names of table in 'Inactive Users' section of 'User Maintenance' screen
arrTblColsSortInactUsrUM = Array("ID", "Name", "SSO") 'Array containing the columns to check sorting functionality in 'Inactive Users' section of 'User Maintenance' screen
arrTblColsSortTypInactUsrUM = Array("Num", "Text", "Num") 'Array for storing the type of data columns contain in 'Inactive Users' section of 'User Maintenance' screen

arrWinNameUM = Array("Add New User", "Edit User", "Copy User") 'Array for storing the window names in 'User Maintenance' screen
arrFldsAddUsrUM = Array("Full Name", "SSO") 'Array for storing the field names in 'Add New User' window of 'User Maintenance' screen
arrFldsEdtUsrUM = Array("Full Name", "SSO") 'Array for storing the field names in 'Edit User' window of 'User Maintenance' screen
arrFldsCpyUsrUM = Array("Full Name", "SSO") 'Array for storing the field names in 'Copy User' window of 'User Maintenance' screen
arrUsrTypeUM = Array("Active", "Inactive") 'Array for storing the type of 'Users' in 'User Maintenance' screen

arrOptnsSetUsrMain = Array("Manage groups", "Manage clients", "Manage client groups", "Manage DOA limit") 'Array for storing the items available under 'Settings' option in 'User Maintenance' screen

arrSecMngClntGrpWin = Array("Available Client Groups", "Selected Client Groups") 'Array for storing the name of the sections available in 'Manage Client Group' window in 'User Maintenance' screen
arrSecMngGrpWin = Array("Available Groups", "Selected Groups") 'Array for storing the name of sections available in 'Manage Group' window of 'User Maintenance' screen
arrElmntsMngClntGrpActUM = Array("Available Client Groups", "Selected Client Groups", "Save", "Cancel", "Synchronize", "Remove Group", "Add Group") 'Array for storing the elements in 'Manage Client Group' window under 'Active Users' section of 'User Maintenance' screen
arrElmntsMngClntGrpInactUM = Array("Available Client Groups", "Selected Client Groups", "Save", "Cancel", "Remove Group", "Add Group") 'Array for storing the elements in 'Manage Client Group' window under 'Inactive Users' section of 'User Maintenance' screen
arrElmntsMngGrpActUM = Array("Available Groups", "Selected Groups", "Save", "Cancel", "Synchronize", "Remove Group", "Add Group") 'Array for storing the elements in 'Manage Group' window under 'Active Users' section of 'User Maintenance' screen
arrElmntsMngGrpInactUM = Array("Available Groups", "Selected Groups", "Save", "Cancel", "Remove Group", "Add Group") 'Array for storing the elements in 'Manage Group' window under 'Inactive Users' section of 'User Maintenance' screen
arrElmntsDirInpMCUM = Array("Add new mapping", "Business", "Sub-business", "Client", "Factorlink numbers", "Business>>Add selected", "Sub-business>>Add selected", "Client>>Add selected", "Factorlink numbers>>Add selected", "Current Mapping", "Businesses", "Sub-businesses", "Clients", "Resulting Factorlink Relationships", "Save", "Cancel", "Synchronize", "Back to user maintenance") 'Array for storing the elements available under 'Direct Input' section of 'Manage Client' window in 'User Maintenance' screen
arrTabsMCUM = Array("Direct input", "Hierarchy view") 'Array for storing the tabs available in 'Manage Client' section of 'User Maintenance' screen
arrSecMCUM = Array("Current Mapping", "Resulting Factorlink Relationships") 'Array for storing the sections available in 'Manage Client' window of 'User Maintenance' screen

'************************************************************************************************************************************************************************
'****************************************************CLIENT GROUPS SCREEN***********************************************************************************************
'************************************************************************************************************************************************************************

sTDFileCG = "C:\Users\Public\WCSAutomation\TestData\Administration\ClientGroups\ClientGroups.xls" 'Test Data File Path for 'Client Groups' screen
sClntGrpScr = "Client Groups" 'Client Group screen name
sSrchSheetCG = "Search" 'Sheet containing the TestData for checking the Search functionality
sAddFormatSheetCG = "AddFormat" 'Sheet containing the TestData for checking the field format functionality in 'Add New Client Groups' window of 'Client Groups' screen
sAddFuncSheetCG = "AddFunc" 'Sheet containing the TestData for checking the 'Add' functionality in 'Client Groups' screen
sAddSheetCG = "Add" 'Sheet containing the TestData for adding a new record in 'Client Groups' screen
sEdtFuncSheetCG = "EditFunc" 'Sheet containing the TestData for checking the 'Edit' functionality in 'Client Groups' screen

iMaxLenNameFldAddClntGrpCG = 30 'Max. string length allowed to be entered for 'Name' field of 'Add New Client Groups' window in 'Client Groups' screen

arrClntGrpTblCols = Array("Actions", "ID", "Name", "Active") 'Array for storing the column names of table in 'Client Groups' screen
arrTblColsSortCG = Array("ID", "Name", "Active") 'Array for storing the column names of table where sorting operation needs to be performed in 'Client Groups' screen
arrTblColsSortTypCG = Array("Num", "Text", "Text") 'Array for storing the type of data columns contain in 'Client Groups' screen
arrRecPerPgCG = Array("5", "10", "25", "50", "100", "All") 'Array for storing the options available in 'Records Per Page' dropdown for 'Client Groups' screen

arrWinNameCG = Array("Add New Client Group", "Edit Client Group") 'Array for storing the window names in 'Client Groups' screen

arrElmntsAddClntGrpCG = Array("ID", "Name", "Active", "Save", "Cancel") 'Array for storing the elements to be checked in the 'Add New Client Groups' window of 'Client Groups' screen
arrElmntsEdtClntGrpCG = Array("ID", "Name", "Active", "Save", "Cancel") 'Array for storing the elements to be checked in the 'Edit Client Groups' window of 'Client Groups' screen

'************************************************************************************************************************************************************************
'****************************************************GROUP MAINTENANCE SCREEN***********************************************************************************************
'************************************************************************************************************************************************************************

sTDFileGM = "C:\Users\Public\WCSAutomation\TestData\Administration\GroupMaintenance\GroupMaintenance.xls" 'Test Data File Path for 'Group Maintenance' screen
sGrpMainScr = "Group Maintenance" 'Group Maintenance screen name
sAddFuncSheetGM = "AddFunc" 'Sheet containing the TestData for checking the Add functionality in 'Group Maintenance' screen
sAddSheetGM = "Add" 'Sheet containing the TestData for adding a new record in 'Group Maintenance' screen
sEdtDelFuncSheetGM = "EditDelFunc" 'Sheet containing the TestData for checking editing and deleting functionality in 'Group Maintenance' screen
sAccRghtFunc = "AccessRights" 'Sheet containing the TestData for checking the Access Rights functionality in 'Group Maintenance' screen

arrRecPerPgGM = Array("5", "10", "25", "50", "100", "All") 'Array for storing the options available for 'Records Per Page' dropdown in 'Group Maintenance' screen
arrWinNameGM = Array("Edit Group", "Edit Group", "Add New Right", "Edit Right") 'Array for storing the window names in 'Group Maintenance' screen
arrElmntsAddGrpMainGM = Array("Group Name", "Group Description", "Save", "Cancel") 'Array for storing the elements to be checked in the 'Add Group' window of 'Group Maintenance' screen
arrFldsAddGrpMainGM = Array("Group Name", "Group Description") 'Array for storing the name of fields in the 'Add Group' window of 'Group Maintenance' screen

arrElmntsEdtGrpMainGM = Array("Group Name", "Group Description", "Save", "Cancel") 'Array for storing the elements to be checked in the 'Edit Group' window of 'Group Maintenance' screen
arrFldsEdtGrpMainGM = Array("Group Name", "Group Description") 'Array for storing the name of fields in the 'Edit Group' window of 'Group Maintenance' screen

arrTblColsGM = Array("Actions", "ID", "Name", "Description") 'Array for storing the column names of table in 'Group Maintenance' screen
arrTblColsRtGM = Array("Actions", "Module", "Screen", "Functionality", "Access") 'Array for storing the column names of table in 'Access Rights' section of 'Group Maintenance' screen

arrSortColsTblGM = Array("ID", "Name", "Description") 'Array for storing the column names of table for checking sorting functionality in 'Group Maintenance' screen
arrSortColsTypTblGM = Array("Num", "Text", "Text") 'Array for storing the type of data columns contain in 'Security Items' screen
arrSortColsTblRtGM = Array("Module", "Screen", "Functionality", "Access") 'Array for storing the column names of table for checking sorting functionality in 'Access Rights' section of 'Group Maintenance' screen
arrSortColsTypTblRtGM = Array("Text", "Text", "Text", "Text") 'Array for storing the type of data columns contain in 'Access Rights' section of 'Group Maintenance' screen

'************************************************************************************************************************************************************************
'****************************************************APPLICATION LOG SCREEN***********************************************************************************************
'************************************************************************************************************************************************************************

sTDFileAL = "C:\Users\Public\WCSAutomation\TestData\Administration\ApplicationLog\ApplicationLog.xls" 'Test Data File Path for 'Application Log' screen
sSortSheetAL = "SortFunc" 'Sheet containing TestData for checking the 'Sorting' functionality in 'Application Log' screen

sAppLogScr = "Application Log" 'Application Log screen name
sLookFeelSheetAL = "LookFeel" 'Sheet containing the TestData for checking the 'Look & Feel' functionality

arrTblColsSRAL = Array("Date", "Time", "SSO", "Action", "Session", "Screen") 'Array for storing the columns available in 'Search Results' table of 'Application Log' screen
arrSortColsSRTblAL = Array("Date", "Time", "SSO", "Action", "Session", "Screen") 'Array for storing the columns on which sorting operation needs to be performed in 'Search Results' section of 'Application Log' screen
arrSortColsTypSRTblAL = Array("Text", "Text", "Num", "Text", "Text", "Text") 'Array for storing the type of data columns contain in 'Search Results' section of 'Application Log' screen
arrRecPerPgSRAL = Array("5", "10", "25", "50", "100") 'Array for storing the options available in 'Records Per Page' dropdown for 'Search Results' section in 'Application Log' screen

'	Load library according to browser
	Select Case sExecBrowser
		Case "IEXPLORE.EXE"
			LoadFunctionLibrary "[ALM\Resources] Resources\BPT Resources\Libraries\Administration_ReusableFunctions_IE.qfl"
		Case "CHROME.EXE"
			LoadFunctionLibrary "[ALM\Resources] Resources\BPT Resources\Libraries\Administration_ReusableFunctions_Chrome.qfl"
		Case "FIREFOX.EXE"
			LoadFunctionLibrary "[ALM\Resources] Resources\BPT Resources\Libraries\Administration_ReusableFunctions_FF.qfl"
	End Select

'************************************************************************************************************************************************************************
'************************************************************************************************************************************************************************
'************************************************************************************************************************************************************************
'************************************************************************************************************************************************************************
'  Function Name	   	:   funSelectMenuItem
'  Function Description :   Function for selecting the menu item to open the 'Administration' screens
'  Function Parameters  :	wpgPage = Object for page from where link needs to be clicked, sHierarchy = Hierarchy of link to be selected
'  Date Created      	:   9th Jan, 2017
'  Author               :  	Karan Mehta
'  Last modified  on    :  	
'*******************************************************************************************************************
Public Function funSelectMenuItem(ByVal wpgPage, ByVal sHierarchy)

Dim iWait 'Reference variable for iteration
	
'	Checking the existence of hierarchy
	bFlag = funCheckLinkExistenceInMenu(sHierarchy, wpgPage)
	If bFlag = False Then
		funHTMLResult "Fail", "Check '" & sHierarchy & "' link existence", "Failed as '" & sHierarchy & "' link is not present."
		ExitTest
	End If	
	
'	Splitting the hierarchy 
	arrLinks = Split(sHierarchy, "->")
	
'	Getting the count of items to be checked in the menu
	iItemCount = UBound(arrLinks) + 1

'	Setting the object for menu item to be checked
	If iItemCount = 2 Then
		Set wblLink = wpgPage.Link("xpath:=//ul/li/a[text()='" & arrLinks(0) & "']/../ul/li/a[text()='" & arrLinks(1) & "']")
	Else
		funHTMLResult "Fail", "Check Hierarchy", "Failed as Hierarchy for opening Administration screen is not proper. Actual Hierarchy : " & sHierarchy
		ExitTest
	End If
	
'	Clicking on the link in the hierarchy
	funClickObject wblLink, "'" & sHierarchy & "' link"
	
'	Setting the object of the page
	Select Case arrLinks(1)
		
		Case arrAdminLinks(0)
			Set wpgPage1 = wpgUsrMain
		Case arrAdminLinks(1)
			Set wpgPage1 = wpgGrpMaint
		Case arrAdminLinks(2)
			Set wpgPage1 = wpgSecItem
		Case arrAdminLinks(3)
			Set wpgPage1 = wpgSysCode
		Case arrAdminLinks(4)
			Set wpgPage1 = wpgClntGrpPage
		Case arrAdminLinks(5)
			Set wpgPage1 = wpgApplnLogPage
		Case arrAdminLinks(6)
			Set wpgPage1 = wpgExcptnLogPage
	End Select
	
'	Setting the object for the loading image which appears if the page is loading
	Set welLoadIcon = wpgPage1.WebElement("xpath:=//div[@class='spinnerContainer'][@ng-show='loading']")

'	Waiting for Load icon to disappear
	funWaitForLoadImgToDispr welLoadIcon
	
'	Setting the object for the screen title
	Set welScrTitle = wpgPage1.WebElement("xpath:=//section[@class='white-background']/div[@class='sec-maint-head']/h3")
	
'	Waiting for the screen to appear
	bFlag = funObjectIsPresent(welScrTitle, "'" & sHierarchy & "' screen", 360)
	
'	Checking the existence of screen
	If bFlag Then
		
	'	Checking the existence of sections in selected Administration screen
		funCheckSecInAdminScr arrLinks(1)
	Else
		ExitTest	
	End If
End Function


'*******************************************************************************************************************
'  Function Name	   	:   funCheckSecInAdminScr
'  Function Description :   Function for checking the sections in 'Administration' screens
'  Function Parameters  :	sAdminLink = Link which is clicked for opening the 'Administration' screens
'  Date Created      	:   9th Jan, 2017
'  Author               :  	Karan Mehta
'  Last modified  on    :  	
'*******************************************************************************************************************
Public Function funCheckSecInAdminScr(ByVal sAdminLink)

Dim iLoop 'Reference variable for iteration

'	Setting the object of the page
	Select Case sAdminLink
		
		Case arrAdminLinks(0)
			Set wpgPage1 = wpgUsrMain
			sAdminSec = arrAdminScrTitle(0)
			iSecCnt = 1
		Case arrAdminLinks(1)
			Set wpgPage1 = wpgGrpMaint
			sAdminSec = arrAdminScrTitle(1)
			iSecCnt = 1
		Case arrAdminLinks(2)
			Set wpgPage1 = wpgSecItem
			sAdminSec = arrAdminScrTitle(2)
			iSecCnt = 1
		Case arrAdminLinks(3)
			Set wpgPage1 = wpgSysCode
			sAdminSec = arrAdminScrTitle(3)
			iSecCnt = 1
		Case arrAdminLinks(4)
			Set wpgPage1 = wpgClntGrpPage
			sAdminSec = arrAdminScrTitle(4)
			iSecCnt = 1
		Case arrAdminLinks(5)
			Set wpgPage1 = wpgApplnLogPage
			sAdminSec = arrAdminScrTitle(5)
			iSecCnt = 2
		Case arrAdminLinks(6)
			Set wpgPage1 = wpgExcptnLogPage
			sAdminSec = arrAdminScrTitle(6)
			iSecCnt = 2
	End Select
	
'	Loop for checking the existence of screen titles
	For iLoop = 1 To iSecCnt
	
	'	Setting the object for the sections in the selected Admin screen
		If iLoop = 1 Then
			Set welAdminSec = wpgPage1.WebElement("xpath:=//section[@class='white-background']/div[@class='sec-maint-head']/h3[text()='" & sAdminSec & "']")
		Else
			sAdminSec = "Search Results"
			Set welAdminSec = wpgPage1.WebElement("xpath:=//section[@class='white-background ng-scope']/div[@class='sec-maint-head']/h3[text()='" & sAdminSec & "']")
		End If
				
	'	Checking the existence of the sections in the screen
		bFlag = funObjectIsPresent(welAdminSec, "'" & sAdminSec & "' section in '" & sAdminLink & "' screen", 25)
	Next
End Function


'*******************************************************************************************************************
'  Function Name	   	:   funAddModuleInSecItem
'  Function Description :   Function for adding a new module in 'Security Items' screen
'  Function Parameters  :	None
'  Date Created      	:   9th Jan, 2017
'  Author               :  	Karan Mehta
'  Last modified  on    :  	
'*******************************************************************************************************************
Public Function funAddModuleInSecItem(ByVal sButtonName)

Dim bSheetExist 'Reference variable for checking the sheet existence in TestData file
ReDim arrVal(UBound(arrFldsAddModSI)) 'Array for storing the values for the fields

'	Checking the existence of TestData sheet
	CheckSheetExistence sTDFileSI, sModSISheet, bSheetExist
	If bSheetExist = False Then
		funHTMLResult "Fail", "Check Sheet Existence", "Failed as Sheet: '" & sModSISheet & "' does not exists in file placed at path: " & sTDFileSI & "'"
		ExitTest
	End If

'	Adding the sheet in the DataTable
	DataTable.AddSheet sModSISheet
	
'	Loading the Test Data sheet in the DataTable
	DataTable.ImportSheet sTDFileSI, sModSISheet, sModSISheet
	DataTable.GetSheet(sModSISheet).SetCurrentRow 1

'	Getting the total records in the table
	iTblRecCntBef = funGetTotlRecInTable(welPgsPgtnSI, wtblDataModSI)

'	Clicking on 'Add new module' link
	funClickObject wlnkAddNewModSI, "'Add new module' link"
	
'	Checking the existence of 'Add New Module' window
	bFlag = funObjectIsPresent(welAddModWinSI, "'Add New Module' window", 25)
	If bFlag = False Then
		ExitTest
	End If
	
'	Loop for entering the value in the fields
	For iLoop = 0 To UBound(arrFldsAddModSI)
	
		Select Case arrFldsAddModSI(iLoop)
		
			Case "Code", "Name"
			
			'	Entering the unique data for fields in 'Add New Module' window
				arrVal(iLoop) = funGetUniqueDataForSI(arrWinNameSI(0), arrFldsAddModSI(iLoop))
				
			'	Setting the output of the function as 'Code'
				If arrFldsAddModSI(iLoop) = "Code" Then
					funAddModuleInSecItem = arrVal(iLoop)
				End If
			Case Else
			
			'	Getting the test data from the sheet for selected field
				arrVal(iLoop) = DataTable.GetSheet(sModSISheet).GetParameter(arrFldsAddModSI(iLoop)).Value
			
			'	Performing the operation based on field selected			
				If arrFldsAddModSI(iLoop) = "Active" Then
					funSetCheckBox wcbxActiveAddModSI, "'" & arrFldsAddModSI(iLoop) & "' checkbox", arrVal(iLoop)
				Else
					funSetValueInEditBox wedtDescAddModSI, "'" & arrFldsAddModSI(iLoop) & "' field", arrVal(iLoop)
				End If
		End Select	
	Next
	
'	Setting the object for the button to be clicked
	If sButtonName = arrElmntsAddModSI(5) Then
		Set wbtnBtn = wbtnCnclAddModSI
	Else
		Set wbtnBtn = wbtnSaveAddModSI
	End If
	
'	Clicking on the button
	funClickObject wbtnBtn, "'" & sButtonName & "' button"
	
'	Checking if 'Add New Module' window disappears
	funCheckElementDisappearance welAddModWinSI, "'Add New Module' window"
	
'	Waiting for the loading image to disappear
	funWaitForLoadImgToDispr welLoadIconSI
	
'	Getting the total records in the table
	iTblRecCntAftr = funGetTotlRecInTable(welPgsPgtnSI, wtblDataModSI)

'	Checking if record gets added or not?
	If sButtonName = arrElmntsAddModSI(5) Then
		If iTblRecCntAftr = iTblRecCntBef Then
			funHTMLResult "Pass", "Check record addition", "Successfully checked that record is not added in the table as '" & sButtonName & "' button is clicked in 'Add New Module' window. Expected Count : " & iTblRecCntBef & " & Actual Count : " & iTblRecCntAftr
		Else
			funHTMLResult "Fail", "Check record addition", "Failed as record gets added in the table on clicking '" & sButtonName & "' button in 'Add New Module' window. Expected Count : " & iTblRecCntBef & " & Actual Count : " & iTblRecCntAftr
		End If
	Else
		If iTblRecCntAftr = iTblRecCntBef + 1 Then
			funHTMLResult "Pass", "Check record addition", "Successfully checked that record is added in the table as '" & sButtonName & "' button is clicked in 'Add New Module' window. Expected Count : " & iTblRecCntBef & " & Actual Count : " & iTblRecCntAftr
		Else
			funHTMLResult "Fail", "Check record addition", "Failed to add a record in the table on clicking '" & sButtonName & "' button in 'Add New Module' window. Expected Count : " & iTblRecCntBef & " & Actual Count : " & iTblRecCntAftr
			ExitTest
		End If
	End If
End Function


'*******************************************************************************************************************
'  Function Name	   	:   funGetUniqueDataForSI
'  Function Description :   Function for getting the unique data for 'Code' and 'Name' fields of 'Add New Module'/'Edit Module' window
'							in 'Security Items' screen
'  Function Parameters  :	sWinName = Window Name, sFieldName = Field Name
'  Date Created      	:   10th Jan, 2017
'  Author               :  	Karan Mehta
'  Last modified  on    :  	
'*******************************************************************************************************************
Public Function funGetUniqueDataForSI(ByVal sWinName, ByVal sFieldName)
	
'	Setting the object of the field where value needs to be entered and corresponding validation msg which can appear
	Select Case sWinName
		Case arrWinNameSI(0)
			Select Case sFieldName
				Case arrFldsAddModSI(0)
					Set welElement = wedtCodeAddModSI
					Set welValMsg = welValMsgCodeAddModSI	
				Case arrFldsAddModSI(1)
					Set welElement = wedtNameAddModSI
					Set welValMsg = welValMsgNameAddModSI
			End Select
		Case arrWinNameSI(1)
			Select Case sFieldName
				Case arrFldsEdtModSI(0)
					Set welElement = wedtCodeEdtModSI
					Set welValMsg = welValMsgCodeEdtModSI	
				Case arrFldsEdtModSI(1)
					Set welElement = wedtNameEdtModSI
					Set welValMsg = welValMsgNameEdtModSI
			End Select
		Case arrWinNameSI(2)
			Select Case sFieldName
				Case arrFldsAddScrSI(0)
					Set welElement = wedtCodeAddScrSI
					Set welValMsg = welValMsgCodeAddScrSI	
				Case arrFldsAddScrSI(1)
					Set welElement = wedtNameAddScrSI
					Set welValMsg = welValMsgNameAddScrSI
			End Select
		Case arrWinNameSI(3)
			Select Case sFieldName
				Case arrFldsEdtScrSI(0)
					Set welElement = wedtCodeEdtScrSI
					Set welValMsg = welValMsgCodeEdtScrSI	
				Case arrFldsEdtScrSI(1)
					Set welElement = wedtNameEdtScrSI
					Set welValMsg = welValMsgNameEdtScrSI
			End Select
		Case arrWinNameSI(4)
			Select Case sFieldName
				Case arrFldsAddFuncSI(0)
					Set welElement = wedtCodeAddFuncSI
					Set welValMsg = welValMsgCodeAddFuncSI
				Case arrFldsAddFuncSI(1)
					Set welElement = wedtNameAddFuncSI
					Set welValMsg = welValMsgNameEdtFuncSI
			End Select
		Case arrWinNameSI(5)
			Select Case sFieldName
				Case arrFldsEdtFuncSI(0)
					Set welElement = wedtCodeEdtFuncSI
					Set welValMsg = welValMsgCodeEdtFuncSI	
				Case arrFldsEdtFuncSI(1)
					Set welElement = wedtNameEdtFuncSI
					Set welValMsg = welValMsgNameEdtFuncSI
			End Select
		Case arrWinNameSI(6)
			Select Case sFieldName
				Case arrFldsAddMenuSI(0)
					Set welElement = wedNameAddMenuSI
					Set welValMsg = welValMsgNameAddMenuSI
			End Select
		Case arrWinNameSI(7)
			Select Case sFieldName
				Case arrFldsEdtMenuSI(0)	
					Set welElement = wedNameEdtMenuSI
					Set welValMsg = welValMsgNameEdtMenuSI
			End Select
		Case arrWinNameSI(8)
			Select Case sFieldName
				Case arrFldsAddCntrlrSI(0)
					Set welElement = wedNameAddCntrlrSI
					Set welValMsg = welValNameAddCntrlrSI
			End Select
		Case arrWinNameSI(9)	
			Select Case sFieldName
				Case arrFldsEdtCntrlrSI(0)
					Set welElement = wedNameEdtCntrlrSI
					Set welValMsg = welValNameEdtCntrlrSI
			End Select
	End Select
	
'	Loop for getting the data which is already not present in the application
	Do
	'	Getting the value to be entered for the field
		sValue = GetRandomString("A", 10, "U")
		
	'	Entering the value in the field
		funSetValueInEditBox welElement, "'" & sFieldName & "' field", sValue
		
	'	Checking if Code/Name entered is already present?
		bFlag = funCheckElementExistence(welValMsg, 3)
	Loop While bFlag
	
'	Setting the output of the function
	funGetUniqueDataForSI = sValue
End Function


'*******************************************************************************************************************
'  Function Name	   	:   funGetTotlRecInTable
'  Function Description :   Function for getting the total records in the table for 'Administration' screens
'  Function Parameters  :	welPgsPgtn = Object for Total Pages in Pagination, wtblTable = Object for WebTable, iHeaderRows = Header row count
'  Date Created      	:   10th Jan, 2017
'  Author               :  	Karan Mehta
'  Last modified  on    :  	
'*******************************************************************************************************************
Public Function funGetTotlRecInTable(ByVal welPgsPgtn, ByVal wtblTable)

'	Setting the object for text if no record exists in table
	Set welNoRecInTbl = wtblTable.WebElement("xpath:=//td[normalize-space(text())='No data available.']")

'	Checking if no record exists in the table
	bFlag = funCheckElementExistence(welNoRecInTbl, 3)
	If bFlag Then
	
	'	Setting the record count as zero
		iRecCount = 0
	Else
	'	Checking the existence of pagination
		bFlag = funCheckElementExistence(welPgsPgtn, 5)
		If bFlag Then
		
		'	Getting the count of pages
			iRecCount = funFetchROProperty(welPgsPgtn, "pages in 'Pagination'", "innertext")
		Else
		'	Getting the count of records in the table
			iRecCount = funFetchROProperty(wtblTable, "records in table", "rows")
			iRecCount = cLng(iRecCount) - 2
		End If
	End If
	
'	Setting the output of the function
	funGetTotlRecInTable = cLng(iRecCount)
End Function


'*******************************************************************************************************************
'  Function Name	   	:   funChkAddModFuncSI
'  Function Description :   Function for checking the 'Add Module' functionality in 'Search Items' screen
'  Function Parameters  :	None
'  Date Created      	:   15th May, 2017
'  Author               :  	Karan Mehta
'  Last modified  on    :  	
'*******************************************************************************************************************
Public Function funChkAddModFuncSI()

Dim iLoop 'Reference variable for iteration	
Dim welElement 'Reference variable for fields object
Dim sTabName 'Reference variable for selecting the tab in 'Security Items' screen
	
'	Setting the tab to be selected in 'Security Items' screen
	sTabName = arrTabsInSI(0)
	
'	Checking if 'Modules' tab is selected by default
	sTabValue = funFetchROProperty(wlnkDefTabSI, "default tab in 'Security Items' screen", "innertext")
	If Trim(sTabValue) = sTabName Then
		funHTMLResult "Pass", "Check default selected tab in 'Security Items' screen", "Successfully checked the default selected tab in 'Security Items' screen. Expected Value : '" & sTabName & "' & Actual Value : '" & sTabValue & "'"
	Else
		funHTMLResult "Fail", "Check default selected tab in 'Security Items' screen", "Failed as default selected tab in 'Security Items' screen is not proper. Expected Value : '" & sTabName & "' & Actual Value : '" & sTabValue & "'"
	End If
	
'	Checking the columns existence in table
	funCheckColsInTable wtblHdrModSI, arrModSITblCols, "'" & sTabName & "' section table"
	
'	Checking the existence of 'Edit' & 'Delete' icons under 'Actions' column
	funObjectIsPresent welEdtFstModModSI, "'Edit' icon for record under 'Actions' column", 5
	funObjectIsPresent welDelFstModModSI, "'Delete' icon for record under 'Actions' column", 5
		
'	Entering the value in fields and press 'Cancel' button
	funAddModuleInSecItem arrElmntsAddModSI(5)
	
'	Clicking on 'Add new module' link
	funClickObject wlnkAddNewModSI, "'Add new module' link"
	
'	Checking the existence of 'Add New Module' window
	bFlag = funObjectIsPresent(welAddModWinSI, "'Add New Module' window", 25)
	If bFlag = False Then
		ExitTest
	End If

'	Loop for checking the existence of elements in the 'Add New Module' window	
	For iLoop = 0 To UBound(arrElmntsAddModSI)
		
	'	Setting the object of the element to be checked
		Set welElement = funGetFieldObjSrchItem(arrWinNameSI(0), arrElmntsAddModSI(iLoop))
			
	'	Checking the existence of required element
		bFlag = funObjectIsPresent(welElement, "'" & arrElmntsAddModSI(iLoop) & "' field/checkbox/button", 15)
		
	'	Checking the fields to enter the values
		Select Case arrElmntsAddModSI(iLoop)
			Case "Code", "Name", "Description"
			
			'	Entering the value in the respective field
				Select Case arrElmntsAddModSI(iLoop)
				
					Case "Code", "Name"
					
					'	Entering the value in the field
						funGetUniqueDataForSI arrWinNameSI(0), arrElmntsAddModSI(iLoop)
					Case "Description"
						
					'	Getting the random Description and entering the value in the field
						sValue = GetRandomString("A", 10, "U")
						funSetValueInEditBox welElement, "'" & arrElmntsAddModSI(iLoop) & "' field", sValue
				End Select
				
			'	Checking if Save button is enabled/disabled?
				Wait(2)
				iValue = funFetchROProperty(wbtnSaveAddModSI, "'Save' button", "disabled")
				If iValue = 1 Then
					funHTMLResult "Pass", "Check if 'Save' button is disabled", "Successfully checked that 'Save' button is disabled if data is entered only for '" & arrElmntsAddModSI(iLoop) & "' field."
				Else
					funHTMLResult "Fail", "Check if 'Save' button is disabled", "Failed as 'Save' button is enabled if data is entered only for '" & arrElmntsAddModSI(iLoop) & "' field."
				End If
				
			'	Setting the field back to blank
				funSetValueInEditBox welElement, "'" & arrElmntsAddModSI(iLoop) & "' field", ""
		End Select	
	Next
	
'	Clicking on the 'Cancel' button
	funClickObject wbtnCnclAddModSI, "'Cancel' button"
	
'	Checking if the 'Add New Module' window is closed
	funCheckElementDisappearance welAddModWinSI, "'Add New Module' window"
	
'	Adding a new module
	sCode = funAddModuleInSecItem(arrElmntsAddModSI(4))
	
'	Deleting the newly added module
	funCheckDelInSecItem sTabName, arrDelDlgBtnsSI(0), sCode	
End Function


'*******************************************************************************************************************
'  Function Name	   	:   funChkEdtDelFuncModSI
'  Function Description :   Function for checking the 'Edit' & 'Delete Module' functionality in 'Search Items' screen
'  Function Parameters  :	None
'  Date Created      	:   15th May, 2017
'  Author               :  	Karan Mehta
'  Last modified  on    :  	
'*******************************************************************************************************************
Public Function funChkEdtDelFuncModSI()

Dim iLoop 'Reference variable for iteration
Dim sButton 'Reference variable for button to be clicked for performing the functionality

'	Loop for checking the 'Delete' and 'Edit' functionalities
	For iLoop = 0 To 3
	
	'	Setting the button to be clicked to perform the functionality
		Select Case iLoop
			
			Case 0
				sButton = arrDelDlgBtnsSI(1)	'Cancel button in validation dialog
			Case 1
				sButton = arrDelDlgBtnsSI(0)	'Delete button in validation dialog
			Case 2
				sButton = arrElmntsAddModSI(5)	'Cancel button in 'Edit Module' window
			Case 3
				sButton = arrElmntsAddModSI(4)	'Save button in 'Edit Module' window
		End Select
		
	'	Calling the desired reusable function to perform the functionality
		Select Case iLoop
			
			Case 0,1
			'	Checking the 'Delete Module' functionality		
				funCheckDelInSecItem arrTabsInSI(0), sButton, ""		
			Case 2,3
			'	Checking the 'Edit Module' functionality
				funEditModuleInSecItem sButton		
		End Select	
	Next
End Function


'*******************************************************************************************************************
'  Function Name	   	:   funSortTblCols
'  Function Description :   Function for sorting the column of table in 'Administration' screens
'  Function Parameters  :	welHdrTbl = Object of table containing header information, sColName = Column name where sort operation is to be performed, sSortType = Sorting Type
'  Date Created      	:   11th Jan, 2017
'  Author               :  	Karan Mehta
'  Last modified  on    :  	
'*******************************************************************************************************************
Public Function funSortTblCols(ByVal welHdrTbl, ByVal sColName, ByVal sSortType)

'	Setting the object for loading icon
	Set welLoadingIcon = Browser("name:=.*").Page("title:=.*").WebElement("xpath:=//div[@class='spinnerContainer'][@ng-show='loading']")

'	Setting the object of the sorted column header in table
	If UCase(sSortType) = arrSortType(0) Then
		Set welSortTblCol = welHdrTbl.WebElement("xpath:=//thead/tr[1]/th[@class='st-sort-ascent'][text()='" & sColName & "']")	
	Else
		Set welSortTblCol = welHdrTbl.WebElement("xpath:=//thead/tr[1]/th[@class='st-sort-descent'][text()='" & sColName & "']")
	End If
	
'	Checking if the column is sorted
	For iLoop = 1 To 3
		
	'	Checking if column is sorted as per the requirement
		bFlag = funCheckElementExistence(welSortTblCol, 5)
		If bFlag Then
		
		'	Exiting the loop as column gets sorted properly
			Exit For
		Else
		'	Setting the object of the column header
			Set welTblColHdr = welHdrTbl.WebElement("xpath:=//thead/tr[1]/th[text()='" & sColName & "']")
		
		'	Clicking on the column header to peform sorting and waiting till loading image disappears (if any)
			funClickObject welTblColHdr, "column '" & sColName & "' in table"
			funWaitForLoadImgToDispr welLoadingIcon
		End If
	Next
	
'	Checking if the column is getting sorted or not properly?
	If iLoop <= 3 Then
		funHTMLResult "Pass", "Check if '" & sColName & "' column is getting sorted in '" & sSortType & "' order", "Successfully checked that '" & sColName & "' column gets sorted in '" & sSortType & "' order."
	Else
		funHTMLResult "Fail", "Check if '" & sColName & "' column is getting sorted in '" & sSortType & "' order", "Failed as '" & sColName & "' column is not getting sorted in '" & sSortType & "' order."
		ExitTest
	End If
End Function


'*******************************************************************************************************************
'  Function Name	   	:   funCheckDelDlgTxtInSrchItem
'  Function Description :   Function for checking the confirmation dialog text while deleting the record in 'Security Items' screen
'  Function Parameters  :	sSubScrName = Tab selected in 'Security Items' screen
'  Date Created      	:   11th Jan, 2017
'  Author               :  	Karan Mehta
'  Last modified  on    :  	
'*******************************************************************************************************************
Public Function funCheckDelDlgTxtInSrchItem(ByVal sTabName)
	
Dim iLoop 'Reference variable for iteration	

	Select Case sTabName
		
		Case arrTabsInSI(0)
			Set welTxt1DelDlgSI = welTxt1ModDelDlgModSI
			Set welTxt2DelDlgSI = welTxt2ModDelDlgModSI
			Set welDelRelRecCntSI = welDelModRelRecCntSI
			sText1 = arrDelModDlgTxt(0)
			sText2 = arrDelModDlgTxt(1)
			sText3 = arrDelModDlgTxt(2)
		Case arrTabsInSI(1)
			Set welTxt1DelDlgSI = welTxt1ScrDelDlgScrSI
			Set welTxt2DelDlgSI = welTxt2ScrDelDlgScrSI
			Set welDelRelRecCntSI = welDelScrRelRecCntSI
			sText1 = arrDelScrDlgTxt(0)
			sText2 = arrDelScrDlgTxt(1)
			sText3 = arrDelScrDlgTxt(2)
		Case arrTabsInSI(2)
			Set welTxt1DelDlgSI = welTxt1FuncDelDlgFuncSI
			Set welTxt2DelDlgSI = welTxt2FuncDelDlgFuncSI
			Set welDelRelRecCntSI = welDelFuncRelRecCntSI
			sText1 = arrDelFuncDlgTxt(0)
			sText2 = arrDelFuncDlgTxt(1)
			sText3 = arrDelFuncDlgTxt(2)
		Case arrTabsInSI(3)
			Set welTxt1DelDlgSI = welTxt1MenuDelDlgFuncSI
			Set welTxt2DelDlgSI = welTxt2MenuDelDlgFuncSI
			Set welDelRelRecCntSI = welDelMenuRelRecCntSI
			sText1 = arrDelMenuDlgTxt(0)
			sText2 = arrDelMenuDlgTxt(1)
			sText3 = arrDelMenuDlgTxt(2)
		Case arrTabsInSI(4)
	End Select
	
'	Loop for matching the dialog text
	For iLoop = 0 To 1
	
	'	Setting the object containing the text of the dialog and checking the existence
		If iLoop = 0 Then
			Set welElement = welTxt1DelDlgSI
			bFlag = funObjectIsPresent(welElement, "dialog text while deleting the record", 5)
			sExpText = sText1
		Else
			Set welElement = welTxt2DelDlgSI
			bFlag = funCheckElementExistence(welElement, 15)
			If bFlag Then
				
			'	Getting the count of records related to the record which is going to be deleted
				sRelRecCnt = Trim(funFetchROProperty(welDelRelRecCntSI, "count of records related to the deleted record", "innertext"))
				
			'	Setting the expected text of dialog
				sExpText = sText2 & sRelRecCnt & sText3
			End If
		End If
			
	'	Getting the text of the dialog
		If bFlag Then
			sDialogText = funFetchROProperty(welElement, "dialog text while deleting record", "innertext")
			
		'	Checking if the text is getting matched
			If Trim(sDialogText) = Trim(sExpText) Then
				funHTMLResult "Pass", "Check validation dialog text while deleting record", "Successfully matched the dialog text. Expected Text : " & sExpText & " & Actual Text : " &  sDialogText
			Else
				funHTMLResult "Fail", "Check validation dialog text while deleting record", "Failed as the dialog text is not getting matched. Expected Text : " & sExpText & " & Actual Text : " &  sDialogText
			End If
		End If
	Next
End Function


'*******************************************************************************************************************
'  Function Name	   	:   funCheckDelInSecItem
'  Function Description :   Function for checking the Delete functionality in Security Items screen 
'  Function Parameters  :	sSubScrName = Tab selected in 'Security Items' screen, sButtonName = Button to be clicked on validation dialog
'  Date Created      	:   11th Jan, 2017
'  Author               :  	Karan Mehta
'  Last modified  on    :  	
'*******************************************************************************************************************
Public Function funCheckDelInSecItem(ByVal sTabName, ByVal sButtonName, sColValueExp)

	Select Case sTabName
		
		Case arrTabsInSI(0)
			Set wtblHdrTableSI = wtblHdrModSI
			Set wtblDataTableSI = wtblDataModSI
			Set wbtnDelDelDlgSI = wbtnDelModDelDlgSI
			Set wbtnCnclDelDlgSI = wbtnCnclModDelDlgSI
			Set welDelDlgSI = welModDelDlgModSI
			Set welDelIconForRec = welDelFstModModSI
			sColToSort = arrModSITblCols(1)
			sColName = arrModSITblCols(2)
		Case arrTabsInSI(1)
			Set wtblHdrTableSI = wtblHdrScrSI
			Set wtblDataTableSI = wtblDataScrSI
			Set wbtnDelDelDlgSI = wbtnDelScrDelDlgSI 			
			Set wbtnCnclDelDlgSI = wbtnCnclScrDelDlgSI
			Set welDelDlgSI = welScrDelDlgScrSI
			Set welDelIconForRec = welDelFstScrScrSI
			sColToSort = arrScrSITblCols(1)
			sColName = arrScrSITblCols(2)
		Case arrTabsInSI(2)
			Set wtblHdrTableSI = wtblHdrFuncSI
			Set wtblDataTableSI = wtblDataFuncSI
			Set wbtnDelDelDlgSI = wbtnDelFuncDelDlgSI 			
			Set wbtnCnclDelDlgSI = wbtnCnclFuncDelDlgSI
			Set welDelDlgSI = welFuncDelDlgFuncSI
			Set welDelIconForRec = welDelFstFuncFuncSI
			sColToSort = arrFuncSITblCols(1)
			sColName = arrFuncSITblCols(2)
		Case arrTabsInSI(3)
			Set wtblHdrTableSI = wtblHdrMenuSI
			Set wtblDataTableSI = wtblDataMenuSI
			Set wbtnDelDelDlgSI = wbtnDelMenuDelDlgSI 			
			Set wbtnCnclDelDlgSI = wbtnCnclMenuDelDlgSI
			Set welDelDlgSI = welMenuDelDlgMenuSI
			Set welDelIconForRec = welDelFstMenuMenuSI
			sColToSort = arrMenuSITblCols(1)
			sColName = arrMenuSITblCols(3)
		Case arrTabsInSI(4)
			
	End Select
	
'	Selecting the required tab in 'Security Items' screen
	funSelectTabInSecItem sTabName
			
'	Checking the count of records available in the table
	iRecCountBef = funGetTotlRecInTable(welPgsPgtnSI, wtblDataTableSI)
		
'	Adding a new record if no record exists
	If (iRecCountBef = 0) OR ((sButtonName = arrDelDlgBtnsSI(0)) AND (Len(Trim(sColValueExp)) = 0)) Then
	
	'	Adding a new module, screen, functionality or menu
		Select Case sTabName
			Case arrTabsInSI(0)
				sColValueExp = funAddModuleInSecItem(arrElmntsAddModSI(4)) 'Adding new module
			Case arrTabsInSI(1)
				sColValueExp = funAddScreenInSecItem(arrElmntsAddScrSI(6)) 'Adding a new screen
			Case arrTabsInSI(2)
				sColValueExp = funAddFuncInSecItem(arrElmntsAddFuncSI(5)) 'Adding a new functionality
			Case arrTabsInSI(3)
				sColValueExp = funAddMenuInSecItem(arrElmntsAddMenuSI(6)) 'Adding a new menu
			Case arrTabsInSI(4)
		End Select
			
	'	Checking the count of records available in the table before performing the functionality
		iRecCountBef = funGetTotlRecInTable(welPgsPgtnSI, wtblDataTableSI)
	End If
	
'	Checking if 'Cancel' button needs to be clicked in the validation dialog for deleting the record
	If sButtonName = arrDelDlgBtnsSI(1) Then
	
	'	Setting the desired column in 'Ascending' order
		funSortTblCols wtblHdrTableSI, sColToSort, arrSortType(0)

	'	Setting the object for button to be clicked in the validation dialog for deleting the record
		Set wbtnButton = wbtnCnclDelDlgSI	
		
	'	Setting the expected count of records if Delete functionality is performed by clicking 'Cancel' button in confirmation dialog
		iRecCountExp = iRecCountBef
	Else
	'	Setting the object for button to be clicked in the validation dialog for deleting the record
		Set wbtnButton = wbtnDelDelDlgSI
		
	'	Setting the expected count of records if Delete functionality is performed by clicking 'Delete' button in confirmation dialog
		iRecCountExp = iRecCountBef - 1
		
	'	Sorting the records in 'Descending' order for required column
		funSortTblCols wtblHdrTableSI, sColToSort, arrSortType(1)
		
	'	Getting the column value for first record
		sColValueAct = funGetDataFromTblInAdmin(wtblDataTableSI, wtblHdrTableSI, sColName, 2)
			
	'	Checking if the latest added record appear on top as records are sorted by Descending order for 'ID' column
		If Trim(sColValueExp) = Trim(sColValueAct) Then
			funHTMLResult "Pass", "Check if added record appear on top", "Successfully checked that newly added record appear on top if records are sorted by '" & arrSortType(1) & "' order for '" & sColToSort & "' column. Expected Value : "  & sColValueExp & " & Actual Value : " & sColValueAct
		Else
			funHTMLResult "Fail", "Check if added record appear on top", "Failed as newly added record doesn't appear on top if records are sorted by '" & arrSortType(1) & "' order for '" & sColToSort & "' column. Expected Value : "  & sColValueExp & " & Actual Value : " & sColValueAct
			ExitTest
		End If
	End If
	
'	Clicking the 'Delete' icon for the record
	funClickObject welDelIconForRec, "'Delete' icon for selected record"

'	Checking the existence of validation dialog
	bFlag = funObjectIsPresent(welDelDlgSI, "validation dialog while deleting the record", 25)
	If bFlag Then
	
	'	Matching the dialog text while deleting the record
		funCheckDelDlgTxtInSrchItem sTabName
		
	'	Clicking on button in the dialog
		funClickObject wbtnButton, "'" & sButtonName & "' button"
		
	'	Checking if the validation dialog disappears
		funCheckElementDisappearance welModDelDlgModSI, "validation dialog while deleting the module"
	End If
		
'	Checking the count of records available in the table after performing the functionality
	iRecCountAft = funGetTotlRecInTable(welPgsPgtnSI, wtblDataTableSI)
	
'	Checking if the 'Delete' functionality is proper
	If iRecCountAft = iRecCountExp Then
		funHTMLResult "Pass", "Check delete functionality by clicking '" & sButton & " button in validation dialog", "Success. Expected Count : " & iRecCountExp & " & Actual Count : " & iRecCountAft 
	Else
		funHTMLResult "Fail", "Check delete functionality by clicking '" & sButton & " button in validation dialog", "Failed. Expected Count : " & iRecCountExp & " & Actual Count : " & iRecCountAft
	End If
End Function


'*******************************************************************************************************************
'  Function Name	   	:   funGetDataFromTblInAdmin
'  Function Description :   Function for getting the Data from table in 'Administration' screens
'  Function Parameters  :	wtblData = Object for table containing data, wtbHdr = Object for table containing header info, iRow = Row
'  Date Created      	:   12th Jan, 2017
'  Author               :  	Karan Mehta
'  Last modified  on    :  	
'*******************************************************************************************************************
Public Function funGetDataFromTblInAdmin(ByVal wtblData, ByVal wtblHdr, ByVal sColName, ByVal iRow)

'	Getting the column Index from the table
	iColIndex = funGetColumnIndexFromTable(wtblHdr, sColName)
	
'	Getting the value of the required cell from the table and setting it as output of the function
	wtblData.RefreshObject
	sValue = wtblData.GetCellData(iRow,iColIndex)
	funGetDataFromTblInAdmin = sValue
End Function


'*******************************************************************************************************************
'  Function Name	   	:   funEditModuleInSecItem
'  Function Description :   Function for editing the record in 'Modules' section of 'Security Items' screen
'  Function Parameters  :	sButtonName = Button to be clicked on 'Edit Module' window after editing the record
'  Date Created      	:   12th Jan, 2017
'  Author               :  	Karan Mehta
'  Last modified  on    :  	
'*******************************************************************************************************************
Public Function funEditModuleInSecItem(ByVal sButtonName)

Dim iLoop 'Reference variable for iteration
Dim bSheetExist 'Reference variable for checking the sheet existence in TestData file
ReDim arrVal(UBound(arrFldsEdtModSI)) 'Array for storing the values used in editing the fields
ReDim arrValOld(UBound(arrFldsEdtModSI)) 'Array for storing the field values before performing the editing
ReDim arrValNew(UBound(arrFldsEdtModSI)) 'Array for storing the field values after performing the editing

'	Adding a new 'Module' record
	sColValueExp = funAddModuleInSecItem(arrElmntsAddModSI(4))
	
'	Sorting the records in 'Descending' order for required column
	funSortTblCols wtblHdrModSI, arrModSITblCols(1), arrSortType(1)
	
'	Getting the column value for first record
	sColValueAct = funGetDataFromTblInAdmin(wtblDataModSI, wtblHdrModSI, arrModSITblCols(2), 2)
		
'	Checking if the latest added record appear on top as records are sorted by Descending order for 'ID' column
	If Trim(sColValueExp) = Trim(sColValueAct) Then
		funHTMLResult "Pass", "Check if added record appear on top", "Successfully checked that newly added record appear on top if records are sorted by '" & arrSortType(1) & "' order for 'Code' column. Expected Value : "  & sColValueExp & " & Actual Value : " & sColValueAct
	Else
		funHTMLResult "Fail", "Check if added record appear on top", "Failed as newly added record doesn't appear on top if records are sorted by '" & arrSortType(1) & "' order for 'Code' column. Expected Value : "  & sColValueExp & " & Actual Value : " & sColValueAct
		ExitTest
	End If
	
'	Getting the field values before update for selected record
	For iLoop = 0 to UBound(arrFldsEdtModSI)
	
	'	Getting the data from table
		arrValOld(iLoop) = funGetDataFromTblInAdmin(wtblDataModSI, wtblHdrModSI, arrFldsEdtModSI(iLoop), 2)
	Next
	
'	Clicking on the 'Edit' icon for the first record
	funClickObject welEdtFstModModSI, "'Edit' icon for the first record"
	
'	Checking the existence of 'Edit Module' window
	bFlag = funObjectIsPresent(welEdtModWinSI, "'Edit Module' window", 25)
	If bFlag = False Then
		ExitTest
	End If
	
'	Setting the current row in the TestData sheet
	DataTable.GetSheet(sModSISheet).SetCurrentRow 2
	
'	Loop for entering the value in the fields
	For iLoop = 0 To UBound(arrFldsEdtModSI)
	
		Select Case arrFldsEdtModSI(iLoop)
		
			Case "Code", "Name"
			
			'	Entering the unique data for fields in 'Edit Module' window
				arrVal(iLoop) = funGetUniqueDataForSI(arrWinNameSI(1), arrFldsEdtModSI(iLoop))
				
			'	Setting the output of the function as 'Code'
				If arrFldsEdtModSI(iLoop) = "Code" Then
					funEditModuleInSecItem = arrVal(iLoop)
				End If
			Case Else
			
			'	Getting the test data from the sheet for selected field
				arrVal(iLoop) = DataTable.GetSheet(sModSISheet).GetParameter(arrFldsEdtModSI(iLoop)).Value
			
			'	Performing the operation based on field selected			
				If arrFldsAddModSI(iLoop) = "Active" Then
					funSetCheckBox wcbxActiveEdtModSI, "'" & arrFldsEdtModSI(iLoop) & "' checkbox", arrVal(iLoop)
				Else
					funSetValueInEditBox wedtDescEdtModSI, "'" & arrFldsEdtModSI(iLoop) & "' field", arrVal(iLoop)
				End If
		End Select	
	Next
	
'	Setting the object for the button to be clicked
	If sButtonName = arrElmntsEdtModSI(5) Then
		Set wbtnBtn = wbtnCnclEdtModSI
	Else
		Set wbtnBtn = wbtnSaveEdtModSI
	End If
	
'	Clicking on the button
	funClickObject wbtnBtn, "'" & sButtonName & "' button"
	
'	Checking if 'Edit Module' window disappears
	funCheckElementDisappearance welEdtModWinSI, "'Edit Module'"
	
'	Waiting for the loading image to disappear
	funWaitForLoadImgToDispr welLoadIconSI
	
'	Getting the field values after update
	For iLoop = 0 to UBound(arrFldsEdtModSI)
	
	'	Getting the data from table
		arrValNew(iLoop) = funGetDataFromTblInAdmin(wtblDataModSI, wtblHdrModSI, arrFldsEdtModSI(iLoop), 2)
		
	'	Checking if the fields are edited or not based on the button clicked in 'Edit Module' window after performing editing
		If sButtonName = arrElmntsEdtModSI(4) Then
		
		'	Checking if 'Active' field value needs to be checked
			If arrFldsEdtModSI(iLoop) = "Active" Then
				If arrVal(iLoop) = "ON" Then
					arrVal(iLoop) = "Yes"
				Else
					arrVal(iLoop) = "No"
				End If
			End If
			
		'	Checking if fields are edited properly as 'Save' button is clicked
			If Trim(arrValNew(iLoop)) = Trim(arrVal(iLoop)) Then
				funHTMLResult "Pass", "Check editing for '" & arrFldsEdtModSI(iLoop) & "' field", "Successfully edited '" & arrFldsEdtModSI(iLoop) & "' field. Expected Value : '" & arrVal(iLoop) & "' & Actual Value : '" & arrValNew(iLoop) & "'"
			Else
				funHTMLResult "Fail", "Check editing for '" & arrFldsEdtModSI(iLoop) & "' field", "Failed as '" & arrFldsEdtModSI(iLoop) & "' field is not edited properly. Expected Value : '" & arrVal(iLoop) & "' & Actual Value : '" & arrValNew(iLoop) & "'"
			End If
		Else	
		'	Checking if fields are not updated as 'Cancel' button is clicked
			If Trim(arrValNew(iLoop)) = Trim(arrValOld(iLoop)) Then
				funHTMLResult "Pass", "Check editing for '" & arrFldsEdtModSI(iLoop) & "' field", "Successfully checked that '" & arrFldsEdtModSI(iLoop) & "' field is not edited. Expected Value : '" & arrValOld(iLoop) & "' & Actual Value : '" & arrValNew(iLoop) & "'"
			Else
				funHTMLResult "Fail", "Check editing for '" & arrFldsEdtModSI(iLoop) & "' field", "Failed as '" & arrFldsEdtModSI(iLoop) & "' field is edited. Expected Value : '" & arrValOld(iLoop) & "' & Actual Value : '" & arrValNew(iLoop) & "'"
			End If	
		End If
	Next
	
'	Setting the Code of the added/edited record
	If sButtonName = arrElmntsEdtModSI(4) Then
		sCode = funEditModuleInSecItem
	Else
		sCode = sColValueAct
	End If

'	Deleting the added/edited record after checking the functionality
	funCheckDelInSecItem arrTabsInSI(0), arrDelDlgBtnsSI(0), sCode
End Function


'*******************************************************************************************************************
'  Function Name	   	:   funLogout_Admin
'  Function Description :   Function for logout from 'Administration' screens
'  Function Parameters  :	wpgPage = Web Page object from where user want to perform logout operation
'  Date Created      	:   13th Jan, 2017
'  Author               :  	Karan Mehta
'  Last modified  on    :  	
'*******************************************************************************************************************
Public Function funLogout_Admin(ByVal wpgPage)

'	Setting the objects
	Set wbtnUsrBtn = wpgPage.WebButton("xpath:=//div[@class='toolbar-container pull-right']//button[@data-toggle='dropdown']") 'Object for login user button
	Set welLogout = wpgPage.WebElement("xpath:=//ul[@class='dropdown-menu']//a[text()='Log Out']") 'Object for Logout button for logout from the application
	Set welLogoutConfWin = wpgPage.WebElement("xpath:=//div[@style='display: block;']//h4[contains(text(),'Logout Confirmation')]/../..") 'Object for 'Logout Confirmation' window
	Set wbtnYesLogoutConfWin = welLogoutConfWin.WebButton("xpath:=//button[text()='Yes']") 'Object for 'Yes' button in 'Logout Confirmation' window 

'	Clicking on the login user button and selecting Logout
	funClickObject wbtnUsrBtn, "Login user button"
	funClickObject welLogout, "'Logout' option for logout from the application"
	
'	Checking the existence of 'Logout Confirmation' window
	bFlag = funObjectIsPresent(welLogoutConfWin, "'Logout Confirmation' window", 30)
	If bFlag Then
		
	'	Clicking on the 'Yes' button in the 'Logout Confirmation' window
		funClickObject wbtnYesLogoutConfWin, "'Yes' button in 'Logout Confirmation' window"
		
	'	Checking if 'Login' screen appears after user logs out from the application
		bFlag = funCheckElementExistence(objBtnLogin, 400)
		If bFlag Then
			funHTMLResult "Pass", "Check user logout", "User logout successfully from the application."
		Else
			funHTMLResult "Fail", "Check user logout", "User is not able to logout from the application."
		End If	
	End If
	
'	Closing the browser after logout	
	funCloseAllBrowsersExceptALM
End Function


'*******************************************************************************************************************
'  Function Name	   	:   funSelectTabInSecItem
'  Function Description :   Function for selecting the tab in 'Security Items' screen
'  Function Parameters  :	sTabName = Tab to be selected in 'Security Items' screen
'  Date Created      	:   13th Jan, 2017
'  Author               :  	Karan Mehta
'  Last modified  on    :  	
'*******************************************************************************************************************
Public Function funSelectTabInSecItem(ByVal sTabName)

'	Setting the objects for tab to be selected in 'Security Items' screen
	Set welTabSI = wpgSecItem.WebElement("xpath:=//div[@class='tabbable']//li/a[text()='" & sTabName & "']")
	Set welSelTabSI = wpgSecItem.WebElement("xpath:=//div[@class='tabbable']//li/a[text()='" & sTabName & "']")
	
'	Selecting the desired tab
	funClickObject welTabSI, "'" & sTabName & "' tab in Security Items screen"

'	Waiting for the loading icon to disappear
	funWaitForLoadImgToDispr welLoadIconSI
	
'	Checking if the tab is selected
	bFlag = funObjectIsPresent(welSelTabSI, "'" & sTabName & "' tab in 'Security Items' screen", 15)
End Function


'*******************************************************************************************************************
'  Function Name	   	:   funChkAddScreenFuncSI
'  Function Description :   Function for adding a new screen in 'Security Items' screen
'  Function Parameters  :	None
'  Date Created      	:   15th May, 2017
'  Author               :  	Karan Mehta
'  Last modified  on    :  	
'*******************************************************************************************************************
Public Function funChkAddScreenFuncSI()
	
Dim iLoop 'Reference variable for iteration	
Dim welElement 'Reference variable for fields object	
Dim sTabName 'Reference variable for tab to be selected in 'Security Items' screen

'	Setting the tab to be selected in 'Security Items' screen
	sTabName = arrTabsInSI(1)
	
'	Selecting the 'Screens' tab
	funSelectTabInSecItem sTabName
	
'	Clicking on 'Add new screen' link
	funClickObject wlnkAddNewScrSI, "'Add new screen' link"
	
'	Checking the existence of 'Add New Screen' window
	bFlag = funObjectIsPresent(welAddScrWinSI, "'Add New Screen' window", 25)
	If bFlag = False Then
		ExitTest
	End If
	
'	Checking if 'Save' button is disabled without entering value for any field
	iValue = funFetchROProperty(wbtnSaveAddScrSI, "'Save' button in 'Add New Screen' window", "disabled")
	If iValue = 1 Then
		funHTMLResult "Pass", "Check if 'Save' button is disabled", "Successfully checked that 'Save' button is disabled by default for 'Add New Screen' window."
	Else
		funHTMLResult "Fail", "Check if 'Save' button is disabled", "Failed as 'Save' button is enabled by default for 'Add New Screen' window."
	End If

'	Loop for checking the existence of elements in the 'Add New Screen' window	
	For iLoop = 0 To UBound(arrElmntsAddScrSI)
	
	'	Getting the object for the element to be checked
		Set welElement = funGetFieldObjSrchItem(arrWinNameSI(2), arrElmntsAddScrSI(iLoop))
		
	'	Checking the existence of required element
		bFlag = funObjectIsPresent(welElement, "'" & arrElmntsAddScrSI(iLoop) & "' " & sText, 15)
		
	'	Checking the fields to enter the values
		Select Case arrElmntsAddScrSI(iLoop)
			Case "Code", "Name", "Description", "Module", "URL"
			
			'	Entering the value in the respective field
				Select Case arrElmntsAddScrSI(iLoop)
				
					Case "Code", "Name"
					
					'	Entering the value in the field
						funGetUniqueDataForSI arrWinNameSI(2), arrElmntsAddScrSI(iLoop)
					Case "Description", "URL"
						
					'	Getting the random Description and entering the value in the field
						sValue = GetRandomString("A", 10, "U")
						funSetValueInEditBox welElement, "'" & arrElmntsAddScrSI(iLoop) & "' field", sValue
					Case "Module"
					
					'	Setting the value in the list
						funSelectFromList welElement, "'" & arrElmntsAddScrSI(iLoop) & "' field", "Administration"
				End Select
				
			'	Checking if Save button is enabled/disabled?
				Wait(2)
				iValue = funFetchROProperty(wbtnSaveAddScrSI, "'Save' button", "disabled")
				If iValue = 1 Then
					funHTMLResult "Pass", "Check if 'Save' button is disabled", "Successfully checked that 'Save' button is disabled if data is entered only for '" & arrElmntsAddScrSI(iLoop) & "' field."
				Else
					funHTMLResult "Fail", "Check if 'Save' button is disabled", "Failed as 'Save' button is enabled if data is entered only for '" & arrElmntsAddScrSI(iLoop) & "' field."
				End If
				
			'	Setting the field back to blank/default value
				If arrElmntsAddScrSI(iLoop) = "Module" Then
					funSelectFromList welElement, "'" & arrElmntsAddScrSI(iLoop) & "' field", sDefModAddScr
				Else
					funSetValueInEditBox welElement, "'" & arrElmntsAddScrSI(iLoop) & "' field", ""
				End If
		End Select
	Next
	
'	Clicking on the 'Cancel' button
	funClickObject wbtnCnclAddScrSI, "'Cancel' button in 'Add New Screen' window"
	
'	Checking if 'Add New Screen' window disappears
	funCheckElementDisappearance welAddScrWinSI, "'Add New Screen' window"
	
'	Entering the value in fields of 'Add New Screen' window and press 'Cancel' button
	funAddScreenInSecItem arrElmntsAddScrSI(7)
	
'	Adding a new screen
	sCode = funAddScreenInSecItem(arrElmntsAddScrSI(6))
	
'	Deleting the newly added screen
	funCheckDelInSecItem sTabName, arrDelDlgBtnsSI(0), sCode
End Function


'*******************************************************************************************************************
'  Function Name	   	:   funAddScreenInSecItem
'  Function Description :   Function for adding a screen in 'Security Items' screen
'  Function Parameters  :	sButtonName = Button to be clicked in 'Add New Screen' window 
'  Date Created      	:   13th Jan, 2017
'  Author               :  	Karan Mehta
'  Last modified  on    :  	
'*******************************************************************************************************************
Public Function funAddScreenInSecItem(ByVal sButtonName)
	
Dim bSheetExist 'Reference variable for checking the sheet existence in TestData file
ReDim arrVal(UBound(arrFldsAddScrSI)) 'Array for storing the values for the fields

'	Checking the existence of TestData sheet
	CheckSheetExistence sTDFileSI, sScrSISheet, bSheetExist
	If bSheetExist = False Then
		funHTMLResult "Fail", "Check Sheet Existence", "Failed as Sheet: '" & sScrSISheet & "' does not exists in file placed at path: " & sTDFileSI & "'"
		ExitTest
	End If

'	Adding the sheet in the DataTable
	DataTable.AddSheet sScrSISheet
	
'	Loading the Test Data sheet in the DataTable
	DataTable.ImportSheet sTDFileSI, sScrSISheet, sScrSISheet
	DataTable.GetSheet(sScrSISheet).SetCurrentRow 1
	
'	Selecting the 'Screens' tab
	funSelectTabInSecItem arrTabsInSI(1)

'	Getting the total records in the table
	iTblRecCntBef = funGetTotlRecInTable(welPgsPgtnSI, wtblDataScrSI)
	
'	Clicking on 'Add new screen' link
	funClickObject wlnkAddNewScrSI, "'Add new screen' link"
	
'	Checking the existence of 'Add New Screen' window
	bFlag = funObjectIsPresent(welAddScrWinSI, "'Add New Screen' window", 25)
	If bFlag = False Then
		ExitTest
	End If
	
'	Loop for entering the value in the fields
	For iLoop = 0 To UBound(arrFldsAddScrSI)
	
		Select Case arrFldsAddScrSI(iLoop)
		
			Case "Code", "Name"
			
			'	Entering the unique data for fields in 'Add New Module' window
				arrVal(iLoop) = funGetUniqueDataForSI(arrWinNameSI(2), arrFldsAddScrSI(iLoop))
				
			'	Setting the output of the function as 'Code'
				If arrFldsAddScrSI(iLoop) = "Code" Then
					funAddScreenInSecItem = arrVal(iLoop)
				End If
			Case Else
			
			'	Getting the test data from the sheet for selected field
				arrVal(iLoop) = DataTable.GetSheet(sScrSISheet).GetParameter(arrFldsAddScrSI(iLoop)).Value
			
			'	Performing the operation based on field selected			
				Select Case arrFldsAddScrSI(iLoop)
					Case "Active"
						funSetCheckBox wcbxActiveAddScrSI, "'" & arrFldsAddScrSI(iLoop) & "' checkbox", arrVal(iLoop)
					Case "Description", "URL"
						If arrFldsAddScrSI(iLoop) = "Description" Then
							Set wedtField = wedtDescAddScrSI
						Else
							Set wedtField = wedtURLAddScrSI
						End If
						funSetValueInEditBox wedtField, "'" & arrFldsAddScrSI(iLoop) & "' field", arrVal(iLoop)
					Case "Module"
						funSelectFromList wlnkModAddScrSI, "'" & arrFldsAddScrSI(iLoop) & "' list", arrVal(iLoop)
				End Select
		End Select	
	Next
	
'	Setting the object for the button to be clicked
	If sButtonName = arrElmntsAddScrSI(7) Then
		Set wbtnBtn = wbtnCnclAddScrSI
	Else
		Set wbtnBtn = wbtnSaveAddScrSI
	End If
	
'	Clicking on the button
	funClickObject wbtnBtn, "'" & sButtonName & "' button"
	
'	Checking if 'Add New Screen' window disappears
	funCheckElementDisappearance welAddScrWinSI, "'Add New Screen' window"
	
'	Waiting for the loading image to disappear
	funWaitForLoadImgToDispr welLoadIconSI
	
'	Getting the total records in the table
	iTblRecCntAftr = funGetTotlRecInTable(welPgsPgtnSI, wtblDataScrSI)

'	Checking if record gets added or not?
	If sButtonName = arrElmntsAddScrSI(7) Then
		If iTblRecCntAftr = iTblRecCntBef Then
			funHTMLResult "Pass", "Check record addition", "Successfully checked that record is not added in the table as '" & sButtonName & "' button is clicked in 'Add New Screen' window. Expected Count : " & iTblRecCntBef & " & Actual Count : " & iTblRecCntAftr
		Else
			funHTMLResult "Fail", "Check record addition", "Failed as record gets added in the table on clicking '" & sButtonName & "' button in 'Add New Screen' window. Expected Count : " & iTblRecCntBef & " & Actual Count : " & iTblRecCntAftr
		End If
	Else
		If iTblRecCntAftr = iTblRecCntBef + 1 Then
			funHTMLResult "Pass", "Check record addition", "Successfully checked that record is added in the table as '" & sButtonName & "' button is clicked in 'Add New Screen' window. Expected Count : " & iTblRecCntBef & " & Actual Count : " & iTblRecCntAftr
		Else
			funHTMLResult "Fail", "Check record addition", "Failed to add a record in the table on clicking '" & sButtonName & "' button in 'Add New Screen' window. Expected Count : " & iTblRecCntBef & " & Actual Count : " & iTblRecCntAftr
			ExitTest
		End If
	End If
End Function


'*******************************************************************************************************************
'  Function Name	   	:   funEditScreenInSecItem
'  Function Description :   Function for editing a record in 'Security Items' screen
'  Function Parameters  :	sButtonName = Button to be clicked in 'Add New Screen' window 
'  Date Created      	:   13th Jan, 2017
'  Author               :  	Karan Mehta
'  Last modified  on    :  	
'*******************************************************************************************************************
Public Function funEditScreenInSecItem(ByVal sButtonName)

Dim iLoop 'Reference variable for iteration
Dim bSheetExist 'Reference variable for checking the sheet existence in TestData file
ReDim arrVal(UBound(arrFldsEdtScrSI)) 'Array for storing the values used in editing the fields
ReDim arrValOld(UBound(arrFldsEdtScrSI)) 'Array for storing the field values before performing the editing
ReDim arrValNew(UBound(arrFldsEdtScrSI)) 'Array for storing the field values after performing the editing

'	Adding a new 'Screen' record
	sColValueExp = funAddScreenInSecItem(arrElmntsAddScrSI(6))
	
'	Sorting the records in 'Descending' order for required column
	funSortTblCols wtblHdrScrSI, arrScrSITblCols(1), arrSortType(1)
	
'	Getting the column value for first record
	sColValueAct = funGetDataFromTblInAdmin(wtblDataScrSI, wtblHdrScrSI, arrScrSITblCols(2), 2)
		
'	Checking if the latest added record appear on top as records are sorted by Descending order for 'ID' column
	If Trim(sColValueExp) = Trim(sColValueAct) Then
		funHTMLResult "Pass", "Check if added record appear on top", "Successfully checked that newly added record appear on top if records are sorted by '" & arrSortType(1) & "' order for 'Code' column. Expected Value : "  & sColValueExp & " & Actual Value : " & sColValueAct
	Else
		funHTMLResult "Fail", "Check if added record appear on top", "Failed as newly added record doesn't appear on top if records are sorted by '" & arrSortType(1) & "' order for 'Code' column. Expected Value : "  & sColValueExp & " & Actual Value : " & sColValueAct
		ExitTest
	End If
	
'	Getting the field values before update for selected record
	For iLoop = 0 to UBound(arrFldsEdtScrSI)
	
	'	Getting the data from table
		arrValOld(iLoop) = funGetDataFromTblInAdmin(wtblDataScrSI, wtblHdrScrSI, arrFldsEdtScrSI(iLoop), 2)
	Next
	
'	Clicking on the 'Edit' icon for the first record
	funClickObject welEdtFstScrScrSI, "'Edit' icon for the first record"
	
'	Checking the existence of 'Edit Screen' window
	bFlag = funObjectIsPresent(welEdtScrWinSI, "'Edit Screen' window", 25)
	If bFlag = False Then
		ExitTest
	End If
	
'	Setting the current row in the TestData sheet
	DataTable.GetSheet(sScrSISheet).SetCurrentRow 2
	
'	Loop for entering the value in the fields
	For iLoop = 0 To UBound(arrFldsEdtScrSI)
	
		Select Case arrFldsEdtScrSI(iLoop)
		
			Case "Code", "Name"
			
			'	Entering the unique data for fields in 'Edit Module' window
				arrVal(iLoop) = funGetUniqueDataForSI(arrWinNameSI(3), arrFldsEdtScrSI(iLoop))
				
			'	Setting the output of the function as 'Code'
				If arrFldsEdtScrSI(iLoop) = "Code" Then
					funEditScreenInSecItem = arrVal(iLoop)
				End If
			Case Else
			
			'	Getting the test data from the sheet for selected field
				arrVal(iLoop) = DataTable.GetSheet(sScrSISheet).GetParameter(arrFldsEdtScrSI(iLoop)).Value
			
			'	Performing the operation based on field selected			
				Select Case arrFldsEdtScrSI(iLoop)
					Case "Description", "URL"
					
					'	Setting the object for the field which needs to be edited
						If arrFldsEdtScrSI(iLoop) = "Description" Then
							Set wedtField = wedtDescEdtScrSI
						Else
							Set wedtField = wedtURLEdtScrSI
						End If
						
					'	Editing the required field
						funSetValueInEditBox wedtField, "'" & arrFldsEdtScrSI(iLoop) & "' field", arrVal(iLoop)	
					Case "Module"
						funSelectFromList wlnkModEdtScrSI,"'" & arrFldsEdtScrSI(iLoop) & "' list", arrVal(iLoop)
					Case "Active"
						funSetCheckBox wcbxActiveEdtScrSI, "'" & arrFldsEdtScrSI(iLoop) & "' checkbox", arrVal(iLoop)
				End Select
		End Select	
	Next
	
'	Setting the object for the button to be clicked
	If sButtonName = arrElmntsEdtScrSI(7) Then
		Set wbtnBtn = wbtnCnclEdtScrSI
	Else
		Set wbtnBtn = wbtnSaveEdtScrSI
	End If
	
'	Clicking on the button
	funClickObject wbtnBtn, "'" & sButtonName & "' button"
	
'	Checking if 'Edit Screen' window disappears
	funCheckElementDisappearance welEdtScrWinSI, "'Edit Screen'"
	
'	Waiting for the loading image to disappear
	funWaitForLoadImgToDispr welLoadIconSI
	
'	Getting the field values after update
	For iLoop = 0 to UBound(arrFldsEdtScrSI)
	
	'	Getting the data from table
		arrValNew(iLoop) = funGetDataFromTblInAdmin(wtblDataScrSI, wtblHdrScrSI, arrFldsEdtScrSI(iLoop), 2)
		
	'	Checking if the fields are edited or not based on the button clicked in 'Edit Screen' window after performing editing
		If sButtonName = arrElmntsEdtScrSI(6) Then
		
		'	Checking if 'Active' field value needs to be checked
			If arrFldsEdtScrSI(iLoop) = "Active" Then
				If arrVal(iLoop) = "ON" Then
					arrVal(iLoop) = "Yes"
				Else
					arrVal(iLoop) = "No"
				End If
			End If
			
		'	Checking if fields are edited properly as 'Save' button is clicked
			If Trim(arrValNew(iLoop)) = Trim(arrVal(iLoop)) Then
				funHTMLResult "Pass", "Check editing for '" & arrFldsEdtScrSI(iLoop) & "' field", "Successfully edited '" & arrFldsEdtScrSI(iLoop) & "' field. Expected Value : '" & arrVal(iLoop) & "' & Actual Value : '" & arrValNew(iLoop) & "'"
			Else
				funHTMLResult "Fail", "Check editing for '" & arrFldsEdtScrSI(iLoop) & "' field", "Failed as '" & arrFldsEdtScrSI(iLoop) & "' field is not edited properly. Expected Value : '" & arrVal(iLoop) & "' & Actual Value : '" & arrValNew(iLoop) & "'"
			End If
		Else	
		'	Checking if fields are not updated as 'Cancel' button is clicked
			If Trim(arrValNew(iLoop)) = Trim(arrValOld(iLoop)) Then
				funHTMLResult "Pass", "Check editing for '" & arrFldsEdtScrSI(iLoop) & "' field", "Successfully checked that '" & arrFldsEdtScrSI(iLoop) & "' field is not edited. Expected Value : '" & arrValOld(iLoop) & "' & Actual Value : '" & arrValNew(iLoop) & "'"
			Else
				funHTMLResult "Fail", "Check editing for '" & arrFldsEdtScrSI(iLoop) & "' field", "Failed as '" & arrFldsEdtScrSI(iLoop) & "' field is edited. Expected Value : '" & arrValOld(iLoop) & "' & Actual Value : '" & arrValNew(iLoop) & "'"
			End If	
		End If
	Next
	
'	Setting the Code of the added/edited record
	If sButtonName = arrElmntsEdtScrSI(6) Then
		sCode = funEditScreenInSecItem
	Else
		sCode = sColValueAct
	End If

'	Deleting the added/edited record after checking the functionality
	funCheckDelInSecItem arrTabsInSI(1), arrDelDlgBtnsSI(0), sCode	
End Function


'*******************************************************************************************************************
'  Function Name	   	:   funChkAddFuncSI
'  Function Description :   Function for checking the 'Add Functionality' functionality in 'Security Items' screen
'  Function Parameters  :	None
'  Date Created      	:   15th May, 2017
'  Author               :  	Karan Mehta
'  Last modified  on    :  	
'*******************************************************************************************************************
Public Function funChkAddFuncSI()
	
Dim iLoop 'Reference variable for iteration	
Dim welElement 'Reference variable for fields object	
Dim sTabName 'Reference variable for selecting the tab in 'Security Items' screen
	
'	Setting the tab to be selected in 'Security Items' screen
	sTabName = arrTabsInSI(2)

'	Adding details in 'Add New Functionality' window and click 'Cancel' button
	funAddFuncInSecItem	arrElmntsAddFuncSI(6)
	
'	Clicking on 'Add new functionality' link
	funClickObject wlnkAddNewFuncSI, "'Add new functionality' link"
	
'	Checking the existence of 'Add New Functionality' window
	bFlag = funObjectIsPresent(welAddFuncWinSI, "'Add New Functionality' window", 25)
	If bFlag = False Then
		ExitTest
	End If
	
'	Loop for checking the existence of elements in the 'Add New Screen' window	
	For iLoop = 0 To UBound(arrElmntsAddFuncSI)
		
	'	Setting the object of the element to be checked
		Set welElement = funGetFieldObjSrchItem(arrWinNameSI(4), arrElmntsAddFuncSI(iLoop))
				
	'	Checking the existence of required element
		bFlag = funObjectIsPresent(welElement, "'" & arrElmntsAddFuncSI(iLoop) & "' " & sText, 15)
		
	'	Checking the fields to enter the values
		Select Case arrElmntsAddFuncSI(iLoop)
			Case "Code", "Name", "Description"
			
			'	Entering the value in the respective field
				Select Case arrElmntsAddFuncSI(iLoop)
				
					Case "Code", "Name"
						funGetUniqueDataForSI arrWinNameSI(4), arrElmntsAddFuncSI(iLoop)
					Case "Description"
						
					'	Getting the random Description
						sValue = GetRandomString("A", 10, "U")
						
					'	Entering the value in the field
						funSetValueInEditBox welElement, "'" & arrElmntsAddFuncSI(iLoop) & "' field", sValue
					Case "Screen"
						funSelectFromList welElement, "'" & arrElmntsAddFuncSI(iLoop) & "' field", sValue
				End Select
				
			'	Checking if 'Save' button is enabled/disabled?
				Wait(2)
				iValue = funFetchROProperty(wbtnSaveAddFuncSI, "'Save' button", "disabled")
				If iValue = 1 Then
					funHTMLResult "Pass", "Check if 'Save' button is disabled", "Successfully checked that 'Save' button is disabled if data is entered only for '" & arrElmntsAddFuncSI(iLoop) & "' field."
				Else
					funHTMLResult "Fail", "Check if 'Save' button is disabled", "Failed as 'Save' button is enabled if data is entered only for '" & arrElmntsAddFuncSI(iLoop) & "' field."
				End If
				
			'	Setting the field back to blank
				funSetValueInEditBox welElement, "'" & arrElmntsAddFuncSI(iLoop) & "' field", ""
		End Select
	Next
	
'	Clicking on the 'Cancel' button
	funClickObject wbtnCnclAddFuncSI, "'Cancel' button in 'Add New Screen' window"
	
'	Adding a new functionality
	sCode = funAddFuncInSecItem(arrElmntsAddFuncSI(5))
	
'	Deleting the newly added functionality record
	funCheckDelInSecItem sTabName, arrDelDlgBtnsSI(0), sCode
End Function


'*******************************************************************************************************************
'  Function Name	   	:   funAddFuncInSecItem
'  Function Description :   Function for adding a functionality in 'Security Items' screen
'  Function Parameters  :	sButtonName = Button to be clicked in 'Add New Functionality' window 
'  Date Created      	:   23th Jan, 2017
'  Author               :  	Karan Mehta
'  Last modified  on    :  	
'*******************************************************************************************************************
Public Function funAddFuncInSecItem(ByVal sButtonName)
	
Dim bSheetExist 'Reference variable for checking the sheet existence in TestData file
ReDim arrVal(UBound(arrFldsAddFuncSI)) 'Array for storing the values for the fields

'	Checking the existence of TestData sheet
	CheckSheetExistence sTDFileSI, sFuncSISheet, bSheetExist
	If bSheetExist = False Then
		funHTMLResult "Fail", "Check Sheet Existence", "Failed as Sheet: '" & sFuncSISheet & "' does not exists in file placed at path: " & sTDFileSI & "'"
		ExitTest
	End If

'	Adding the sheet in the DataTable
	DataTable.AddSheet sFuncSISheet
	
'	Loading the Test Data sheet in the DataTable
	DataTable.ImportSheet sTDFileSI, sFuncSISheet, sFuncSISheet
	DataTable.GetSheet(sFuncSISheet).SetCurrentRow 1
	
'	Selecting the 'Functionality' tab
	funSelectTabInSecItem arrTabsInSI(2)

'	Getting the total records in the table
	iTblRecCntBef = funGetTotlRecInTable(welPgsPgtnSI, wtblDataFuncSI)
	
'	Clicking on 'Add new functionality' link
	funClickObject wlnkAddNewFuncSI, "'Add new functionality' link"
	
'	Checking the existence of 'Add New Functionality' window
	bFlag = funObjectIsPresent(welAddFuncWinSI, "'Add New Functionality' window", 25)
	If bFlag = False Then
		ExitTest
	End If
	
'	Loop for entering the value in the fields
	For iLoop = 0 To UBound(arrFldsAddFuncSI)
	
		Select Case arrFldsAddFuncSI(iLoop)
		
			Case "Code", "Name"
			
			'	Entering the unique data for fields in 'Add New Module' window
				arrVal(iLoop) = funGetUniqueDataForSI(arrWinNameSI(4), arrFldsAddFuncSI(iLoop))
				
			'	Setting the output of the function as 'Code'
				If arrFldsAddFuncSI(iLoop) = "Code" Then
					funAddFuncInSecItem = arrVal(iLoop)
				End If
			Case Else
			
			'	Getting the test data from the sheet for selected field
				arrVal(iLoop) = DataTable.GetSheet(sFuncSISheet).GetParameter(arrFldsAddFuncSI(iLoop)).Value
			
			'	Performing the operation based on field selected			
				Select Case arrFldsAddFuncSI(iLoop)
					Case "Active"
						funSetCheckBox wcbxActiveAddFuncSI, "'" & arrFldsAddFuncSI(iLoop) & "' checkbox", arrVal(iLoop)
					Case "Description"
						funSetValueInEditBox wedtDescAddFuncSI, "'" & arrFldsAddFuncSI(iLoop) & "' field", arrVal(iLoop)
					Case "Screen"
						funSelectFromList wlnkScrAddFuncSI, "'" & arrFldsAddFuncSI(iLoop) & "' list", arrVal(iLoop)
				End Select
		End Select	
	Next
	
'	Setting the object for the button to be clicked
	If sButtonName = arrElmntsAddFuncSI(6) Then
		Set wbtnBtn = wbtnCnclAddFuncSI
	Else
		Set wbtnBtn = wbtnSaveAddFuncSI
	End If
	
'	Clicking on the button
	funClickObject wbtnBtn, "'" & sButtonName & "' button"
	
'	Checking if 'Add New Functionality' window disappears
	funCheckElementDisappearance welAddFuncWinSI, "'Add New Functionality' window"
	
'	Waiting for the loading image to disappear
	funWaitForLoadImgToDispr welLoadIconSI
	
'	Getting the total records in the table
	iTblRecCntAftr = funGetTotlRecInTable(welPgsPgtnSI, wtblDataFuncSI)

'	Checking if record gets added or not?
	If sButtonName = arrElmntsAddFuncSI(6) Then
		If iTblRecCntAftr = iTblRecCntBef Then
			funHTMLResult "Pass", "Check record addition", "Successfully checked that record is not added in the table as '" & sButtonName & "' button is clicked in 'Add New Functionality' window. Expected Count : " & iTblRecCntBef & " & Actual Count : " & iTblRecCntAftr
		Else
			funHTMLResult "Fail", "Check record addition", "Failed as record gets added in the table on clicking '" & sButtonName & "' button in 'Add New Functionality' window. Expected Count : " & iTblRecCntBef & " & Actual Count : " & iTblRecCntAftr
		End If
	Else
		If iTblRecCntAftr = iTblRecCntBef + 1 Then
			funHTMLResult "Pass", "Check record addition", "Successfully checked that record is added in the table as '" & sButtonName & "' button is clicked in 'Add New Functionality' window. Expected Count : " & iTblRecCntBef & " & Actual Count : " & iTblRecCntAftr
		Else
			funHTMLResult "Fail", "Check record addition", "Failed to add a record in the table on clicking '" & sButtonName & "' button in 'Add New Functionality' window. Expected Count : " & iTblRecCntBef & " & Actual Count : " & iTblRecCntAftr
			ExitTest
		End If
	End If
End Function


'*******************************************************************************************************************
'  Function Name	   	:   funEditFuncInSecItem
'  Function Description :   Function for editing a functionality record in 'Security Items' screen
'  Function Parameters  :	sButtonName = Button to be clicked in 'Edit Functionality' window 
'  Date Created      	:   24th Jan, 2017
'  Author               :  	Karan Mehta
'  Last modified  on    :  	
'*******************************************************************************************************************
Public Function funEditFuncInSecItem(ByVal sButtonName)

Dim iLoop 'Reference variable for iteration
Dim bSheetExist 'Reference variable for checking the sheet existence in TestData file
ReDim arrVal(UBound(arrFldsEdtFuncSI)) 'Array for storing the values used in editing the fields
ReDim arrValOld(UBound(arrFldsEdtFuncSI)) 'Array for storing the field values before performing the editing
ReDim arrValNew(UBound(arrFldsEdtFuncSI)) 'Array for storing the field values after performing the editing

'	Adding a new 'Functionality' record
	sColValueExp = funAddFuncInSecItem(arrElmntsAddFuncSI(5))
	
'	Sorting the records in 'Descending' order for required column
	funSortTblCols wtblHdrFuncSI, arrFuncSITblCols(1), arrSortType(1)
	
'	Getting the column value for first record
	sColValueAct = funGetDataFromTblInAdmin(wtblDataFuncSI, wtblHdrFuncSI, arrFuncSITblCols(2), 2)
		
'	Checking if the latest added record appear on top as records are sorted by Descending order for 'ID' column
	If Trim(sColValueExp) = Trim(sColValueAct) Then
		funHTMLResult "Pass", "Check if added record appear on top", "Successfully checked that newly added record appear on top if records are sorted by '" & arrSortType(1) & "' order for 'Code' column. Expected Value : "  & sColValueExp & " & Actual Value : " & sColValueAct
	Else
		funHTMLResult "Fail", "Check if added record appear on top", "Failed as newly added record doesn't appear on top if records are sorted by '" & arrSortType(1) & "' order for 'Code' column. Expected Value : "  & sColValueExp & " & Actual Value : " & sColValueAct
		ExitTest
	End If
	
'	Getting the field values before update for selected record
	For iLoop = 0 to UBound(arrFldsEdtFuncSI)
	
	'	Getting the data from table
		arrValOld(iLoop) = funGetDataFromTblInAdmin(wtblDataFuncSI, wtblHdrFuncSI, arrFuncSITblCols(iLoop+2), 2)
	Next
	
'	Clicking on the 'Edit' icon for the first record
	funClickObject welEdtFstFuncFuncSI, "'Edit' icon for the first record"
	
'	Checking the existence of 'Edit Functionality' window
	bFlag = funObjectIsPresent(welEdtFuncWinSI, "'Edit Functionality' window", 25)
	If bFlag = False Then
		ExitTest
	End If
	
'	Setting the current row in the TestData sheet
	DataTable.GetSheet(sFuncSISheet).SetCurrentRow 2
	
'	Loop for entering the value in the fields
	For iLoop = 0 To UBound(arrFldsEdtFuncSI)
	
		Select Case arrFldsEdtFuncSI(iLoop)
		
			Case "Code", "Name"
			
			'	Entering the unique data for fields in 'Edit Functionality' window
				arrVal(iLoop) = funGetUniqueDataForSI(arrWinNameSI(5), arrFldsEdtFuncSI(iLoop))
				
			'	Setting the output of the function as 'Code'
				If arrFldsEdtFuncSI(iLoop) = "Code" Then
					funEditFuncInSecItem = arrVal(iLoop)
				End If
			Case Else
			
			'	Getting the test data from the sheet for selected field
				arrVal(iLoop) = DataTable.GetSheet(sFuncSISheet).GetParameter(arrFldsEdtFuncSI(iLoop)).Value
			
			'	Performing the editing operation based on field selected			
				Select Case arrFldsEdtFuncSI(iLoop)
					Case "Description"
						funSetValueInEditBox wedtDescEdtFuncSI, "'" & arrFldsEdtFuncSI(iLoop) & "' field", arrVal(iLoop)	
					Case "Screen"
						funSelectFromList wlnkScrEdtFuncSI,"'" & arrFldsEdtFuncSI(iLoop) & "' list", arrVal(iLoop)
					Case "Active"
						funSetCheckBox wcbxActiveEdtFuncSI, "'" & arrFldsEdtFuncSI(iLoop) & "' checkbox", arrVal(iLoop)
				End Select
		End Select	
	Next
	
'	Setting the object for the button to be clicked
	If sButtonName = arrElmntsEdtFuncSI(6) Then
		Set wbtnBtn = wbtnCnclEdtFuncSI
	Else
		Set wbtnBtn = wbtnSaveEdtFuncSI
	End If
	
'	Clicking on the button
	funClickObject wbtnBtn, "'" & sButtonName & "' button"
	
'	Checking if 'Edit Functionality' window disappears
	funCheckElementDisappearance welEdtFuncWinSI, "'Edit Functionality'"
	
'	Waiting for the loading image to disappear
	funWaitForLoadImgToDispr welLoadIconSI
	
'	Getting the field values after update
	For iLoop = 0 to UBound(arrFldsEdtFuncSI)
	
	'	Getting the data from table
		arrValNew(iLoop) = funGetDataFromTblInAdmin(wtblDataFuncSI, wtblHdrFuncSI, arrFuncSITblCols(iLoop+2), 2)
		
	'	Checking if the fields are edited or not based on the button clicked in 'Edit Functionality' window after performing editing
		If sButtonName = arrElmntsEdtFuncSI(5) Then
		
		'	Checking if 'Active' field value needs to be checked
			If arrFldsEdtFuncSI(iLoop) = "Active" Then
				If arrVal(iLoop) = "ON" Then
					arrVal(iLoop) = "Yes"
				Else
					arrVal(iLoop) = "No"
				End If
			End If
			
		'	Checking if fields are edited properly as 'Save' button is clicked
			If Trim(arrValNew(iLoop)) = Trim(arrVal(iLoop)) Then
				funHTMLResult "Pass", "Check editing for '" & arrFldsEdtFuncSI(iLoop) & "' field", "Successfully edited '" & arrFldsEdtFuncSI(iLoop) & "' field. Expected Value : '" & arrVal(iLoop) & "' & Actual Value : '" & arrValNew(iLoop) & "'"
			Else
				funHTMLResult "Fail", "Check editing for '" & arrFldsEdtFuncSI(iLoop) & "' field", "Failed as '" & arrFldsEdtFuncSI(iLoop) & "' field is not edited properly. Expected Value : '" & arrVal(iLoop) & "' & Actual Value : '" & arrValNew(iLoop) & "'"
			End If
		Else	
		'	Checking if fields are not updated as 'Cancel' button is clicked
			If Trim(arrValNew(iLoop)) = Trim(arrValOld(iLoop)) Then
				funHTMLResult "Pass", "Check editing for '" & arrFldsEdtFuncSI(iLoop) & "' field", "Successfully checked that '" & arrFldsEdtFuncSI(iLoop) & "' field is not edited. Expected Value : '" & arrValOld(iLoop) & "' & Actual Value : '" & arrValNew(iLoop) & "'"
			Else
				funHTMLResult "Fail", "Check editing for '" & arrFldsEdtFuncSI(iLoop) & "' field", "Failed as '" & arrFldsEdtFuncSI(iLoop) & "' field is edited. Expected Value : '" & arrValOld(iLoop) & "' & Actual Value : '" & arrValNew(iLoop) & "'"
			End If	
		End If
	Next
	
'	Setting the Code of the added/edited record
	If sButtonName = arrElmntsEdtFuncSI(5) Then
		sCode = funEditFuncInSecItem
	Else
		sCode = sColValueAct
	End If

'	Deleting the added/edited record after checking the functionality
	funCheckDelInSecItem arrTabsInSI(2), arrDelDlgBtnsSI(0), sCode
End Function


'*******************************************************************************************************************
'  Function Name	   	:   funGetFieldObjSrchItem
'  Function Description :   Function for getting the object of fields in 'Security Items' screen
'  Function Parameters  :	sButtonName = Button to be clicked in 'Edit Functionality' window 
'  Date Created      	:   24th Jan, 2017
'  Author               :  	Karan Mehta
'  Last modified  on    :  	
'*******************************************************************************************************************
Public Function funGetFieldObjSrchItem(ByVal sScrName, ByVal sFieldName)
	
	Select Case sScrName
		
		Case arrWinNameSI(0)
			Select Case sFieldName
				Case "Code"
					Set welElement = wedtCodeAddModSI
				Case "Name"
					Set welElement = wedtNameAddModSI
				Case "Description"
					Set welElement = wedtDescAddModSI
				Case "Active"
					Set welElement = wcbxActiveAddModSI
				Case "Save"
					Set welElement = wbtnSaveAddModSI
				Case "Cancel"
					Set welElement = wbtnCnclAddModSI
			End Select
		Case arrWinNameSI(1)
			Select Case sFieldName
				Case "Code"
					Set welElement = wedtCodeEdtModSI
				Case "Name"
					Set welElement = wedtNameEdtModSI
				Case "Description"
					Set welElement = wedtDescEdtModSI
				Case "Active"
					Set welElement = wcbxActiveEdtModSI
				Case "Save"
					Set welElement = wbtnSaveEdtModSI
				Case "Cancel"
					Set welElement = wbtnCnclEdtModSI
			End Select
		Case arrWinNameSI(2)
			Select Case sFieldName
				Case "Code"
					Set welElement = wedtCodeAddScrSI
				Case "Name"
					Set welElement = wedtNameAddScrSI
				Case "Description"
					Set welElement = wedtDescAddScrSI
				Case "Module"
					Set welElement = wlnkModAddScrSI
				Case "URL"
					Set welElement = wedtURLAddScrSI
				Case "Active"
					Set welElement = wcbxActiveAddScrSI
				Case "Save"
					Set welElement = wbtnSaveAddScrSI
				Case "Cancel"
					Set welElement = wbtnCnclAddScrSI
				End Select
		Case arrWinNameSI(3)
			Select Case sFieldName
				Case "Code"
					Set welElement = wedtCodeEdtScrSI
				Case "Name"
					Set welElement = wedtNameEdtScrSI
				Case "Description"
					Set welElement = wedtDescEdtScrSI
				Case "Module"
					Set welElement = wlnkModEdtScrSI
				Case "URL"
					Set welElement = wedtURLEdtScrSI
				Case "Active"
					Set welElement = wcbxActiveEdtScrSI
				Case "Save"
					Set welElement = wbtnSaveEdtScrSI
				Case "Cancel"
					Set welElement = wbtnCnclEdtScrSI
			End Select
		Case arrWinNameSI(4)
			Select Case sFieldName
				Case "Code"
					Set welElement = wedtCodeAddFuncSI
				Case "Name"
					Set welElement = wedtNameAddFuncSI
				Case "Description"
					Set welElement = wedtDescAddFuncSI
				Case "Screen"
					Set welElement = wlnkScrAddFuncSI
				Case "Active"
					Set welElement = wcbxActiveAddFuncSI
				Case "Save"
					Set welElement = wbtnSaveAddFuncSI
				Case "Cancel"
					Set welElement = wbtnCnclAddFuncSI
			End Select
		Case arrWinNameSI(5)
			Select Case sFieldName
				Case "Code"
					Set welElement = wedtCodeEdtFuncSI
				Case "Name"
					Set welElement = wedtNameEdtFuncSI
				Case "Description"
					Set welElement = wedtDescEdtFuncSI
				Case "Screen"
					Set welElement = wlnkScrEdtFuncSI
				Case "Active"
					Set welElement = wcbxActiveEdtFuncSI
				Case "Save"
					Set welElement = wbtnSaveEdtFuncSI
				Case "Cancel"
					Set welElement = wbtnCnclEdtFuncSI
			End Select
		Case arrWinNameSI(6)
			Select Case sFieldName
				Case "Name"
					Set welElement = wedNameAddMenuSI
				Case "Description"
					Set welElement = wedDescAddMenuSI
				Case "Screen (optional)"
					Set welElement = wlnkScrAddMenuSI
				Case "Parent"
					Set welElement = wlnkParntAddMenuSI
				Case "Order"
					Set welElement = wedOrdrAddMenuSI
				Case "Active"
					Set welElement = wcbxActiveAddMenuSI
				Case "Save"
					Set welElement = wbtnSaveAddMenuSI
				Case "Cancel"
					Set welElement = wbtnCnclAddMenuSI
			End Select
		Case arrWinNameSI(7)
			Select Case sFieldName
				Case "Name"
					Set welElement = wedNameEdtMenuSI
				Case "Description"
					Set welElement = wedDescEdtMenuSI
				Case "Screen (optional)"
					Set welElement = wlnkScrEdtMenuSI
				Case "Parent"
					Set welElement = wlnkParntEdtMenuSI
				Case "Order"
					Set welElement = wedOrdrEdtMenuSI
				Case "Active"
					Set welElement = wcbxActiveEdtMenuSI
				Case "Save"
					Set welElement = wbtnSaveEdtMenuSI
				Case "Cancel"
					Set welElement = wbtnCnclEdtMenuSI
			End Select
	End Select
	
'	Setting the object as output of the function
	Set funGetFieldObjSrchItem = welElement
End Function


'*******************************************************************************************************************
'  Function Name	   	:   funChkAddMenuFuncSI
'  Function Description :   Function for checking the 'Add Menu' functionality in 'Security Items' screen
'  Function Parameters  :	None
'  Date Created      	:   15th May, 2017
'  Author               :  	Karan Mehta
'  Last modified  on    :  	
'*******************************************************************************************************************
Public Function funChkAddMenuFuncSI()
	
Dim iLoop 'Reference variable for iteration	
Dim welElement 'Reference variable for fields object	
Dim sParent, sName 'Reference variables for getting the name and parent of newly added Menu record

'	Adding details in 'Add New Menu' window and click 'Cancel' button
	funAddMenuInSecItem	arrElmntsAddMenuSI(7)
	
'	Clicking on 'Add new menu' link
	funClickObject wlnkAddNewMenuSI, "'Add new menu' link"
	
'	Checking the existence of 'Add New Menu' window
	bFlag = funObjectIsPresent(welAddMenuWinSI, "'Add New Menu' window", 25)
	If bFlag = False Then
		ExitTest
	End If
	
'	Loop for checking the existence of elements in the 'Add New Menu' window	
	For iLoop = 0 To UBound(arrElmntsAddMenuSI)
		
	'	Setting the object of the element in 'Add New Menu' window
		Set welElement = funGetFieldObjSrchItem(arrWinNameSI(6), arrElmntsAddMenuSI(iLoop))
		
	'	Setting the text for field type
		Select Case arrElmntsAddMenuSI(iLoop)
			Case "Active"
				sText = "checkbox"
			Case "Save", "Cancel"
				sText = "button"
			Case Else
				sText = "field"
		End Select
		
	'	Checking the existence of required element
		bFlag = funObjectIsPresent(welElement, "'" & arrElmntsAddMenuSI(iLoop) & "' " & sText, 15)
	Next
	
'	Loop for entering the value in the field and checking if 'Save' button is disabled?
	For iLoop = 0 To UBound(arrFldsAddMenuSI)
	
	'	Setting the object of the element in 'Add New Menu' window
		Set welElement = funGetFieldObjSrchItem(arrWinNameSI(6), arrFldsAddMenuSI(iLoop))	
		
	'	Setting the object of the field and entering the data
		Select Case arrFldsAddMenuSI(iLoop)
			Case "Name"
				sValue = funGetUniqueDataForSI(arrWinNameSI(6), arrFldsAddMenuSI(iLoop))
			Case "Description"
				sValue = GetRandomString("A", 7, "U")
				funSetValueInEditBox welElement, "'" & arrFldsAddMenuSI(iLoop) & "' field", sValue
		End Select
		
	'	Checking if 'Name' or 'Description' field is selected?
		If arrFldsAddMenuSI(iLoop) = "Name" OR arrFldsAddMenuSI(iLoop) = "Description" Then
			
		'	Checking if Save button is enabled/disabled?
			wait(2)
			iValue = funFetchROProperty(wbtnSaveAddMenuSI, "'Save' button", "disabled")
			If iValue = 1 Then
				funHTMLResult "Pass", "Check if 'Save' button is disabled", "Successfully checked that 'Save' button is disabled if data is entered only for '" & arrFldsAddMenuSI(iLoop) & "' field."
			Else
				funHTMLResult "Fail", "Check if 'Save' button is disabled", "Failed as 'Save' button is enabled if data is entered only for '" & arrFldsAddMenuSI(iLoop) & "' field."
			End If
		
		'	Setting the field back to blank
			funSetValueInEditBox welElement, "'" & arrFldsAddMenuSI(iLoop) & "' field", ""
		End If
	Next
	
'	Clicking on the 'Cancel' button
	funClickObject wbtnCnclAddMenuSI, "'Cancel' button"
	
'	Checking if 'Add New Menu' window disappears
	funCheckElementDisappearance welAddMenuWinSI, "'Add New Menu' window"
	
'	Adding details in 'Add New Menu' window and click 'Save' button
	sName = funAddMenuInSecItem(arrElmntsAddMenuSI(6))
	
'	Getting the 'Parent' of newly added record
	sParent = DataTable.GetSheet(sMenuSISheet).GetParameter("Parent").Value
	
'	Loop for checking the existence of added record under 'Menu'
	For iLoop = 1 To 2
	
	'	Checking if added record needs to be made 'Inactive'
		If iLoop = 2 Then
		
		'	Clicking on the 'Edit' icon for first record
			funClickObject welEdtFstMenuMenuSI, "'Edit Menu' icon for first record"
			
		'	Checking the existence of 'Edit Menu' window
			bFlag = funObjectIsPresent(welEdtMenuWinSI, "'Edit Menu' window", 20)
			If bFlag = False Then
				ExitTest
			End If
			
		'	Unchecking the 'Active' checkbox
			funSetCheckBox wcbxActiveEdtMenuSI, "'Active' checkbox", "OFF"
		
		'	Saving the changes made to the record and waiting till window disappears		
			funClickObject wbtnSaveEdtMenuSI, "'Save' button"
			funCheckElementDisappearance  welEdtMenuWinSI, "'Edit Menu' window"
		End If	
		
	'	Redirecting to 'Home Page'
		funClickObject welHomePgSI, "'Home Page' shortcut"
		bFlag = funObjectIsPresent(objLoginPage, "Home Page", 60)
		If bFlag Then
			Wait(3)
		Else
			ExitTest
		End If
		
	'	Opening 'Security Items' screen
		funSelectMenuItem objLoginPage, sSecItemLink
		
	'	Selecting 'Menus' tab
		funSelectTabInSecItem arrTabsInSI(3)
	
	'	Filtering the record
		funSetFilterInAdmin wedtFltrSI, wbtnFltrSI, sName
		
	'	Sorting the record in 'ASCENDING' order of 'Name' column
		funSortTblCols wtblHdrMenuSI, arrMenuSITblCols(3), arrSortType(0)

	'	Getting the 'Name' of first record in table
		sNameFstRecTbl = funGetDataFromTblInAdmin(wtblDataMenuSI, wtblHdrMenuSI, arrMenuSITblCols(3), 2)

	'	Checking if the required record appears on the top
		If Trim(sNameFstRecTbl) = Trim(sName) Then
			funHTMLResult "Pass", "Check if record appears on top when sorted by " & arrMenuSITblCols(3) & "column", "Successfully checked that record appears on top. Expected Value : " & sName & " & Actual Value : " & sNameFstRecTbl
		Else
			funHTMLResult "Fail", "Check if record appears on top when sorted by " & arrMenuSITblCols(3) & "column", "Failed as record appears on top. Expected Value : " & sName & " & Actual Value : " & sNameFstRecTbl
			ExitTest
		End If
			
	'	Checking the existence/non-existence of menu
		If iLoop = 1 Then
			
		'	Checking the existence of added record under the menu
			funCheckLinkExistenceInMenu sParent & "->" & sName, wpgSecItem
		Else
		'	Checking that added record should not be displayed under the menu
			Set wlnkMenu = wpgSecItem.Link("xpath:=//ul/li/a[text()='" & sParent & "']/../ul/li/a[normalize-space(text())='" & sName & "']")
			funObjectIsNotPresent wlnkMenu, "menu item under " & sParent & "->" & sName & " hierarchy"
		End If
	Next
	
'	Removing the text in the filter section
	funClearFltrInAdmin wedtFltrSI, wbtnFltrSI
	
'	Deleting the newly added Menu
	funCheckDelInSecItem arrTabsInSI(3), arrDelDlgBtnsSI(0), sName
End Function


'*******************************************************************************************************************
'  Function Name	   	:   funAddMenuInSecItem
'  Function Description :   Function for adding a Menu record in 'Security Items' screen
'  Function Parameters  :	sButtonName = Button to be clicked in 'Add New Menu' window 
'  Date Created      	:   25th Jan, 2017
'  Author               :  	Karan Mehta
'  Last modified  on    :  	
'*******************************************************************************************************************
Public Function funAddMenuInSecItem(ByVal sButtonName)
	
Dim bSheetExist 'Reference variable for checking the sheet existence in TestData file
ReDim arrVal(UBound(arrFldsAddMenuSI)) 'Array for storing the values for the fields

'	Checking the existence of TestData sheet
	CheckSheetExistence sTDFileSI, sMenuSISheet, bSheetExist
	If bSheetExist = False Then
		funHTMLResult "Fail", "Check Sheet Existence", "Failed as Sheet: '" & sMenuSISheet & "' does not exists in file placed at path: " & sTDFileSI & "'"
		ExitTest
	End If

'	Adding the sheet in the DataTable
	DataTable.AddSheet sMenuSISheet
	
'	Loading the Test Data sheet in the DataTable
	DataTable.ImportSheet sTDFileSI, sMenuSISheet, sMenuSISheet
	DataTable.GetSheet(sMenuSISheet).SetCurrentRow 1
	
'	Selecting the 'Menus' tab
	funSelectTabInSecItem arrTabsInSI(3)

'	Getting the total records in the table
	iTblRecCntBef = funGetTotlRecInTable(welPgsPgtnSI, wtblDataMenuSI)
	
'	Clicking on 'Add new menu' link
	funClickObject wlnkAddNewMenuSI, "'Add new menu' link"
	
'	Checking the existence of 'Add New Menu' window
	bFlag = funObjectIsPresent(welAddMenuWinSI, "'Add New Menu' window", 25)
	If bFlag = False Then
		ExitTest
	End If
	
'	Loop for entering the value in the fields
	For iLoop = 0 To UBound(arrFldsAddMenuSI)
	
		Select Case arrFldsAddMenuSI(iLoop)
		
			Case "Name"
			
			'	Entering the unique data for fields in 'Add New Menu' window
				arrVal(iLoop) = funGetUniqueDataForSI(arrWinNameSI(6), arrFldsAddMenuSI(iLoop))
				
			'	Setting the output of the function as 'Name'
				If arrFldsAddMenuSI(iLoop) = "Name" Then
					funAddMenuInSecItem = arrVal(iLoop)
				End If
			Case Else
			
			'	Setting the column name in the sheet for which data needs to be captured
				If arrFldsAddMenuSI(iLoop) = "Screen (optional)" Then
					sColName = "Screen"
				Else
					sColName = arrFldsAddMenuSI(iLoop)
				End If
				
			'	Getting the test data from the sheet for selected field
				arrVal(iLoop) = DataTable.GetSheet(sMenuSISheet).GetParameter(sColName).Value
			
			'	Performing the operation based on field selected			
				Select Case arrFldsAddMenuSI(iLoop)
					Case "Active"
						funSetCheckBox wcbxActiveAddMenuSI, "'" & arrFldsAddMenuSI(iLoop) & "' checkbox", arrVal(iLoop)
					Case "Description", "Order"
						Set wedtElement = funGetFieldObjSrchItem(arrWinNameSI(6), arrFldsAddMenuSI(iLoop))
						funSetValueInEditBox wedtElement, "'" & arrFldsAddMenuSI(iLoop) & "' field", arrVal(iLoop)
					Case "Screen (optional)", "Parent"
						Set wblElement = funGetFieldObjSrchItem(arrWinNameSI(6), arrFldsAddMenuSI(iLoop))
						funSelectFromList wblElement, "'" & arrFldsAddMenuSI(iLoop) & "' list", arrVal(iLoop)
				End Select
		End Select	
	Next
	
'	Setting the object for the button to be clicked
	If sButtonName = arrElmntsAddMenuSI(7) Then
		Set wbtnBtn = wbtnCnclAddMenuSI
	Else
		Set wbtnBtn = wbtnSaveAddMenuSI
	End If
	
'	Clicking on the button
	funClickObject wbtnBtn, "'" & sButtonName & "' button"
	
'	Checking if 'Add New Menu' window disappears
	funCheckElementDisappearance welAddMenuWinSI, "'Add New Menu' window"
	
'	Waiting for the loading image to disappear
	funWaitForLoadImgToDispr welLoadIconSI
	
'	Getting the total records in the table
	iTblRecCntAftr = funGetTotlRecInTable(welPgsPgtnSI, wtblDataMenuSI)

'	Checking if record gets added or not?
	If sButtonName = arrElmntsAddMenuSI(7) Then
		If iTblRecCntAftr = iTblRecCntBef Then
			funHTMLResult "Pass", "Check record addition", "Successfully checked that record is not added in the table as '" & sButtonName & "' button is clicked in 'Add New Menu' window. Expected Count : " & iTblRecCntBef & " & Actual Count : " & iTblRecCntAftr
		Else
			funHTMLResult "Fail", "Check record addition", "Failed as record gets added in the table on clicking '" & sButtonName & "' button in 'Add New Menu' window. Expected Count : " & iTblRecCntBef & " & Actual Count : " & iTblRecCntAftr
		End If
	Else
		If iTblRecCntAftr = iTblRecCntBef + 1 Then
			funHTMLResult "Pass", "Check record addition", "Successfully checked that record is added in the table as '" & sButtonName & "' button is clicked in 'Add New Menu' window. Expected Count : " & iTblRecCntBef & " & Actual Count : " & iTblRecCntAftr
		Else
			funHTMLResult "Fail", "Check record addition", "Failed to add a record in the table on clicking '" & sButtonName & "' button in 'Add New Menu' window. Expected Count : " & iTblRecCntBef & " & Actual Count : " & iTblRecCntAftr
			ExitTest
		End If
	End If
End Function


'*******************************************************************************************************************
'  Function Name	   	:   funEditMenuInSecItem
'  Function Description :   Function for editing a Menu record in 'Security Items' screen
'  Function Parameters  :	sButtonName = Button to be clicked in 'Edit Menu' window 
'  Date Created      	:   27th Jan, 2017
'  Author               :  	Karan Mehta
'  Last modified  on    :  	
'*******************************************************************************************************************
Public Function funEditMenuInSecItem(ByVal sButtonName)

Dim iLoop 'Reference variable for iteration
Dim bSheetExist 'Reference variable for checking the sheet existence in TestData file
ReDim arrVal(UBound(arrFldsEdtMenuSI)) 'Array for storing the values used in editing the fields
ReDim arrValOld(UBound(arrFldsEdtMenuSI)) 'Array for storing the field values before performing the editing
ReDim arrValNew(UBound(arrFldsEdtMenuSI)) 'Array for storing the field values after performing the editing

'	Adding a new 'Menu' record
	sColValueExp = funAddMenuInSecItem(arrElmntsAddMenuSI(6))
	
'	Sorting the records in 'Descending' order for required column
	funSortTblCols wtblHdrMenuSI, arrMenuSITblCols(1), arrSortType(1)
	
'	Getting the column value for first record
	sColValueAct = funGetDataFromTblInAdmin(wtblDataMenuSI, wtblHdrMenuSI, arrMenuSITblCols(3), 2)
		
'	Checking if the latest added record appear on top as records are sorted by Descending order for 'ID' column
	If Trim(sColValueExp) = Trim(sColValueAct) Then
		funHTMLResult "Pass", "Check if added record appear on top", "Successfully checked that newly added record appear on top if records are sorted by '" & arrSortType(1) & "' order for 'ID' column. Expected Value : "  & sColValueExp & " & Actual Value : " & sColValueAct
	Else
		funHTMLResult "Fail", "Check if added record appear on top", "Failed as newly added record doesn't appear on top if records are sorted by '" & arrSortType(1) & "' order for 'ID' column. Expected Value : "  & sColValueExp & " & Actual Value : " & sColValueAct
		ExitTest
	End If
	
'	Getting the field values before update for selected record
	For iLoop = 0 to UBound(arrFldsEdtMenuSI)
	
	'	Setting the column name
		If arrFldsEdtMenuSI(iLoop) = "Screen (optional)" Then
			sTblColName = "Screen"
		Else
			sTblColName = arrFldsEdtMenuSI(iLoop)
		End If
	
	'	Getting the data from table
		arrValOld(iLoop) = funGetDataFromTblInAdmin(wtblDataMenuSI, wtblHdrMenuSI, sTblColName, 2)
	Next
	
'	Clicking on the 'Edit' icon for the first record
	funClickObject welEdtFstMenuMenuSI, "'Edit' icon for the first record"
	
'	Checking the existence of 'Edit Menu' window
	bFlag = funObjectIsPresent(welEdtMenuWinSI, "'Edit Menu' window", 25)
	If bFlag = False Then
		ExitTest
	End If
	
'	Setting the current row in the TestData sheet
	DataTable.GetSheet(sMenuSISheet).SetCurrentRow 2
	
'	Loop for entering the value in the fields
	For iLoop = 0 To UBound(arrFldsEdtMenuSI)
	
		Select Case arrFldsEdtMenuSI(iLoop)
		
			Case "Name"
			
			'	Entering the unique data for fields in 'Edit Menu' window
				arrVal(iLoop) = funGetUniqueDataForSI(arrWinNameSI(7), arrFldsEdtMenuSI(iLoop))
				
			'	Setting the output of the function as 'Name'
				funEditMenuInSecItem = arrVal(iLoop)
			Case Else
			
			'	Setting the column name in the sheet for which data needs to be captured
				If arrFldsAddMenuSI(iLoop) = "Screen (optional)" Then
					sColName = "Screen"
				Else
					sColName = arrFldsEdtMenuSI(iLoop)
				End If
			
			'	Getting the test data from the sheet for selected field
				arrVal(iLoop) = DataTable.GetSheet(sMenuSISheet).GetParameter(sColName).Value
			
			'	Performing the editing operation based on field selected			
				Select Case arrFldsEdtMenuSI(iLoop)
					Case "Description", "Order"
						Set wedtElement = funGetFieldObjSrchItem(arrWinNameSI(7), arrFldsEdtMenuSI(iLoop))
						funSetValueInEditBox wedtElement, "'" & arrFldsEdtMenuSI(iLoop) & "' field", arrVal(iLoop)	
					Case "Screen (optional)", "Parent"
						Set wblElement = funGetFieldObjSrchItem(arrWinNameSI(7), arrFldsEdtMenuSI(iLoop))
						funSelectFromList wblElement,"'" & arrFldsEdtMenuSI(iLoop) & "' list", arrVal(iLoop)
					Case "Active"
						funSetCheckBox wcbxActiveEdtMenuSI, "'" & arrFldsEdtMenuSI(iLoop) & "' checkbox", arrVal(iLoop)
				End Select
		End Select	
	Next
	
'	Setting the object for the button to be clicked
	If sButtonName = arrElmntsEdtMenuSI(7) Then
		Set wbtnBtn = wbtnCnclEdtMenuSI
	Else
		Set wbtnBtn = wbtnSaveEdtMenuSI
	End If
	
'	Clicking on the button
	funClickObject wbtnBtn, "'" & sButtonName & "' button"
	
'	Checking if 'Edit Menu' window disappears
	funCheckElementDisappearance welEdtMenuWinSI, "'Edit Menu'"
	
'	Waiting for the loading image to disappear
	funWaitForLoadImgToDispr welLoadIconSI
	
'	Getting the field values after update
	For iLoop = 0 to UBound(arrFldsEdtMenuSI)
	
	'	Setting the column name in the table
		If arrFldsEdtMenuSI(iLoop) = "Screen (optional)" Then
			sTblColName = "Screen"
		Else
			sTblColName = arrFldsEdtMenuSI(iLoop)
		End If
	
	'	Getting the data from table
		arrValNew(iLoop) = funGetDataFromTblInAdmin(wtblDataMenuSI, wtblHdrMenuSI, sTblColName, 2)
		
	'	Checking if the fields are edited or not based on the button clicked in 'Edit Menu' window after performing editing
		If sButtonName = arrElmntsEdtMenuSI(6) Then
		
		'	Checking if 'Active' field value needs to be checked
			If arrFldsEdtMenuSI(iLoop) = "Active" Then
				If arrVal(iLoop) = "ON" Then
					arrVal(iLoop) = "Yes"
				Else
					arrVal(iLoop) = "No"
				End If
			End If
			
		'	Checking if fields are edited properly as 'Save' button is clicked
			If Trim(arrValNew(iLoop)) = Trim(arrVal(iLoop)) Then
				funHTMLResult "Pass", "Check editing for '" & arrFldsEdtMenuSI(iLoop) & "' field", "Successfully edited '" & arrFldsEdtMenuSI(iLoop) & "' field. Expected Value : '" & arrVal(iLoop) & "' & Actual Value : '" & arrValNew(iLoop) & "'"
			Else
				funHTMLResult "Fail", "Check editing for '" & arrFldsEdtMenuSI(iLoop) & "' field", "Failed as '" & arrFldsEdtMenuSI(iLoop) & "' field is not edited properly. Expected Value : '" & arrVal(iLoop) & "' & Actual Value : '" & arrValNew(iLoop) & "'"
			End If
		Else	
		'	Checking if fields are not updated as 'Cancel' button is clicked
			If Trim(arrValNew(iLoop)) = Trim(arrValOld(iLoop)) Then
				funHTMLResult "Pass", "Check editing for '" & arrFldsEdtMenuSI(iLoop) & "' field", "Successfully checked that '" & arrFldsEdtMenuSI(iLoop) & "' field is not edited. Expected Value : '" & arrValOld(iLoop) & "' & Actual Value : '" & arrValNew(iLoop) & "'"
			Else
				funHTMLResult "Fail", "Check editing for '" & arrFldsEdtMenuSI(iLoop) & "' field", "Failed as '" & arrFldsEdtMenuSI(iLoop) & "' field is edited. Expected Value : '" & arrValOld(iLoop) & "' & Actual Value : '" & arrValNew(iLoop) & "'"
			End If	
		End If
	Next
	
'	Setting the Name of the added/edited record
	If sButtonName = arrElmntsEdtMenuSI(6) Then
		sName = funEditMenuInSecItem
	Else
		sName = sColValueAct
	End If

'	Deleting the added/edited record after checking the functionality
	funCheckDelInSecItem arrTabsInSI(3), arrDelDlgBtnsSI(0), sName
End Function


'*******************************************************************************************************************
'  Function Name	   	:   funClickCntrlrMapIconSI
'  Function Description :   Function for clicking the 'Controllor Mapping' icon of first record in 'Security Items' screen
'  Function Parameters  :	sButtonName = Button to be clicked in 'Edit Menu' window 
'  Date Created      	:   1st Feb, 2017
'  Author               :  	Karan Mehta
'  Last modified  on    :  	
'*******************************************************************************************************************
Public Function funClickCntrlrMapIconSI(ByVal welElement)
	
'	Clicking on the Controller Mapping icon
	funClickObject welElement, "'Controller Mapping' icon"
	
'	Waiting for the loading image to disappear
	funWaitForLoadImgToDispr welLoadIconSI
	
'	Checking the existence of 'Controller Mapping' table
	bFlag = funObjectIsPresent(wtblDataCntrlrMapSI, "'Controller Mapping' table", 15)
	If bFlag Then
		funHTMLResult "Pass", "Check 'Controller Mapping' screen", "Successfully opened 'Controller Mapping' screen"
	Else
		funHTMLResult "Fail", "Check 'Controller Mapping' screen", "Failed to open 'Controller Mapping' screen"
		ExitTest
	End If
End Function


'*******************************************************************************************************************
'  Function Name	   	:   funClickBckToCntrlrLst
'  Function Description :   Function for clicking the 'Back to Controller list' button in 'Controller Mapping' section of 'Security Items' screen
'  Function Parameters  :	sButtonName = Button to be clicked in 'Edit Menu' window 
'  Date Created      	:   1st Feb, 2017
'  Author               :  	Karan Mehta
'  Last modified  on    :  	
'*******************************************************************************************************************
Public Function funClickBckToCntrlrLst()
	
'	Clicking on 'Back to controllers list' button
	funClickObject wlnkBckToCLCntrlMapSI, "'Back to controllers list' button"
		
'	Waiting for the loading image to disappear
	funWaitForLoadImgToDispr welLoadIconSI
	
'	Checking if 'Controllers list' is getting displayed?
	funObjectIsPresent wtblDataCntrlrSI, "table in 'Controllers' section", 15
End Function


'*******************************************************************************************************************
'  Function Name	   	:   funSelRecPerPageInSecItem
'  Function Description :   Function for setting the 'Records Per Page' list in 'Administration' screens
'  Function Parameters  :	sTabName = Screen Name, sValue = Value to be selected in the list 
'  Date Created      	:   7th Feb, 2017
'  Author               :  	Karan Mehta
'  Last modified  on    :  	
'*******************************************************************************************************************
Public Function funSelRecPerPageInAdmin(ByVal sScrName, sValue)

	Select Case sScrName
		Case arrTabsInSI(0)
			Set wblRecPerPg = wlnkRecPerPgModSI
		Case arrTabsInSI(1)
			Set wblRecPerPg = wlnkRecPerPgScrSI
		Case arrTabsInSI(2)
			Set wblRecPerPg = wlnkRecPerPgFuncSI
		Case arrTabsInSI(3)
			Set wblRecPerPg = wlnkRecPerPgMenuSI
		Case arrTabsInSI(4)
			Set wblRecPerPg = wlnkRecPerPgCntrlrSI
		Case sCntrlrMapScr
			Set wblRecPerPg = wlnkRecPerPgCntrlrMapSI
		Case sSysCodeScr
			Set wblRecPerPg = wlnkRecPerPgSC
		Case sClntGrpScr
			Set wblRecPerPg = wlnkRecPerPgCG
		Case sGrpMainScr
			Set wblRecPerPg = wlstRecPerPgGM
		Case sAppLogScr
			Set wblRecPerPg = wlstRecPerPgSRAL
		Case sUsrMainScr
		'	Getting the name of selected tab in 'User Maintenance' screen
			sSelTab = funFetchROProperty(wlnkSelTabInUM, "selected tab", "innertext")
			sSelTab = Trim(sSelTab)
			
		'	Setting the object for 'Record Per Page' dropdown based on selected tab
			If sSelTab = arrTabsInUsrMain(0) Then
				Set wblRecPerPg = wlnkRecPerPgActUsrUM
			Else
				Set wblRecPerPg = wlnkRecPerPgInactUsrUM
			End If	
	End Select
	
'	Setting	the value in the list and waiting for the loading icon to disappear
	funSelectFromList wblRecPerPg, "Records Per Page", sValue
	
'	Checking if 'Application Log' screen is selected or not
	If sScrName = sAppLogScr Then
	
	'	Wait for loading to disappear		
		funWaitForLoadImgToDispr welLoadIconAL
	Else
	'	Waiting for the content to change and page to load as per the selection in 'Record Per Page' dropdown
		Wait(5)	
	End If
End Function


'*******************************************************************************************************************
'  Function Name	   	:   funCheckSortInAdmin
'  Function Description :   Function for checking the sorting functionality in Administration screens
'  Function Parameters  :	sModule = Module where functionality is to be tested 
'							where sorting functionality needs to be checked
'  Date Created      	:   7th Feb, 2017
'  Author               :  	Karan Mehta
'  Last modified  on    :  	
'*******************************************************************************************************************
Public Function funCheckSortInAdmin(ByVal sModule)	

Dim iLoop, iLoop1, iLoop2 'Reference variables for iteration
Dim iMaxStringLen 'Reference variable for getting the string length of the longest data string 

iMaxStringLen = 0 'Initializing the variable for getting the length of the largest string from the available data

'	Setting the objects
	Select Case sModule
		Case arrTabsInSI(0)
			arrSortColsTbl = arrModSITblColsSort
			arrSortColsTyp = arrModSITblColsTypSort
			Set wtblHdrTbl = wtblHdrModSI
			Set wtblDataTbl = wtblDataModSI
			Set wblRecPerPg = wlnkRecPerPgModSI
		Case arrTabsInSI(1)
			arrSortColsTbl = arrScrSITblColsSort
			arrSortColsTyp = arrScrSITblColsTypSort
			Set wtblHdrTbl = wtblHdrScrSI
			Set wtblDataTbl = wtblDataScrSI
			Set wblRecPerPg = wlnkRecPerPgScrSI
		Case arrTabsInSI(2)
			arrSortColsTbl = arrFuncSITblColsSort
			arrSortColsTyp = arrFuncSITblColsTypSort
			Set wtblHdrTbl = wtblHdrFuncSI
			Set wtblDataTbl = wtblDataFuncSI
			Set wblRecPerPg = wlnkRecPerPgFuncSI
		Case arrTabsInSI(3)
			arrSortColsTbl = arrMenuSITblColsSort
			arrSortColsTyp = arrMenuSITblColsTypSort
			Set wtblHdrTbl = wtblHdrMenuSI
			Set wtblDataTbl = wtblDataMenuSI
			Set wblRecPerPg = wlnkRecPerPgMenuSI
		Case arrTabsInSI(4)
			arrSortColsTbl = arrCntrlrSITblColsSort
			arrSortColsTyp = arrCntrlrSITblColsTypSort
			Set wtblHdrTbl = wtblHdrCntrlrSI
			Set wtblDataTbl = wtblDataCntrlrSI
			Set wblRecPerPg = wlnkRecPerPgCntrlrSI
		Case sCntrlrMapScr
			arrSortColsTbl = arrCntrlrMapTblColsSort
			arrSortColsTyp = arrCntrlrMapTblColsTypSort
			Set wtblHdrTbl = wtblHdrCntrlrMapSI
			Set wtblDataTbl = wtblDataCntrlrMapSI
			Set wblRecPerPg = wlnkRecPerPgCntrlrMapSI
		Case sSysCodeScr
			arrSortColsTbl = arrTblColsSortCT
			arrSortColsTyp = arrTblColsSortTypCT
			Set wtblHdrTbl = wtblHdrCT
			Set wtblDataTbl = wtblDataCT
			Set wblRecPerPg = wlnkRecPerPgSC
		Case sClntGrpScr
			arrSortColsTbl = arrTblColsSortCG
			arrSortColsTyp = arrTblColsSortTypCG
			Set wtblHdrTbl = wtblHdrCG
			Set wtblDataTbl = wtblDataCG
			Set wblRecPerPg = wlnkRecPerPgCG
		Case sUsrMainScr
		'	Getting the name of selected tab in 'User Maintenance' screen
			sSelTab = funFetchROProperty(wlnkSelTabInUM, "default tab", "innertext")
			sSelTab = Trim(sSelTab)
			
		'	Setting the objects based on selected tab
			If sSelTab = arrTabsInUsrMain(0) Then
				arrSortColsTbl = arrTblColsSortActUsrUM
				arrSortColsTyp = arrTblColsSortTypActUsrUM
				Set wtblHdrTbl = wtblHdrActUsrUM
				Set wtblDataTbl = wtblDataActUsrUM
				Set wblRecPerPg = wlnkRecPerPgActUsrUM
			Else
				arrSortColsTbl = arrTblColsSortInactUsrUM
				arrSortColsTyp = arrTblColsSortTypInactUsrUM
				Set wtblHdrTbl = wtblHdrInactUsrUM
				Set wtblDataTbl = wtblDataInactUsrUM
				Set wblRecPerPg = wlnkRecPerPgInactUsrUM
			End If
		Case sGrpMainScr
		'	Getting the opened screen name
			sScrName = funFetchROProperty(welScrNameGM, "'Screen Name'", "innertext")
			
		'	Checking if 'Group Maintenance' screen is opened	
			If Trim(sScrName) = sGrpMainScr Then
				arrSortColsTbl = arrSortColsTblGM	
				arrSortColsTyp = arrSortColsTypTblGM
				Set wtblHdrTbl = wtblHdrGM
				Set wtblDataTbl = wtblDataGM
			Else										'Access Rights screen is opened
				arrSortColsTbl = arrSortColsTblRtGM
				arrSortColsTyp = arrSortColsTypTblRtGM
				Set wtblHdrTbl = wtblHdrRtGM
				Set wtblDataTbl = wtblDataRtGM
			End If
		
		'	Setting the object for 'Records Per Page' dropdown
			Set wblRecPerPg = wlstRecPerPgGM
		Case sAppLogScr
			arrSortColsTbl = arrSortColsSRTblAL	
			arrSortColsTyp = arrSortColsTypSRTblAL	
			Set wtblHdrTbl = wtblSRHdrAL
			Set wtblDataTbl = wtblSRDataAL
	End Select
	
'	Getting the count of records on which sorting is performed 
	iTblRecCount = funGetTblPgRecCount(wtblDataTbl)
	
'	Checking if required records are not available to check the sorting functionality
	If iTblRecCount < 2 Then
		funHTMLResult "Done", "Check Sorting functionality", "Could not check the sorting functionality as only " & iTblRecCount & " records exist in table."
		Exit Function
	End If
	
	ReDim arrData(iTblRecCount-1) 'Array for getting the data from Table
	ReDim arrDataNew(iTblRecCount-1) 'Array for storing the data on the basis of which sorting functionality is checked
	
'	Getting the UBound of array containing the Column labels and Sorting Type
	iColCount = UBound(arrSortColsTbl)
	iSortCount = UBound(arrSortType)

'	Loop for selecting all the columns on which sorting functionality needs to be checked
	For iLoop = 0 To iColCount
	
	'	Getting the column on which sorting operation needs to be checked and the type of data it contains
		sColName = arrSortColsTbl(iLoop)
		sColDataTyp = arrSortColsTyp(iLoop)
		
	'	Loop for checking the sorting functionality
		For iLoop1 = 0 To iSortCount
		
		'	Sorting the selected column in the table
			funSortTblCols wtblHdrTbl, arrSortColsTbl(iLoop), arrSortType(iLoop1)
		
		'	Loop for going through each row to get the values from the table for the selected column
			For iLoop2 = 0 To (iTblRecCount-1)
			
			'	Getting the data from the table for the selected cell
				arrData(iLoop2) = funGetDataFromTblInAdmin(wtblDataTbl, wtblHdrTbl, sColName, iLoop2+2)
				
			'	Setting the string to lower case if data is present as sorting functionality is case independent
				If Trim(Len(arrData(iLoop2))) > 0 Then
					arrData(iLoop2) = LCase(arrData(iLoop2))
				End If
				
			'	Getting the length of the string
				iMaxStringLenNew = Len(arrData(iLoop2))
			
			'	Getting the length of the longest string from the available data for the selected column
				If iMaxStringLenNew > iMaxStringLen Then
					iMaxStringLen = iMaxStringLenNew
				End If					
			Next
			
		'	Checking if the selected data is of column having type as 'Numeric'
			If sColDataTyp = "Num" Then
					
			'	Loop for going through every set of data for the selected column
				For iLoop2 = 0 to (iTblRecCount-1)
					
				'	Getting the length of the selected data	
					iDataLen = Len(arrData(iLoop2))
					
				'	Loop for appending '0' to the left of the data so that the length of data for all records will become equal
					For iLoop3 = 1 to (iMaxStringLen-iDataLen)
						arrData(iLoop2) = "0" & arrData(iLoop2)
					Next
				Next
			End If
		
		'	Loop for iterating till max. string length is achieved. 
		'	Checking the sorting functionality with subset of string and if not able to check, incrementing the string size
			For iLoop2 = 1 To iMaxStringLen
			
			'	Loop for iterating through the available data from the table for checking the sorting functionality
				For iLoop3 = 0 To (iTblRecCount-1)
				
				'	Setting the substring to be considered for checking the sorting functionality
					If Len(arrData(iLoop3)) < iLoop2 Then
						arrDataNew(iLoop3) = arrData(iLoop3)
					Else
						arrDataNew(iLoop3) = Left(arrData(iLoop3), iLoop2)
					End If
				Next	
			
			'	Converted the string for checking the sorting functionality to binary
				arrDataInBinary = funChangingStringToBinary(arrDataNew)
				
			'	Checking the sorting functionality for records based on their binary values
				sSortingFlag = funCheckBooleanSorting(arrDataInBinary, arrSortType(iLoop1), "Text")	
				If (sSortingFlag = "True") OR (sSortingFlag = "Unknown" AND iLoop2 = iMaxStringLen) Then
					funHTMLResult "Pass", "Check " & arrSortType(iLoop1) & " sorting functionality for Column : " & sColName, "Successfully checked the " & arrSortType(iLoop1) & " sorting functionality for Column : " & sColName
				ElseIf sSortingFlag = "False" Then
					funHTMLResult "Fail", "Check " & arrSortType(iLoop1) & " sorting functionality for Column : " & sColName, "Failed as " & arrSortType(iLoop1) & " sorting functionality for Column : " & sColName & " is not working properly."
					Exit For
				End If
			Next	
		Next
	Next
End Function


'*******************************************************************************************************************
'  Function Name	   	:   funGetTblPgRecCount
'  Function Description :   Function for getting the count of records available in the table
'  Function Parameters  :	wtblTable = Object for table to get the record count in selected page
'  Date Created      	:   8th Feb, 2017
'  Author               :  	Karan Mehta
'  Last modified  on    :  	
'*******************************************************************************************************************
Public Function funGetTblPgRecCount(ByVal wtblTable)

'	Setting the object for text if no record exists in table
	Set welNoRecInTbl = wtblTable.WebElement("xpath:=//td[normalize-space(text())='No data available.']")

'	Checking if no record exists in the table
	bFlag = funCheckElementExistence(welNoRecInTbl, 3)
	If bFlag Then
	
	'	Setting the record count as zero
		iRecCount = 0
	Else
	'	Getting the count of records in the table
		iRecCount = funFetchROProperty(wtblTable, "records in table", "rows")
		iRecCount = cLng(iRecCount) - 2
	End If

'	Setting the count of records as output of function
	funGetTblPgRecCount = iRecCount
End Function


'*******************************************************************************************************************
'  Function Name	   	:   funChkRecPerPgFunc
'  Function Description :   Function for checking the 'Record Per Page' functionality in 'Administration' screens
'  Function Parameters  :	sScrName = Screen Name
'  Date Created      	:   8th Feb, 2017
'  Author               :  	Karan Mehta
'  Last modified  on    :  	
'*******************************************************************************************************************
Public Function funChkRecPerPgFunc(ByVal sScrName)

Dim iRecPrPgOptnCnt 'Reference variable for getting the count of options under "Record Per Page" dropdown to check the functionality

	Select Case sScrName
		Case arrTabsInSI(0), arrTabsInSI(1), arrTabsInSI(2), arrTabsInSI(3), arrTabsInSI(4), sCntrlrMapScr
			arrRecPerPg = arrRecPerPgSI
			Set welRecPgtn = welPgsPgtnSI
			Set welLstPgPgtn = welLstPgPgtnSI
		Case sSysCodeScr
			arrRecPerPg = arrRecPerPgSC
			Set welRecPgtn = welPgsPgtnSC
			Set welLstPgPgtn = welLstPgPgtnSC
			Set wtblTable = wtblDataCT
		Case sUsrMainScr
			arrRecPerPg = arrRecPerPgUM
			Set welRecPgtn = welPgsPgtnUM
			Set welLstPgPgtn = welLstPgPgtnUM
			
		'	Getting the name of selected tab in 'User Maintenance' screen
			sSelTab = funFetchROProperty(wlnkSelTabInUM, "default tab", "innertext")
			sSelTab = Trim(sSelTab)
			
		'	Setting the table object based on selected tab
			If sSelTab = arrTabsInUsrMain(0) Then
				Set wtblTable = wtblDataActUsrUM
			Else
				Set wtblTable = wtblDataInactUsrUM
			End If	
		Case sClntGrpScr
			arrRecPerPg = arrRecPerPgCG
			Set welRecPgtn = welPgsPgtnCG
			Set welLstPgPgtn = welLstPgPgtnCG
			Set wtblTable = wtblDataCG
		Case sGrpMainScr
			arrRecPerPg = arrRecPerPgGM
			Set welRecPgtn = welPgsPgtnGM
			Set welLstPgPgtn = welLstPgPgtnGM
			
		'	Getting the opened section name
			sSecName = funFetchROProperty(welScrNameGM, "'Section Name'", "innertext")
			
		'	Checking if 'Group Maintenance' screen is opened	
			If Trim(sSecName) = sGrpMainScr Then
				Set wtblTable = wtblDataGM
			Else
				Set wtblTable = wtblDataRtGM
			End If
		Case sAppLogScr
			arrRecPerPg = arrRecPerPgSRAL
			Set welRecPgtn = welPgsPgtnSRAL
			Set welLstPgPgtn = welLstPgPgtnSRAL
			Set wtblTable = wtblSRDataAL
	End Select
	
	Select Case sScrName
		Case arrTabsInSI(0)
			Set wtblTable = wtblDataModSI	
		Case arrTabsInSI(1)
			Set wtblTable = wtblDataScrSI
		Case arrTabsInSI(2)
			Set wtblTable = wtblDataFuncSI
		Case arrTabsInSI(3)
			Set wtblTable = wtblDataMenuSI
		Case arrTabsInSI(4)
			Set wtblTable = wtblDataCntrlrSI
		Case sCntrlrMapScr
			Set wtblTable = wtblDataCntrlrMapSI	
	End Select
	
'	Setting the count of options under "Record Per Page" dropdown to check the functionality
	Select Case sScrName
		Case sAppLogScr
			iRecPrPgOptnCnt = UBound(arrRecPerPg)
		Case Else
			iRecPrPgOptnCnt = UBound(arrRecPerPg)-1
	End Select
	
'	Getting the count of total records in table
	iTblRecCount = funGetTotlRecInTable(welRecPgtn, wtblTable)
	
'	Loop for checking the 'Records Per Page' functionality
	For iLoop = 0 To iRecPrPgOptnCnt
	
	'	Setting the value selected in the 'Records Per Page' dropdown
		iRecPerPg = cLng(arrRecPerPg(iLoop))
	
	'	Checking if the records exists
		If iTblRecCount > iRecPerPg Then
		
		'	Setting the 'Records Per Page' dropdown
			funSelRecPerPageInAdmin sScrName, arrRecPerPg(iLoop)
		
		'	Getting the expected last page in Pagination
			sLastPgExp = GetPageCount(iTblRecCount, iRecPerPg)
			
		'	Getting the actual value of last page in Pagination
			sLastPgAct = funFetchROProperty(welLstPgPgtn, "Last page in Pagination", "innertext")
			
		'	Checking if 'Records Per Page' selection is correct?
			If Trim(sLastPgExp) = Trim(sLastPgAct) Then
				funHTMLResult "Pass", "Check 'Records Per Page' functionality by selecting '" & iRecPerPg & "' in list" , "Successfully checked the functionality. Expected Pages: " & sLastPgExp & " & Actual Pages: " &  sLastPgAct
			Else
				funHTMLResult "Fail", "Check 'Records Per Page' functionality by selecting '" & iRecPerPg & "' in list" , "Failed as functionality is not proper. Expected Pages: " & sLastPgExp & " & Actual Pages: " &  sLastPgAct
			End If
		Else
			funHTMLResult "Done", "Check 'Records Per Page' functionality by selecting '" & iRecPerPg & "' in list", "Could not check the functionality as only '" & iTblRecCount & "' records exist in table."
			Exit Function
		End If
	Next
End Function


'*******************************************************************************************************************
'  Function Name	   	:   funChkPgntnFunc
'  Function Description :   Function for checking the Pagination functionality in 'Administration' screens
'  Function Parameters  :	sScrName = Screen Name
'  Date Created      	:   8th Feb, 2017
'  Author               :  	Karan Mehta
'  Last modified  on    :  	
'*******************************************************************************************************************
Public Function funChkPgntnFunc(ByVal sScrName)

	Select Case sScrName
		Case arrTabsInSI(0), arrTabsInSI(1), arrTabsInSI(2), arrTabsInSI(3)
			arrRecPerPg = arrRecPerPgSI
			Set welPgtn = welPgtnSI
			Set welRecPgtn = welPgsPgtnSI
			Set welLstPgPgtn = welLstPgPgtnSI
			Set welFstPgPgtn = welFstPgPgtnSI
			Set welFwdPgtn = welFwdPgtnSI
			Set welCurrPgPgtn = welCurrPgPgtnSI
			Set welBckPgtn = welBckPgtnSI
		Case sGrpMainScr
			arrRecPerPg = arrRecPerPgGM
			Set welPgtn = welPgtnGM
			Set welRecPgtn = welPgsPgtnGM
			Set welLstPgPgtn = welLstPgPgtnGM
			Set welFstPgPgtn = welFstPgPgtnGM
			Set welFwdPgtn = welFwdPgtnGM
			Set welCurrPgPgtn = welCurrPgPgtnGM
			Set welBckPgtn = welBckPgtnGM
	End Select

	Select Case sScrName
		Case arrTabsInSI(0)
			Set wtblTable = wtblDataModSI
		Case arrTabsInSI(1)
			Set wtblTable = wtblDataScrSI
		Case arrTabsInSI(2)
			Set wtblTable = wtblDataFuncSI
		Case arrTabsInSI(3)
			Set wtblTable = wtblDataMenuSI
		Case sGrpMainScr
		
		'	Getting the opened section name
			sSecName = funFetchROProperty(welScrNameGM, "'Section Name'", "innertext")
			
		'	Checking if 'Group Maintenance' screen is opened	
			If Trim(sSecName) = sGrpMainScr Then
				Set wtblTable = wtblDataGM
			Else
				Set wtblTable = wtblDataRtGM
			End If
	End Select
	
'	Setting the 'Records Per Page' dropdown to '5'
	funSelRecPerPageInAdmin sScrName, arrRecPerPg(0)
	
'	Getting the count of records in the table
	iTblRecCount = funGetTotlRecInTable(welRecPgtn, wtblTable)
	
'	Checking if Pagination exists
	bFlag = funCheckElementExistence(welPgtn, 5)
	If bFlag Then
		
	'	Getting the count of records displayed for a page in table
		iPgRecCountBef = funGetTblPgRecCount(wtblTable)
		
	'	Selecting the last page in pagination
		funClickObject welLstPgPgtn, "last page in pagination"
		Wait(2)
		
	'	Selecting the first page in pagination
		funClickObject welFstPgPgtn, "first page in pagination"
		Wait(2)
		
	'	Getting the count of records in the page
		iPgRecCountAft = funGetTblPgRecCount(wtblTable)
		
	'	Checking if the table record count remains same
		If iPgRecCountAft = iPgRecCountBef Then
			funHTMLResult "Pass", "Check record count after changing pages in table", "Successfully checked that record count remains same. Expected Count: " & iPgRecCountBef & " & Actual Count: " & iPgRecCountAft
		Else
			funHTMLResult "Fail", "Check record count after changing pages in table", "Failed as record count remains got changed. Expected Count: " & iPgRecCountBef & " & Actual Count: " & iPgRecCountAft
		End If
	
	'	Clicking on the forward button
		funClickObject welFwdPgtn, "'Forward' button in pagination"
		Wait(2)
		
	'	Getting the current page in pagination
		sCurrPage = funFetchROProperty(welCurrPgPgtn, "'Current' page in pagination", "innertext")
		
	'	Checking if next page is selected?
		If cInt(Trim(sCurrPage)) = 2 Then
			funHTMLResult "Pass", "Check 'Forward' button functionality in pagination", "Successfully checked the functionality of 'Forward' button. Expected Page: 2" & " & Actual Page: " &  sCurrPage
		Else
			funHTMLResult "Fail", "Check 'Forward' button functionality in pagination", "Failed as clicking 'Forward' button doesn't take user to next page. Expected Page: 2" & " & Actual Page: " &  sCurrPage
		End If
		
	'	Clicking on the back button
		funClickObject welBckPgtn, "'Back' button in pagination"
		Wait(2)
		
	'	Getting the current page in pagination
		sCurrPage = funFetchROProperty(welCurrPgPgtn, "Current page in pagination", "innertext")
		
	'	Checking if previous page is selected?
		If cInt(Trim(sCurrPage)) = 1 Then
			funHTMLResult "Pass", "Check back button functionality in pagination", "Successfully checked the functionality of 'Back' button. Expected Page: 1" & " & Actual Page: " &  sCurrPage
		Else
			funHTMLResult "Fail", "Check back button functionality in pagination", "Failed as clicking 'Back' button doesn't take user to previous page. Expected Page: 1" & " & Actual Page: " &  sCurrPage
		End If
	Else
		funHTMLResult "Done", "Check record count after changing pages in table", "Could not check the functionality as pagination does not exists. Table Record Count: " & iTblRecCount & " & Records Per Page: " & arrRecPerPgSI(0)	 
	End If	
End Function


'*******************************************************************************************************************
'  Function Name	   	:   funChkFltrFuncInCntrlrSI
'  Function Description :   Function for checking the Filter functionality in 'Controllers' section of 'Security Items' screen
'  Function Parameters  :	sScrName = Screen Name
'  Date Created      	:   14th Feb, 2017
'  Author               :  	Karan Mehta
'  Last modified  on    :  	
'*******************************************************************************************************************
Public Function funChkFltrFuncInCntrlrSI(ByVal sScrName)

Dim iLoop, iLoop1 'Reference variables for iteration
Dim iColIndexTbl 'Reference variable for getting the index of column in table

	Select Case sScrName
		Case arrTabsInSI(4)
			Set wtblData = wtblDataCntrlrSI
			Set wtblHdr = wtblHdrCntrlrSI
			arrTblColsFltr = arrCntrlrSITblColsFltr
		Case sCntrlrMapScr
			Set wtblData = wtblDataCntrlrMapSI
			Set wtblHdr = wtblHdrCntrlrMapSI
			arrTblColsFltr = arrCntrlrMapTblColsFltr
		Case Else
			funHTMLResult "Fail", "Check filter functionality", "Failed as wrong screen name is passed." 
	End Select
	
'	Setting the 'Records Per Page' dropdown
	funSelRecPerPageInAdmin sScrName, arrRecPerPgSI(1)
	
'	Getting the count of records in the table
	iTblRecCnt = funGetTotlRecInTable(welPgsPgtnSI, wtblData)
	
'	Checking if any record exists?
	If iTblRecCnt = 0 Then
		funHTMLResult "Done", "Check filter functionality", "Could not check the filter functionality as no record exists in table."
		Exit Function
	End If
	
'	Loop for selecting the columns to check filter functionality
	For iLoop = 0 To UBound(arrTblColsFltr)
	
	'	Getting the column name of the table
		sColNameTbl = arrTblColsFltr(iLoop)
	
	'	Getting the value of record for the selected column
		sColStr = funGetDataFromTblInAdmin(wtblData, wtblHdr, sColNameTbl, 2)
		sColStr = Trim(sColStr)
		
	'	Getting the length of the string
		iStrLen = Len(sColStr)
		
	'	Setting the no. of iterations to check filter functionality
		Select Case iStrLen
			Case 0
				iFltrItrn = 0
			Case 1
				iFltrItrn = 1
			Case Else
				iFltrItrn = 2
		End Select
		
	'	Loop for checking the filter functionality	
		For iLoop1 = 1 To iFltrItrn
		
		'	Setting the string to be set in the filter
			If iLoop1 = 1 Then
				sFltrStr = sColStr	
				sText = "complete string"
			Else
				sFltrStr = Trim(Mid(sColStr, 1, RandomNumber(1, iStrLen-1)))
				sText = "partial string"
			End If
			
		'	Setting the string in the filter
			funSetFilterInAdmin wedtFltrSI, wbtnFltrSI, sFltrStr
		
		'	Getting the count of actual filtered records
			iFilterRecCntAct = funGetTblPgRecCount(wtblData)
		
		'	Getting the count of expected filtered records			
			iFilterRecCntExp = funGetFltrRecCntPerPg(sScrName, sColNameTbl, sFltrStr)
			
		'	Checking if filter functionality working fine
			If iFilterRecCntExp = iFilterRecCntAct Then
				funHTMLResult "Pass", "Check filter functionality on column : " & sColNameTbl & " when " & sText & " is used", "Successfully checked that filter is working fine. Expected Count : " & iFilterRecCntExp & " & Actual Count : " & iFilterRecCntAct
			Else
				funHTMLResult "Fail", "Check filter functionality on column : " & sColNameTbl & " when " & sText & " is used", "Failed as filter is not working fine. Expected Count : " & iFilterRecCntExp & " & Actual Count : " & iFilterRecCntAct
			End If		
		Next
	Next
End Function


'*******************************************************************************************************************
'  Function Name	   	:   funGetFltrRecCntPerPg
'  Function Description :   Function for getting the count of filtered records per page
'  Function Parameters  :	sScrName = Screen Name, sColName = Column Name, sFltrText = Text used in Search
'  Date Created      	:   14th Feb, 2017
'  Author               :  	Karan Mehta
'  Last modified  on    :  	
'*******************************************************************************************************************
Public Function funGetFltrRecCntPerPg(ByVal sScrName, ByVal sColName, ByVal sFltrText)
	
	'	Setting the objects
		Select Case sScrName
			Case arrTabsInSI(4)
				Set wtblHdr = wtblHdrCntrlrSI
				Set wtblData = wtblDataCntrlrSI	
			Case sCntrlrMapScr
				Set wtblHdr = wtblHdrCntrlrMapSI
				Set wtblData = wtblDataCntrlrMapSI
			Case sSysCodeScr
				Set wtblHdr = wtblHdrCT
				Set wtblData = wtblDataCT
			Case sUsrMainScr
			
			'	Getting the name of selected tab in 'User Maintenance' screen
				sSelTab = funFetchROProperty(wlnkSelTabInUM, "default tab", "innertext")
				sSelTab = Trim(sSelTab)
				
			'	Setting the objects based on selected tab
				If sSelTab = arrTabsInUsrMain(0) Then
					Set wtblHdr = wtblHdrActUsrUM
					Set wtblData = wtblDataActUsrUM
				Else
					Set wtblHdr = wtblHdrInactUsrUM
					Set wtblData = wtblDataInactUsrUM
				End If	
			Case sClntGrpScr
				Set wtblHdr = wtblHdrCG
				Set wtblData = wtblDataCG
		End Select
	
	'	Getting the expected count of filtered records
		Set objDesc = Description.Create
		objDesc("micClass").Value = "WebElement"
		objDesc("xpath").Value = "//tbody[1]//tr//*[contains(translate(text(), 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'),'" & LCase(sFltrText) & "')]/preceding::tr[1]"
	
	'	Setting the object for the matched elements
		Set objDesc1 = wtblData.ChildObjects(objDesc)
			
	'	Getting the count of records matched
		funGetFltrRecCntPerPg = objDesc1.Count
End Function


'*******************************************************************************************************************
'  Function Name	   	:   funCheckElementsInCntrls
'  Function Description :   Function for checking the existence of elements in Controllers section of Security Items screen
'  Function Parameters  :	NA
'  Date Created      	:   15th Feb, 2017
'  Author               :  	Karan Mehta
'  Last modified  on    :  	
'*******************************************************************************************************************
Public Function funCheckElementsInCntrls()
	
Dim iLoop 'Reference variable for iteration	
	
'	Loop for checking the existence of columns in the table
	For iLoop = 0 To UBound(arrCntrlrTblCols)
	
	'	Setting the object of the column
		Set welElement = wtblHdrCntrlrSI.WebElement("xpath:=//thead/tr[1]/th[text()='" & arrCntrlrTblCols(iLoop) & "']")
		
	'	Checking the existence of the column in the table
		bFlag = funObjectIsPresent(welElement, "'" & arrCntrlrTblCols(iLoop) & "' column in table", 5)
	Next
	
'	Checking the existence of 'Add new controller' button
	funObjectIsPresent wlnkAddNewCntrlrSI, "'Add new controller' button", 5
	
'	Checking the existence of 'Show records per page' list
	funObjectIsPresent wlnkRecPerPgCntrlrSI, "'Select Records Per Page' dropdown", 5
	
'	Checking the existence of 'Search' filter
	funObjectIsPresent wedSrchCntrlrSI, "'Search' field", 5
	
'	Getting the count of records available in table
	iTblRecCount = funGetTotlRecInTable(welPgsPgtnSI, wtblDataCntrlrSI)
	
'	Checking if any record exists?
	If cLng(iTblRecCount) > 0 Then
		
	'	Checking the existence of 'Edit Controller' icon under 'Actions' column
		funObjectIsPresent welFstEdtCntrlrSI, "'Edit Controller' icon", 5
		
	'	Checking the existence of 'Controller Mapping' icon under 'Actions' column
		funObjectIsPresent welFstCntrlrMapSI, "'Edit Controller' icon", 5
	
	'	Checking the existence of 'Delete Controller' icon under 'Actions' column
		funObjectIsPresent welFstDelCntrlrSI, "'Delete Controller' icon", 5
	
	'	Clicking on 'Controller Mapping' icon for first record in table
		funClickCntrlrMapIconSI welFstCntrlrMapSI
	
	'	Loop for checking the existence of columns in table
		For iLoop = 0 To UBound(arrCntrlrMapTblCols)
		
		'	Setting the object for selected column
			Set welElement = wtblHdrCntrlrMapSI.WebElement("xpath:=//thead/tr[1]/th[text()='" & arrCntrlrMapTblCols(iLoop) & "']")
			
		'	Checking if the column exists in table
			funObjectIsPresent welElement, "'" & arrCntrlrMapTblCols(iLoop) & "' column in table", 5	
		Next

	'	Getting the count of records available in table
		iTblRecCount = funGetTotlRecInTable(welPgsPgtnSI, wtblDataCntrlrMapSI)
	
	'	Checking if any record exists?
		If cLng(iTblRecCount) > 0 Then
			
		'	Checking the existence of 'Edit Controller Mapping' icon under 'Actions' column
			funObjectIsPresent welEdtFstCntrlrMapSI, "'Edit Controller Mapping' icon", 5
			
		'	Checking the existence of 'Delete Controller Mapping' icon under 'Actions' column
			funObjectIsPresent welDelFstCntrlrMapSI, "'Delete Controller Mapping' icon", 5
		Else
			funHTMLResult "Done", "Check icons under 'Actions' columns", "Could not check the existence of icons under 'Actions' column as no record exists in table."
		End If
	
	'	Checking the existence of 'Add New Controller Mapping' button
		funObjectIsPresent wlnkAddNewCntrlrMapSI, "'Add New Controller Mapping' button", 5
		
	'	Checking the existence of 'Back to controllers list' button
		funObjectIsPresent wlnkBckToCLCntrlMapSI, "'Back to controllers list' button", 5
		
	'	Checking the existence of 'Show records per page' list
		funObjectIsPresent wlnkRecPerPgCntrlrMapSI, "'Select Records Per Page' dropdown", 5
		
	'	Checking the existence of 'Search' filter
		funObjectIsPresent wedSrchCntrlrMapSI, "'Search' field", 5
	
	'	Clicking on 'Back to controllers list' button
		funClickBckToCntrlrLst()
	Else
		funHTMLResult "Done", "Check icons under 'Actions' columns", "Could not check the existence of icons under 'Actions' column as no record exists in table."
	End If
End Function


'*******************************************************************************************************************
'  Function Name	   	:   funChkDataInCntrlrScr
'  Function Description :   Function for checking the validations of data in Controllers section of 'Security Items' screen
'  Function Parameters  :	NA
'  Date Created      	:   15th Feb, 2017
'  Author               :  	Karan Mehta
'  Last modified  on    :  	
'*******************************************************************************************************************
Public Function funChkDataInCntrlrScr()

Dim bSheetExist 'Reference variable for checking the existence of TestData sheet
Dim iRecCount 'Reference variable for getting the count of records in DataTable
Dim iLoop, iLoop1 'Reference variable for iteration

'	Getting the count of records before performing the operation
	iRecCountBef = funGetTblPgRecCount(wtblDataCntrlrSI)

'	Checking the existence of TestData sheet
	CheckSheetExistence sTDFileSI, sCntrlrSISheet, bSheetExist
	If bSheetExist = False Then
		funHTMLResult "Fail", "Check Sheet Existence", "Failed as Sheet: '" & sCntrlrSISheet & "' does not exists in file placed at path: " & sTDFileSI & "'"
		ExitTest
	End If

'	Adding the sheet in the DataTable
	DataTable.AddSheet sCntrlrSISheet
	
'	Importing the Test Data sheet in the DataTable
	DataTable.ImportSheet sTDFileSI, sCntrlrSISheet, sCntrlrSISheet
	
'	Setting the object for sheet in DataTable
	Set objDTSheet = DataTable.GetSheet(sCntrlrSISheet)
	
'	Checking the data in 'Add' and 'Edit' Controller windows
	For iLoop = 1 To 2
	
	'	Checking if no record exsits for editing
		If iLoop = 2 Then
			
		'	Checking if no record exists
			If iRecCountBef = 0 Then
				Exit For
			Else
			'	Getting the 'Name' after performing operation
				sNameEdtCntrlrBef = funGetDataFromTblInAdmin(wtblDataCntrlrSI, wtblHdrCntrlrSI, arrCntrlrTblCols(2), 2)
			End If
		End If
		
		Select Case iLoop
			Case 1
				Set welElement = wlnkAddNewCntrlrSI
				Set welWindow = welAddCntrlrWinSI
				Set welValMsg = welValMsgNameAddCntrlrSI
				Set wbtnSave = wbtnSaveAddCntrlrWinSI
				Set wbtnCncl = wbtnCnclAddCntrlrWinSI
				Set wedNameCntrlrSI = wedNameAddCntrlrSI
				Set wedDescCntrlrSI = wedDescAddCntrlrSI
				sWinName = arrWinNameSI(8)
				sFieldName = arrFldsAddCntrlrSI(0)
				sText = "Add New Controller"
			Case 2
				Set welElement = welFstEdtCntrlrSI
				Set welWindow = welEdtCntrlrWinSI	
				Set welValMsg = welValMsgNameEdtCntrlrSI
				Set wbtnSave = wbtnSaveEdtCntrlrWinSI
				Set wbtnCncl = wbtnCnclEdtCntrlrWinSI
				Set wedNameCntrlrSI = wedNameEdtCntrlrSI
				Set wedDescCntrlrSI = wedDescEdtCntrlrSI
				sWinName = arrWinNameSI(9)
				sFieldName = arrFldsEdtCntrlrSI(0)
				sText = "Edit Controller"
		End Select
		
	'	Clicking link to open the required window
		funClickObject welElement, sText & " link"
	
	'	Checking the existence of window
		bFlag = funObjectIsPresent(welWindow, "'" & sText & "' window", 20)
		If bFlag = False Then
			ExitTest
		End If
		
	'	Getting the rows from where data needs to be captured in TestData sheet
		sRows = funGetRowsFromDTSheet(objDTSheet, "Window", sText)
		
	'	Checking if TestData avaialble?
		If Len(sRows) = 0 Then
			funHTMLResult "Fail", "Check Test Data existence to check data in '" & sText & "' window", "Failed as no Test Data exists."
			ExitTest
		End If
		
	'	Getting the rows
		arrRows = Split(sRows, ",")
	
	'	Loop for checking the validations
		For iLoop1 = 0 To UBound(arrRows)
		
		'	Selecting the required row in the DataTable
			objDTSheet.SetCurrentRow cInt(arrRows(iLoop1))
			
		'	Checking if 'Name' needs to be entered
			sFlag = objDTSheet.GetParameter("Name_Enter").Value	
			If sFlag = "TRUE" Then
			
			'	Getting the 'Name' from DataTable
				sName = objDTSheet.GetParameter("Name").Value
				
			'	Checking if unique 'Name' is required
				If sName = "GET_DATA" Then	
					sName = funGetUniqueDataForSI(sWinName, sFieldName)
				End If
			Else
				sName = ""
			End If
			
		'	Setting the 'Name' field
			funSetValueInEditBox wedNameCntrlrSI, "'Name' field", sName	
			
		'	Checking if 'Description' needs to be entered?
			sFlag = objDTSheet.GetParameter("Description_Enter").Value
			If sFlag = "TRUE" Then
				
			'	Getting the 'Description' from DataTable	
				sDescription =  objDTSheet.GetParameter("Description").Value
			Else
				sDescription = ""
			End If
			
		'	Setting the 'Description' field
			funSetValueInEditBox wedDescCntrlrSI, "'Description' field", sDescription
		
		'	Checking if text validation needs to be checked
			sFlag = objDTSheet.GetParameter("Validation_Check").Value
			If sFlag = "TRUE" Then
			
			'	Checking the existence of the validation text
				bFlag = funObjectIsPresent(welValMsg, "'Validation message' in '" & sText & "' window", 10)
			End If
			
		'	Checking if 'Save' button validation needs to be checked
			sFlag = objDTSheet.GetParameter("Save_Btn_Val_Chk").Value
			If sFlag = "TRUE" Then
			
			'	Checking if 'Save' button is disabled
				funVerifygetROProperty wbtnSave, "'Save' button", "disabled", 1
			End If	
		Next
		
	'	Clicking on the 'Cancel' button
		funClickObject wbtnCncl, "'Cancel' button"
		
	'	Getting the count of records after performing the operation
		iRecCountAft = funGetTblPgRecCount(wtblDataCntrlrSI)
		
	'	Checking if the record is not added?
		If iLoop = 1 Then
			If iRecCountBef = iRecCountAft Then
				funHTMLResult "Pass", "Check record creation", "Successfully checked that record is not created on clicking 'Cancel' button. Expected Count : " & iRecCountBef & " & Actual Count : " & iRecCountAft 
			Else
				funHTMLResult "Fail", "Check record creation", "Failed as record is created on clicking 'Cancel' button. Expected Count : " & iRecCountBef & " & Actual Count : " & iRecCountAft 
			End If
		Else
		'	Getting the 'Name' after performing operation
			sNameEdtCntrlrAft = funGetDataFromTblInAdmin(wtblDataCntrlrSI, wtblHdrCntrlrSI, arrCntrlrTblCols(2), 2)
			
		'	Checking if record gets edited?	
			If Trim(sNameEdtCntrlrAft) = Trim(sNameEdtCntrlrBef) Then
				funHTMLResult "Pass", "Check record editing", "Successfully checked that record is not edited on clicking 'Cancel' button. Expected Value : " & sNameEdtCntrlrBef & " & Actual Value : " & sNameEdtCntrlrAft 
			Else
				funHTMLResult "Fail", "Check record editing", "Failed as record is edited on clicking 'Cancel' button. Expected Value : " & sNameEdtCntrlrBef & " & Actual Value : " & sNameEdtCntrlrAft
			End If
		End If
	Next
End Function


'*******************************************************************************************************************
'  Function Name	   	:   funGetRowsFromDTSheet
'  Function Description :   Function for getting the index of rows with matching condition from sheet in DataTable
'  Function Parameters  :	objDTSheet = DataTable sheet object, sColName = Column Name, sValue = Condition to match for column
'  Date Created      	:   17th Feb, 2017
'  Author               :  	Karan Mehta
'  Last modified  on    :  	
'*******************************************************************************************************************
Public Function funGetRowsFromDTSheet(ByVal objDTSheet, ByVal sColName, ByVal sValue)

Dim iLoop 'Reference variable for iteration
Dim iRecCount 'Reference variable for getting the count of records in TestData sheet
Dim sRows 'Reference variable for getting the list of rows where condition is matched

'	Getting the count of records in the sheet
	iRecCount = objDTSheet.GetRowCount
	
'	Loop for checking the rows where Test Data is present in sheet
	For iLoop = 1 To iRecCount
	
	'	Selecting the row
		objDTSheet.SetCurrentRow iLoop
		
	'	Getting the value of the cell from TestData sheet
		sDTVal = objDTSheet.GetParameter(sColName).Value
		
	'	Checking if the record is required?
		If sValue = sDTVal Then
			sRows = sRows & iLoop & ","
		End If
	Next
	
'	Removing the extra comma from the last
	If Len(sRows ) > 0 Then
		sRows = Left(sRows, Len(sRows)-1)
	Else
		sRows = ""
	End If
	
'	Setting the output of the function
	funGetRowsFromDTSheet = sRows
End Function


'*******************************************************************************************************************
'  Function Name	   	:   funChkDataInCntrlrMapScr
'  Function Description :   Function for checking the data in 'Controller Mapping' screen
'  Function Parameters  :	None
'  Date Created      	:   17th Feb, 2017
'  Author               :  	Karan Mehta
'  Last modified  on    :  	
'*******************************************************************************************************************
Public Function funChkDataInCntrlrMapScr()

Dim iLoop, iLoop1 'Reference variable for iteration
Dim bSheetExist	'Reference flag for checking the existence of sheet

'	Array containing the columns in the Sheet
	arrColsSheet = Array("Screen", "ScreenDef", "Functionality", "FunctionalityDef")

'	Checking the existence of TestData sheet
	CheckSheetExistence sTDFileSI, sCntrlrMapSISheet, bSheetExist
	If bSheetExist = False Then
		funHTMLResult "Fail", "Check Sheet Existence", "Failed as Sheet: '" & sCntrlrMapSISheet & "' does not exists in file placed at path: " & sTDFileSI & "'"
		ExitTest
	End If
	
'	Adding the sheet and importing the TestData sheet in DataTable
	DataTable.AddSheet sCntrlrMapSISheet
	DataTable.ImportSheet sTDFileSI, sCntrlrMapSISheet, sCntrlrMapSISheet
	Set objDTSheet = DataTable.GetSheet(sCntrlrMapSISheet)
	
'	Getting the count of records before performing the operation
	iRecCount = funGetTblPgRecCount(wtblDataCntrlrSI)
	If iRecCount = 0 Then
		funHTMLResult "Done", "Check data validations in 'Controller Mapping' section", "Could not proceed further as no record exists in 'Controllers' screen"
		Exit Function
	End If
	
'	Clicking on 'Controller Mapping' icon for first record in table
	funClickCntrlrMapIconSI welFstCntrlrMapSI
	
'	Getting the count of records before performing the functionality
	iRecCountBef = funGetTblPgRecCount(wtblDataCntrlrMapSI)
	
'	Checking the validations in 'Add' and 'Edit' Controller Mapping windows
	For iLoop = 1 To 2
	
	'	Setting the row in the DataTable sheet
		objDTSheet.SetCurrentRow iLoop
		
	'	Getting the window Name
		sWinName = objDTSheet.GetParameter("ScreenName").Value
	
		Select Case sWinName
			Case "Add New Controller Mapping"
				Set welElement = wlnkAddNewCntrlrMapSI
				Set welWindow = welAddMapWinSI
				Set wlnkScr = wlnkScrAddMapSI
				Set wlnkFunc = wlnkFuncAddMapSI
				Set wbtnCncl = wbtnCnclAddMapWinSI
			Case "Edit Mapping"
				Set welElement = welEdtFstCntrlrMapSI
				Set welWindow = welEdtMapWinSI
				Set wlnkScr = wlnkScrEdtMapSI
				Set wlnkFunc = wlnkFuncEdtMapSI
				Set wbtnCncl = wbtnCnclEdtMapWinSI
		End Select
		
	'	Checking if no record exists for editing
		If Trim(sWinName) = "Edit Mapping" Then
			
		'	Checking if no record exists
			If iRecCountBef = 0 Then
				funHTMLResult "Done", "Check functionality in 'Edit Mapping' window", "Could not check the functionality as no record exists in table."
				Exit For
			End If
		End If
		
	'	Opening the 'Add/Edit Mapping' window
		funOpenMappingWin welElement, welWindow, sWinName
		
	'	Loop for setting the value in the fields
		For iLoop1 = 0 to UBound(arrColsSheet)
		
		'	Getting the value from the sheet
			sValue = objDTSheet.GetParameter(arrColsSheet(iLoop1)).Value
		
			Select Case arrColsSheet(iLoop1)
				Case "Screen", "ScreenDef"
					sFieldName = "Screen"
					Set wlnkField = wlnkScr
				Case "Functionality", "FunctionalityDef"
					sFieldName = "Functionality"
					Set wlnkField = wlnkFunc
			End Select
			
		'	Setting the value in the list
			funSelectFromList wlnkField, "'" & sFieldName & "' field", sValue
			
		'	Checking if the color got changed to red
			If InStr(arrColsSheet(iLoop1), "Def") <> 0 Then
				
			'	Clicking on the field
				funClickObject wlnkField, "'" & sFieldName & "' field" 
			
			'	Getting the color of the text
				sClrValAct = funFetchROProperty(wlnkField, "'" & sFieldName & "' field", "style/color")
				
			'	Checking if the color changes to 'Red'
				If Trim(sClrValAct) = Trim(sExpClrMapSI) Then
					funHTMLResult "Pass", "Check color change for '" & sFieldName & "' field", "Successfully checked that the field color gets changed to red in '" & sWinName & "' window. Expected Value : " & sExpClrMapSI & " & Actual Value : " & sClrValAct
				Else
					funHTMLResult "Fail", "Check color change for '" & sFieldName & "' field", "Failed as field color doesn't gets changed to red in '" & sWinName & "' window. Expected Value : " & sExpClrMapSI & " & Actual Value : " & sClrValAct
				End If
			End If
		Next
		
	'	Clicking on the 'Cancel' button
		funClickObject wbtnCncl, "'Cancel' button"
		
	'	Getting the count of records after performing the functionality
		iRecCountAft = funGetTblPgRecCount(wtblDataCntrlrMapSI)
		
	'	Checking if the record is not getting added
		If iRecCountBef = iRecCountAft Then
			funHTMLResult "Pass", "Check record addition", "Successfully checked that record is not getting added after clicking 'Cancel' button in '" & sWinName & "' window. Expected Count : " & iRecCountBef & " & Actual Count : " & iRecCountAft
		Else
			funHTMLResult "Fail", "Check record addition", "Failed as record is getting added after clicking 'Cancel' button in '" & sWinName & "' window. Expected Count : " & iRecCountBef & " & Actual Count : " & iRecCountAft
		End If
	Next
End Function


'*******************************************************************************************************************
'  Function Name	   	:   funOpenMappingWin
'  Function Description :   Function for opening 'Add New Controller Mapping' or 'Edit Mapping' window in 'Controller Mapping' section of 'Security Items' screen
'  Function Parameters  :	None
'  Date Created      	:   20th Feb, 2017
'  Author               :  	Karan Mehta
'  Last modified  on    :  	
'*******************************************************************************************************************
Public Function funOpenMappingWin(ByVal welBtn, ByVal welWindow, Byval sWinName)
	
'	Clicking on the link to open window
	funClickObject welBtn, "'" & sWinName & "' button"
	
'	Checking the existence of window
	bFlag = funObjectIsPresent(welWindow, "'" & sWinName & "' window", 15)
	If bFlag = False Then
		ExitTest
	Else
	'	Waiting for the fields to have all values listed down
		Wait(5)
	End If
End Function


'*******************************************************************************************************************
'  Function Name	   	:   funSetFilterInAdmin
'  Function Description :   Function for setting the filter in 'Administration' screens
'  Function Parameters  :	wedFltr = Object for Filter field, wbtnSrch = Object for Search button in Fiter field, sFltrStr = Filter string
'  Date Created      	:   22th Feb, 2017
'  Author               :  	Karan Mehta
'  Last modified  on    :  	
'*******************************************************************************************************************
Public Function funSetFilterInAdmin(ByVal wedFltr, wbtnSrch, ByVal sFltrStr)
	
'	Setting the string in the filter and clicking on 'Search' button
	funSetValueInEditBox wedFltr, "'Filter' field", sFltrStr
	funClickObject wbtnSrch, "'Search' button in filter section"
	Wait(2)
End Function


'*******************************************************************************************************************
'  Function Name	   	:   funAddCntrlrInSecItem
'  Function Description :   Function for adding a new record in 'Controllers' section of 'Security Items' screen
'  Function Parameters  :	None
'  Date Created      	:   12th Apr, 2017
'  Author               :  	Karan Mehta
'  Last modified  on    :  	
'*******************************************************************************************************************
Public Function funAddCntrlrInSecItem()

Dim sCntrlrName 'Reference variable for getting the controller 'Name'
Dim iTblRecCntBef, iTblRecCntAft 'Reference variable for getting the count of 'Controller' records in the table

'	Selecting the 'Controllers' tab
	funSelectTabInSecItem arrTabsInSI(4)
	
'	Getting the count of records in the table
	iTblRecCntBef = funGetTotlRecInTable(welPgsPgtnSI, wtblDataCntrlrSI)
	
'	Clicking on 'Add new controller' link
	funClickObject wlnkAddNewCntrlrSI, "'Add new controller' link"
	
'	Checking the existence of 'Add New Controller' window
	bFlag = funObjectIsPresent(welAddCntrlrWinSI, "'Add New Controller' window", 25)
	If bFlag = False Then
		ExitTest
	End If
	
'	Entering the unique value for 'Name' field
	sCntrlrName = funGetUniqueDataForSI(arrWinNameSI(8), arrFldsAddCntrlrSI(0))

'	Getting the random 'Description' and entering the value in the field
	sDescription = GetRandomString("A", 8, "C")
	funSetValueInEditBox wedDescAddCntrlrSI, "'Description' field", sDescription

'	Clicking on the 'Save' button
	funClickObject wbtnSaveAddCntrlrWinSI, "'Save' button"
	funWaitForLoadImgToDispr welLoadIconSI
	
'	Getting the count of records in the table
	iTblRecCntAft = funGetTotlRecInTable(welPgsPgtnSI, wtblDataCntrlrSI)
	
'	Checking if the record is added successfully in the table
	If iTblRecCntAft = (iTblRecCntBef + 1) Then
		funHTMLResult "Pass", "Check record addition in 'Controllers' screen", "Successfully added a new record. Expected Count : " & (iTblRecCntBef+1) & " & Actual Count : " & iTblRecCntAft
	Else
		funHTMLResult "Fail", "Check record addition in 'Controllers' screen", "Failed as new record is not added. Expected Count : " & (iTblRecCntBef+1) & " & Actual Count : " & iTblRecCntAft
		ExitTest
	End If

'	Setting the 'Name' as output of the function
	funAddCntrlrInSecItem = LCase(sCntrlrName)
End Function


'*******************************************************************************************************************
'  Function Name	   	:   funAddCntrlrMapForCntrlr
'  Function Description :   Function for adding a new 'Controller Mapping' for selected 'Controller' in 'Controller' section of 'Security Items' screen
'  Function Parameters  :	None
'  Date Created      	:   13th Apr, 2017
'  Author               :  	Karan Mehta
'  Last modified  on    :  	
'*******************************************************************************************************************
Public Function funAddCntrlrMapForCntrlr(ByVal sCntrlrName)

Dim bSheetExist 'Reference variable for checking the existence of TestData sheet
Dim iTblRecCntBef, iTblRecCntAft 'Reference variable for getting the count of records in the table
Dim sURL 'Reference variable for getting the 'URL' to be used to check the functionality of Invalid controller

'	Checking the existence of TestData sheet
	CheckSheetExistence sTDFileSI, sAddCntrlrMapSISheet, bSheetExist
	If bSheetExist = False Then
		ExitTest
	End If
	
'	Adding a new sheet in DataTable and importing the contents of the TestData sheet
	DataTable.AddSheet sAddCntrlrMapSISheet
	DataTable.ImportSheet sTDFileSI, sAddCntrlrMapSISheet, sAddCntrlrMapSISheet
	
'	Setting the object of DataTable sheet
	Set objDTSheet = DataTable.GetSheet(sAddCntrlrMapSISheet)
	
'	Getting the 'Screen Name' and 'Functionality Name'
	sScreen = objDTSheet.GetParameter("Screen").Value
	sFunctionality = objDTSheet.GetParameter("Functionality").Value

'	Sorting the record in 'Descending' order of 'ID' column
	funSortTblCols wtblHdrCntrlrSI, arrCntrlrTblCols(1), arrSortType(1)
	
'	Getting the 'Name' of the first record in the table
	sNameFstRec = funGetDataFromTblInAdmin(wtblDataCntrlrSI, wtblHdrCntrlrSI, arrCntrlrTblCols(2), 2)
	
'	Checking if the newly added record appears on top
	If Trim(LCase(sNameFstRec)) = Trim(LCase(sCntrlrName)) Then
		funHTMLResult "Pass", "Check if newly added record appears on top", "Successfully checked that newly added record appears on top. Expected 'Name' Value : " & sCntrlrName & " & Actual 'Name' Value : " & sNameFstRec
	Else
		funHTMLResult "Fail", "Check if newly added record appears on top", "Failed as newly added record doesn't appears on top. Expected 'Name' Value : " & sCntrlrName & " & Actual 'Name' Value : " & sNameFstRec
		ExitTest
	End If
	
'	Clicking on 'Controller Mapping' icon for first record in table
	funClickCntrlrMapIconSI welFstCntrlrMapSI
	
'	Getting the count of records before performing the functionality
	iTblRecCntBef = funGetTotlRecInTable(welPgsPgtnSI, wtblDataCntrlrMapSI)
	
'	Opening 'Add New Mapping' window
	funOpenMappingWin wlnkAddNewCntrlrMapSI, welAddMapWinSI, "Add New Mapping"
	
'	Selecting the value for 'Screen' and 'Functionality' fields
	funSelectFromList  wlnkScrAddMapSI, "'Screen' field", sScreen
	funSelectFromList  wlnkFuncAddMapSI, "'Functionality' field", sFunctionality
	
'	Clicking on the 'Save' button
	funClickObject wbtnSaveAddMapWinSI, "'Save' button"
	funWaitForLoadImgToDispr welLoadIconSI
	
'	Getting the count of records in the table
	iTblRecCntAft = funGetTotlRecInTable(welPgsPgtnSI, wtblDataCntrlrMapSI)
	
'	Checking if the record is added successfully in the table
	If iTblRecCntAft = (iTblRecCntBef + 1) Then
		funHTMLResult "Pass", "Check record addition in 'Controller Mapping' section", "Successfully checked the addition of record. Expected Count : " & (iTblRecCntBef + 1) & " & Actual Count : " & iTblRecCntAft
	Else
		funHTMLResult "Fail", "Check record addition in 'Controller Mapping' section", "Failed to add a record. Expected Count : " & (iTblRecCntBef + 1) & " & Actual Count : " & iTblRecCntAft
	End If
	
'	Checking if 'URL' contains "/" character at the end or not?
	If Right(sExecEnvURL, 1) = "/" Then
		sSubStr = "api/"
	Else
		sSubStr = "/api/"
	End If
	
'	Setting the 'URL' for checking the 'Invalid Controller' message
	sURL = sExecEnvURL & sSubStr & sCntrlrName
	
'	Checking the browser for execution
	Select Case sExecBrowser
		Case "IEXPLORE.EXE"
		
		'	Opening a new tab and setting the URL in the browser
			Browser("name:=" & sSecItemBrowser).OpenNewTab
			Wait(2)
			funPressKey sURL & "~"
			
		'	Checking the existence of 'Incorrect Controller' browser
			bFlag = funObjectIsPresent(wbrInCntrlrMapSI, "'Invalid Controller' browser", 100)
			If bFlag Then
			
			'	Closing the browser showing the message for 'Invalid Controller'
				wbrInCntrlrMapSI.Close		
			End If
		
		Case "CHROME.EXE"
		
		'	Launching the browser and waiting till the loading occurs
			funLaunchBrowser sURL
			
		'	Checking if the browser showing the message for 'Invalid Controller' is getting displayed?
			bFlag = funObjectIsPresent(wpgInCntrlrMapSI, "message for 'Invalid Controller'", 50)
			If bFlag Then
				
			'	Getting the expected and actual message for invalid controller
				sInvCntrlrMsgAct = funFetchROProperty(welMsgInvCntrlrSI, "message for using 'Invalid Controller Mapping'", "innertext")
				sInvCntrlrMsg = "No HTTP resource was found that matches the request URI '" & sURL & "'."
				
			'	Checking the text of the message for invalid controller
				If InStr(sInvCntrlrMsgAct, sInvCntrlrMsg) <> 0 Then
					funHTMLResult "Pass", "Check message for using invalid controller", "Successfully checked the displayed message. Actual Message : " & sInvCntrlrMsgAct
				Else
					funHTMLResult "Fail", "Check message for using invalid controller", "Failed as correct message is not getting displayed. Actual Message : " & sInvCntrlrMsgAct
				End If
		
			'	Closing the browser showing the message for 'Invalid Controller'
				wbrInCntrlrMapSI.Close	
			End If
	End Select
End Function


'*******************************************************************************************************************
'  Function Name	   	:   funDelFstRecInGrpMaint
'  Function Description :   Function for deleting the first record in 'Group Maintenance' screen 
'  Function Parameters  :	None
'  Date Created      	:   29th Mar, 2017
'  Author               :  	Karan Mehta
'  Last modified  on    :  	
'*******************************************************************************************************************
Public Function funDelFstRecInCntrlrSI()

'	Getting the count of records in the table before performing delete operation
	iTblRecCntBef = funGetTotlRecInTable(welPgsPgtnSI, wtblDataCntrlrSI)
	
'	Clicking on the delete group icon
	funClickObject welFstDelCntrlrSI, "'Delete' icon for first record in table"
	
'	Checking the existence of validation dialog for deleting the record
	bFlag = funObjectIsPresent(welCntrlrDelDlgCntrlrSI, "validation dialog for deleting the record", 20)
	If bFlag = False Then
		ExitTest
	End If
		
'	Clicking on the 'Delete' button of validation dialog
	funClickObject wbtnDelCntrlrDelDlgSI, "'Delete' button in validation dialog"

'	Checking if the validation dialog disappears
	funCheckElementDisappearance welCntrlrDelDlgCntrlrSI, "validation dialog while deleting the module"

'	Getting the count of records in the table after performing the Delete operation
	iTblRecCntAft = funGetTotlRecInTable(welPgsPgtnSI, wtblDataCntrlrSI)

'	Checking if the record gets deleted successfully?
	If iTblRecCntAft = iTblRecCntBef - 1 Then
		funHTMLResult "Pass", "Check deletion of record", "Successfully checked that record gets deleted. Expected Count : " & (iTblRecCntBef-1) & " & Actual Count : " & iTblRecCntAft
	Else
		funHTMLResult "Fail", "Check deletion of record", "Failed as record doesn't get deleted. Expected Count : " & (iTblRecCntBef-1) & " & Actual Count : " & iTblRecCntAft
	End If
End Function



''''''''''''''''''''''''''''''''''''''''''''USER MAINTENANCE''''''''''''''''''''''''''''''''''''''

'*******************************************************************************************************************
'  Function Name	   	:   funOpenSecInUserMainScr
'  Function Description :   Function for opening the sections of 'User Maintenance' screen
'  Function Parameters  :	sTabName = Tab to be selected for opening the section
'  Date Created      	:   23rd Feb, 2017
'  Author               :  	Karan Mehta
'  Last modified  on    :  	
'*******************************************************************************************************************
Public Function funOpenSecInUserMainScr(ByVal sTabName)
	
	Select Case sTabName
		Case arrTabsInUsrMain(0)
			Set welElement = wlnkActUsrTabUM
		Case arrTabsInUsrMain(1)
			Set welElement = wlnkInactUsrTabUM
	End Select
		
'	Selecting the section of the screen
	funClickObject welElement, "'" & arrTabsInUsrMain(0) & "' link"
	
'	Wait for loading icon to disappear	
	funWaitForLoadImgToDispr welLoadIconUM
End Function


'*******************************************************************************************************************
'  Function Name	   	:   funChkElementsInUsrMain
'  Function Description :   Function for checking the existence of elements in different sections of 'User Maintenance' screen
'  Function Parameters  :	sTabName = Selected tab where functionality needs to be checked
'  Date Created      	:   23rd Feb, 2017
'  Author               :  	Karan Mehta
'  Last modified  on    :  	
'*******************************************************************************************************************
Public Function funChkElementsInUsrMain(ByVal sTabName)

	Select Case sTabName
		Case arrTabsInUsrMain(0)
			Set wtblHdr = wtblHdrActUsrUM
			Set wtblData = wtblDataActUsrUM
			Set welMngUsrAc = welFstMngUsrAcActUsrUM
			Set welMUAI = welFstMUIActUsrUM
			Set wlnkAddUsr = wlnkAddUsrActUsrUM
			Set wlnkRecPerPg = wlnkRecPerPgActUsrUM
			arrTblCols = arrTblColsActUsrUM
			sText = "Make User Inactive"
			sAddUsrBtn = "enabled"
			iEnabled = 1
		Case arrTabsInUsrMain(1)
			Set wtblHdr = wtblHdrInactUsrUM
			Set wtblData = wtblDataInactUsrUM
			Set welMngUsrAc = welFstMngUsrAcInactUsrUM
			Set welMUAI = welFstMUAInactUsrUM
			Set wlnkAddUsr = wlnkAddUsrInactUsrUM
			Set wlnkRecPerPg = wlnkRecPerPgInactUsrUM
			arrTblCols = arrTblColsInactUsrUM
			sText = "Make User Active"
			sAddUsrBtn = "disabled"
			iEnabled = 1
	End Select

'	Getting the name of selected tab in the screen
	If sTabName = arrTabsInUsrMain(0) Then
		
	'	Getting the default selected tab
		sTabName = funFetchROProperty(wlnkSelTabInUM, "selected tab", "innertext")
		If Trim(sTabName) = arrTabsInUsrMain(0) Then
			funHTMLResult "Pass", "Check default selected tab", "Successfully checked the default selected tab. Expected Value : " & arrTabsInUsrMain(0) & " & Actual Value : " & sTabName
		Else
			funHTMLResult "Fail", "Check default selected tab", "Failed as default selected tab is not correct. Expected Value : " & arrTabsInUsrMain(0) & " & Actual Value : " & sTabName
		End If
	End If
	
'	Checking the existence of filter section
	funObjectIsPresent wedtFltrUM, "Filter section of '" & sTabName & "' section", 10

'	Checking the existence of table
	funObjectIsPresent wtblData, "table in '" & sTabName & "' section", 10
	
'	Checking the existence of columns in the table
	funCheckColsInTable wtblHdr, arrTblCols, "'" & sTabName & "' tab section"
	
'	Getting the count of records in the table
	iTblRecCount = funGetTotlRecInTable(welPgsPgtnUM, wtblData)
	
'	Checking if any record exists?
	If iTblRecCount = 0 Then
		funHTMLResult "Done", "Check icons under 'Actions' column", "Could not proceed further as no record exists in table."
	Else
	'	Checking the tab selected
		If sTabName = arrTabsInUsrMain(0) Then
			
		'	Checking the existence of 'Edit User' icon
			funObjectIsPresent	welFstEdtUsrActUsrUM, "'Edit User' icon", 10
			
		'	Checking the existence of 'Copy User' icon	
			funObjectIsPresent welFstCpyUsrActUsrUM, "'Copy User' icon", 10
		End If
		
	'	Checking the existence of 'Make User Active/Inactive' icon
		funObjectIsPresent welMUAI, "'" & sText & "' icon", 10
		
	'	Checking the existence of 'Manage User Acccount' icon
		funObjectIsPresent welMngUsrAc, "'Manage User Account' icon", 10
	End If
	
'	Checking if 'Add User' button is enabled/disabled
	bFlag = funCheckElementExistence(wlnkAddUsr, 10)
	If bFlag Then
		funHTMLResult "Pass", "Check if 'Add User' button is " & sAddUsrBtn, "Successfully checked that 'Add User' button is " & sAddUsrBtn
	Else
		funHTMLResult "Fail", "Check if 'Add User' button is " & sAddUsrBtn, "Failed as 'Add User' button is not " & sAddUsrBtn
	End If
	
'	Checking the existence of items in the 'Records Per Page' dropdown
	funCheckItemsInList wlnkRecPerPg, arrRecPerPgUM, "'Records Per Page'"
End Function


'*******************************************************************************************************************
'  Function Name	   	:   funCheckItemsInList
'  Function Description :   Function for checking the existence of items in the list
'  Function Parameters  :	welList = WebList object, arrItems = Array storing all items, sDetails = Details to be entered by user
'  Date Created      	:   23rd Feb, 2017
'  Author               :  	Karan Mehta
'  Last modified  on    :  	
'*******************************************************************************************************************
Public Function funCheckItemsInList(ByVal welList, ByVal arrItems, ByVal sDetails)
	
Dim iLoop 'Reference variable for iteration	
	
'	Getting the list of all the items available in the dropdown
	sValue = funFetchROProperty(welList, "'" & sDetails & "' list", "all items")
	sValue = ";" & sValue & ";"
	
'	Loop for checking if all the options available in the dropdown
	For iLoop = 0 To UBound(arrItems)
		
		If InStr(sValue, ";" & arrItems(iLoop) & ";") <> 0 Then
			funHTMLResult "Pass", "Check existence of '" & arrItems(iLoop) & "' item in list", "Successfully checked the existence of '" & arrItems(iLoop) & "' item in the list."
		Else
			funHTMLResult "Fail", "Check existence of '" & arrItems(iLoop) & "' item in list", "Failed as '" & arrItems(iLoop) & "' item is not available in the list."
		End If
	Next
End Function


'*******************************************************************************************************************
'  Function Name	   	:   funChkFltrFuncInUsrMain
'  Function Description :   Function for checking the search functionality in 'User Maintenance' screen
'  Function Parameters  :	sColName = Column name on which search functionality needs to be checked
'  Date Created      	:   24th Feb, 2017
'  Author               :  	Karan Mehta
'  Last modified  on    :  	
'*******************************************************************************************************************
Public Function funChkFltrFuncInUsrMain(ByVal sColName)

Dim bSheetExist 'Reference variable for checking the existence of TestData sheet
Dim sValue 'Reference variable for getting the filtered text on basis of which search operation needs to be done
Dim iLoop 'Reference variable for iteration

'	Getting the count of records in the table
	iTblRecCountBef = funGetTotlRecInTable(welPgsPgtnUM, wtblDataActUsrUM)

'	Checking if any record exists?
	If iTblRecCountBef = 0 Then
		funHTMLResult "Done", "Check filter functionality", "Could not proceed further as no record exists in the table."
		ExitTest
	End If

'	Clicking on the 'Search' button
	funClickObject wbtnFltrUM, "'Search' button"
	
'	Getting the count of records in the table
	iTblRecCountAft = funGetTotlRecInTable(welPgsPgtnUM, wtblDataActUsrUM)
	
'	Checking if list changes?
	If iTblRecCountBef = iTblRecCountAft Then
		funHTMLResult "Pass", "Check list change on clicking 'Search' button", "Successfully checked that list does not changes on clicking 'Search' button in filter. Expected Count : " & iTblRecCountBef & " & Actual Count : " & iTblRecCountAft
	Else
		funHTMLResult "Fail", "Check list change on clicking 'Search' button", "Failed as list changes on clicking 'Search' button in filter. Expected Count : " & iTblRecCountBef & " & Actual Count : " & iTblRecCountAft
	End If
	
'	Checking the existence of the sheet containing TestData
	CheckSheetExistence sTDFileUM, sSrchSheetUM, bSheetExist
	If bSheetExist = False Then
		funHTMLResult "Fail", "Check Sheet Existence", "Failed as Test Data sheet " & sSrchSheetUM & " does not exists in file stored at path " & sTDFileUM
		ExitTest
	End If
	
'	Adding the Sheet and importing the TestData sheet
	DataTable.AddSheet sSrchSheetUM
	DataTable.ImportSheet sTDFileUM, sSrchSheetUM, sSrchSheetUM
	Set objDTSheet = DataTable.GetSheet(sSrchSheetUM)
	
'	Setting the iterations
	If sColName = "SSO" Then
		iFltrItr = 3
	Else
		iFltrItr = 2
	End If
	
'	Getting the TestData from the sheet
	sValue = objDTSheet.GetParameter(sColName).Value
	
'	Loop for checking the search functionality
	For iLoop = 1 To iFltrItr
	
		Select Case iLoop
			Case 1
				sFltrStr = sValue
				sText = "complete filter"
			Case 2
				iLen = RandomNumber(1, Len(sValue) - 1)
				sFltrStr = Trim(Mid(sValue, 1, iLen))
				sText = "partial filter"
			Case 3
			'	Getting the TestData from the sheet
				sFltrStr = objDTSheet.GetParameter("SSO_Invalid").Value
				sText = "invalid filter"
		End Select
		
	'	Setting the string in the filter
		funSetFilterInAdmin wedtFltrUM, wbtnFltrUM, sFltrStr
		
	'	Getting the count of actual filtered records
		iFilterRecCntAct = funGetTblPgRecCount(wtblDataActUsrUM)
	
	'	Getting the count of expected filtered records			
		iFilterRecCntExp = funGetFltrRecCntPerPg(sUsrMainScr, sColNameTbl, sFltrStr)
		
	'	Checking if filter functionality working fine
		If iFilterRecCntExp = iFilterRecCntAct Then
			funHTMLResult "Pass", "Check filter functionality on column : " & sColName & " when " & sText & " string is used", "Successfully checked that filter is working fine. Expected Count : " & iFilterRecCntExp & " & Actual Count : " & iFilterRecCntAct
		Else
			funHTMLResult "Fail", "Check filter functionality on column : " & sColName & " when " & sText & " string is used", "Failed as filter is not working fine. Expected Count : " & iFilterRecCntExp & " & Actual Count : " & iFilterRecCntAct
		End If
	Next
End Function


'*******************************************************************************************************************
'  Function Name	   	:   funChkAddUsrFuncInUsrMain
'  Function Description :   Function for checking the 'Add User' functionality in 'User Maintenance' screen
'  Function Parameters  :	sSheetName = Sheet Name where TestData is present
'  Date Created      	:   13th Apr, 2017
'  Author               :  	Karan Mehta
'  Last modified  on    :  	
'*******************************************************************************************************************
Public Function funChkAddUsrFuncInUsrMain(ByVal sSheetName)

Dim iLoop, iLoop1 'Reference variable for iteration
Dim bSheetExist 'Reference variable for checking the TestData sheet existence
Dim iTblRecCntBef, iTblRecCntAft 'Reference variables for getting the count of records in the table
Dim iRecCountSheet 'Reference variable for getting the count of records in the TestData sheet
Dim sActUserSSO 'Reference variable for getting the Active User's SSO

arrColsTDSheet = Array("Name", "SSO", "BtnSave", "BtnCncl", "bValidation") 'Array for storing the 'TestData' sheet column names

'	Checking the existence of the sheet containing TestData
	CheckSheetExistence sTDFileUM, sSheetName, bSheetExist
	If bSheetExist = False Then
		funHTMLResult "Fail", "Check Sheet Existence", "Failed as Test Data sheet " & sSheetName & " does not exists in file stored at path " & sTDFileUM
		ExitTest
	End If
	
'	Adding the Sheet and importing the TestData sheet
	DataTable.AddSheet sSheetName
	DataTable.ImportSheet sTDFileUM, sSheetName, sSheetName
	Set objDTSheet = DataTable.GetSheet(sSheetName)
	
'	Getting the count of records in the TestData sheet
	iRecCountSheet = objDTSheet.GetRowCount
	
'	Loop for checking the 'Add' functionality
	For iLoop = 1 To iRecCountSheet
	
	'	Setting the row in the sheet
		objDTSheet.SetCurrentRow iLoop
		
	'	Checking the existence of 'Add New User' window
		bFlag = funCheckElementExistence(welAddUsrWinActUM, 3)
		If bFlag = False Then
		
		'	Getting the count of records in the table
			iTblRecCntBef = funGetTotlRecInTable(welPgsPgtnUM, wtblDataActUsrUM)
				
		'	Clicking 'Add User' link
			funClickObject wlnkAddUsrActUsrUM, "'Add User' link"
		
		'	Checking the existence of elements in the 'Add New Client Group' window
			funChkElementsInAddUsrWinUM()
		End If
	
	'	Loop for getting the TestData for selected column in TestData sheet
		For iLoop1 = 0 To UBound(arrColsTDSheet)
		
		'	Getting the value of selected column
			sValue = objDTSheet.GetParameter(arrColsTDSheet(iLoop1)).Value
			
		'	Checking the condition in TestData sheet and performing the action accordingly
			Select Case arrColsTDSheet(iLoop1)
		
				Case "Name"
				
				'	Entering the value for 'Full Name' field
					funSetValueInEditBox wedNameAddUsrWinActUM, "'Full Name' field", sValue
				Case "SSO"
				
				'	Checking if unique data needs to be entered in the field?
				'	If Yes, enter the unique data, else, put the value directly from the TestData sheet
					If sValue = "GET_UNIQUE_DATA" Then
						funGetUniqueDataForUM arrWinNameUM(0), arrFldsAddUsrUM(1)
					Else
						funSetValueInEditBox wedSSOAddUsrWinActUM, "'SSO' field", sValue
					End If
				Case "BtnSave"
					Select Case sValue
						Case "DISABLE"
						
						'	Waiting for the value to be set in the field and checking if 'Save' button is disabled
							Wait(2)
							funVerifygetROProperty wbtnSaveAddUsrWinActUM, "'Save' button", "disabled", 1
						Case "CLICK"
						
						'	Clicking on the 'Save' button and waiting till the loading image gets disappeared
							funClickObject wbtnSaveAddUsrWinActUM, "'Save' button"
							funWaitForLoadImgToDispr welLoadIconUM
							
						'	Getting the count of records in the table
							iTblRecCntAft = funGetTotlRecInTable(welPgsPgtnUM, wtblDataActUsrUM)
							
						'	Checking that the record is not added as 'Save' button is clicked	
							If iTblRecCntAft = (iTblRecCntBef + 1) Then
								funHTMLResult "Pass", "Check record addition on clicking 'Save' button", "Successfully checked that record is added. Expected Count : " & (iTblRecCntBef+1) & " & Actual Count : " & iTblRecCntAft
							Else
								funHTMLResult "Fail", "Check record addition on clicking 'Save' button", "Failed as record is not added in the table. Expected Count : " & (iTblRecCntBef+1) & " & Actual Count : " & iTblRecCntAft
								ExitTest
							End If
					End Select
				Case "BtnCncl"
					If sValue = "CLICK" Then
					
					'	Clicking on 'Cancel' button and verify that 'Add New User' window is closed
						funClickObject wbtnCnclAddUsrWinActUM, "'Cancel' button"
						funCheckElementDisappearance welAddUsrWinActUM, "'Add New User' window"
						
					'	Getting the count of records in the table
						iTblRecCntAft = funGetTotlRecInTable(welPgsPgtnUM, wtblDataActUsrUM)
						
					'	Checking that the record is not added as 'Cancel' button is clicked	
						If iTblRecCntAft = iTblRecCntBef Then
							funHTMLResult "Pass", "Check record addition on clicking 'Cancel' button", "Successfully checked that record is not added. Expected Count : " & iTblRecCntBef & " & Actual Count : " & iTblRecCntAft
						Else
							funHTMLResult "Fail", "Check record addition on clicking 'Cancel' button", "Failed as record gets added in the table. Expected Count : " & iTblRecCntBef & " & Actual Count : " & iTblRecCntAft
						End If
					End If
				Case "bValidation"
				
				'	Checking if the validation for duplicate SSO needs to be checked?
					If sValue = "TRUE" Then
					
					'	Checking the existence of validation message for using duplicate SSO
						funObjectIsPresent welValMsgExstSSOAddUsrWinActUM, "validation message for using duplicate SSO", 10
					End If
			End Select
		Next
	Next
	
'	Sorting the records in Descending order of 'ID' column
	funSortTblCols wtblHdrActUsrUM, arrTblColsActUsrUM(1), arrSortType(1)
	
'	Checking if newly added user needs to be inactivated
	If sSheetName = sAddFuncSheetUM Then
		
	'	Inactivating the first record
		funInactFstRecInUsrMain()
	End If
End Function


'*******************************************************************************************************************
'  Function Name	   	:   funChkElementsInAddUsrWinUM
'  Function Description :   Function for checking the existence of elements in 'Add New User' window of 'Active Users' section of 'User Maintenance' screen
'  Function Parameters  :	None
'  Date Created      	:   13th Apr, 2017
'  Author               :  	Karan Mehta
'  Last modified  on    :  	
'*******************************************************************************************************************
Public Function funChkElementsInAddUsrWinUM()
	
'	Checking the existence of 'Add New User' window
	bFlag = funObjectIsPresent(welAddUsrWinActUM, "'Add New User' window", 20)
	If bFlag Then
		
	'	Checking the existence of 'Full Name' field
		funObjectIsPresent wedNameAddUsrWinActUM, "'Full Name' field", 5
		
	'	Checking the existence of 'SSO' field
		funObjectIsPresent wedSSOAddUsrWinActUM, "'SSO' field", 5
		
	'	Checking the existence of 'Save' button
		funObjectIsPresent wbtnSaveAddUsrWinActUM, "'Save' button", 5
		
	'	Checking the existence of 'Cancel' button
		funObjectIsPresent wbtnCnclAddUsrWinActUM, "'Cancel' button", 5	
	End If
End Function


'*******************************************************************************************************************
'  Function Name	   	:   funGetUniqueDataForUM
'  Function Description :   Function for getting the unique data for the fields in windows of 'User Maintenance' screen
'  Function Parameters  :	sWinName = Window Name, sFieldName = Field Name for which object is required
'  Date Created      	:   13th Apr, 2017
'  Author               :  	Karan Mehta
'  Last modified  on    :  	
'*******************************************************************************************************************
Public Function funGetUniqueDataForUM(ByVal sWinName, ByVal sFieldName)
	
'	Setting the object of the field where value needs to be entered and corresponding validation msg which can appear
	Select Case sWinName
		Case arrWinNameUM(0)
			Select Case sFieldName	
				Case arrFldsAddUsrUM(1)
					Set welElement = wedSSOAddUsrWinActUM
					Set welValMsg = welValMsgExstSSOAddUsrWinActUM
			End Select
		Case arrWinNameUM(1)
			Select Case sFieldName
				Case arrFldsEdtUsrUM(1)
					Set welElement = wedSSOEdtUsrWinActUM
					Set welValMsg = welValMsgExstSSOEdtUsrWinActUM
			End Select
		Case arrWinNameUM(2)
			Select Case sFieldName
				Case arrFldsCpyUsrUM(1)
					Set welElement = wedSSOCpyUsrWinActUM
					Set welValMsg = welValMsgExstSSOCpyUsrWinActUM
			End Select
	End Select
	
'	Loop for getting the data which is already not present in the application
	Do
	'	Getting the value to be entered for the field
		sValue = RandomNumber(1,9) & GetRandomString("N", 11, "U")
		
	'	Entering the value in the field
		funSetValueInEditBox welElement, "'" & sFieldName & "' field", sValue
		
	'	Checking if Code/Name entered is already present?
		bFlag = funCheckElementExistence(welValMsg, 3)
	Loop While bFlag
	
'	Setting the output of the function
	funGetUniqueDataForUM = sValue
End Function


'*******************************************************************************************************************
'  Function Name	   	:   funInactFstRecInUsrMain
'  Function Description :   Function for inactivating the first record in 'User Maintenance' screen
'  Function Parameters  :	None
'  Date Created      	:   13th Apr, 2017
'  Author               :  	Karan Mehta
'  Last modified  on    :  	
'*******************************************************************************************************************
Public Function funInactFstRecInUsrMain()

Dim iTblRecCntBef, iTblRecCntAft 'Reference variable for getting the count of records in the table
Dim sSSOInactUsr 'Reference variable for getting the 'SSO' of Inactive user

'	Getting the count of records after performing the functionality
	iTblRecCntBef = funGetTotlRecInTable(welPgsPgtnUM, wtblDataActUsrUM)
	
'	Getting the 'SSO' of the user which will be inactivated
	sSSOInactUsr = funGetDataFromTblInAdmin(wtblDataActUsrUM, wtblHdrActUsrUM, arrTblColsActUsrUM(3), 2)
	
'	Clicking on 'Make User Inactive' icon for first record in the table
	funClickObject welFstMUIActUsrUM, "'Make User Inactive' icon for first record"
	
'	Checking the existence of validation dialog
	bFlag = funObjectIsPresent(welDlgMUIActUsrUM, "validation dialog for making user inactive", 20)
	If bFlag Then
		
	'	Clicking on the 'Deactivate' button of the validation dialog	
		funClickObject wbtnDeactDlgMUIActUsrUM, "'Deactivate' button"
		funCheckElementDisappearance welDlgMUIActUsrUM, "validation dialog for making user inactive"
		
	'	Getting the count of records after performing the functionality
		iTblRecCntAft = funGetTotlRecInTable(welPgsPgtnUM, wtblDataActUsrUM)
	
	'	Checking if the record is inactivated successfully?
		If iTblRecCntAft = (iTblRecCntBef - 1) Then
			funHTMLResult "Pass", "Check inactivating record", "Successfully checked that record is inactivated on clicking 'Deactivate' button of validation dialog. Expected Count : " & (iTblRecCntBef-1) & " & Actual Count : " & iTblRecCntAft
		
		'	Adding the 'Inactive' user's 'SSO' in the TestData sheet
			funWriteInExcel sTDFileUM, sUserInfoSheetUM, 2, sUsrSSOCol, "'" & sSSOInactUsr
		Else
			funHTMLResult "Fail", "Check inactivating record", "Failed as record is not inactivated on clicking 'Deactivate' button of validation dialog. Expected Count : " & (iTblRecCntBef-1) & " & Actual Count : " & iTblRecCntAft
		End If
	End If
End Function


'*******************************************************************************************************************
'  Function Name	   	:   funSelTabInUserMain
'  Function Description :   Function for selecting the tab in 'User Maintenance' screen
'  Function Parameters  :	None
'  Date Created      	:   13th Apr, 2017
'  Author               :  	Karan Mehta
'  Last modified  on    :  	
'*******************************************************************************************************************
Public Function funSelTabInUserMain(ByVal sTabName)

'	Getting the name of the selected tab
	sTabSel = funFetchROProperty(wlnkSelTabInUM, "selected tab", "name")

'	Checking if the required tab is already selected?
	If Trim(sTabName) = Trim(sTabSel) Then
		Exit Function
	Else
	'	Setting the object for the tab to be selected
		If Trim(sTabName) = arrTabsInUsrMain(0) Then
			Set welTab = wlnkActUsrTabUM
		Else
			Set welTab = wlnkInactUsrTabUM	
		End If
		
	'	Clicking on the tab to select it and wait for loading image to disapppear
		funClickObject welTab, "'" & sTabName & "' tab"
		funWaitForLoadImgToDispr welLoadIconUM
		
	'	Getting the name of the selected tab
		sTabSel = funFetchROProperty(wlnkSelTabInUM, "selected tab", "name")
		
	'	Checking if the required tab is selected
		If Trim(sTabSel) = sTabName Then
			funHTMLResult "Pass", "Check selection of '" & sTabName & "' tab", "Successfully selected the '" & sTabName & "' tab. Expected Tab : " & sTabName & " & Actual Tab : " & sTabSel
		Else
			funHTMLResult "Fail", "Check selection of '" & sTabName & "' tab", "Failed as '" & sTabName & "' tab is not selected. Expected Tab : " & sTabName & " & Actual Tab : " & sTabSel
		End If
	End If
End Function


'*******************************************************************************************************************
'  Function Name	   	:   funChkStatusChngUserMain
'  Function Description :   Function for changing the status of selected recor in 'User Maintenance' screen
'  Function Parameters  :	None
'  Date Created      	:   14th Apr, 2017
'  Author               :  	Karan Mehta
'  Last modified  on    :  	
'*******************************************************************************************************************
Public Function funChkStatusChngUserMain(ByVal sSheetName)

Dim iLoop, iLoop1 'Reference variables for iteration
Dim bSheetExist 'Reference variable for checking the existence of TestData sheet
Dim iRecCountSheet 'Reference variable for getting the count of records in TestData sheet
Dim sUserSSO 'Reference variable for storing the 'SSO' of the user

arrTDFileCols = Array("sSecName", "DlgStChngBtn", "DlgCnclBtn") 'Array for storing the column names of TestData sheet

'	Checking the existence of TestData sheet
	CheckSheetExistence sTDFileUM, sSheetName, bSheetExist
	If bSheetExist = False Then
		funHTMLResult "Fail", "Check Sheet : '" & sSheetName & "' existence", "Failed as sheet is not present in file at path : " & sTDFileUM
		ExitTest	
	End If
	
'	Checking the existence of TestData sheet containing  User's SSO information
	CheckSheetExistence sTDFileUM, sUserInfoSheetUM, bSheetExist
	If bSheetExist = False Then
		funHTMLResult "Fail", "Check Sheet : '" & sUserInfoSheetUM & "' existence", "Failed as sheet is not present in file at path : " & sTDFileUM
		ExitTest
	End If

'	Adding the sheets in the DataTable
	DataTable.AddSheet sSheetName
	DataTable.AddSheet sUserInfoSheetUM
	
'	Importing the contents of TestData sheets in DataTable
	DataTable.ImportSheet sTDFileUM, sSheetName, sSheetName
	DataTable.ImportSheet sTDFileUM, sUserInfoSheetUM, sUserInfoSheetUM
	
'	Setting the objects of TestData sheets
	Set objDTSheet = DataTable.GetSheet(sSheetName)
	Set objDTSheet1 = DataTable.GetSheet(sUserInfoSheetUM)
	
'	Getting the 'SSO' of the required user
	sUserSSO = objDTSheet1.GetParameter(sUsrSSOCol).Value
	
'	Getting the count of records in the sheet containing the conditions to be checked
	iRecCountSheet = objDTSheet.GetRowCount
	
'	Loop for checking the functionality based on the conditions set in TestData sheet
	For iLoop = 1 To iRecCountSheet
		
	'	Selecting the row in TestData sheet
		objDTSheet.SetCurrentRow iLoop
		
	'	Loop for getting the value for selected column from TestData sheet	
		For iLoop1 = 0 To UBound(arrTDFileCols)
		
		'	Getting the value of selected cell from TestData sheet
			sValue = objDTSheet.GetParameter(arrTDFileCols(iLoop1)).Value
		
			Select Case arrTDFileCols(iLoop1)
				
				Case "sSecName"
					If sValue = arrTabsInUsrMain(0) Then
						sTabToSel = arrTabsInUsrMain(0)
						sDiffTab = arrTabsInUsrMain(1)
						arrTblCols = arrTblColsActUsrUM
						arrTblColsDiff = arrTblColsInactUsrUM
						sIconName = "'Make User Inactive' icon"
						Set wtblHdr = wtblHdrActUsrUM
						Set wtblData = wtblDataActUsrUM
						Set wDiffTblHdr = wtblHdrInactUsrUM
						Set wDiffTblData = wtblDataInactUsrUM
						Set welMUIcon = welFstMUIActUsrUM
						Set welValDlg = welDlgMUIActUsrUM
						Set welValDlgMsg = welDlgTxtMUIActUsrUM
						Set wbtnStChngValDlg = wbtnDeactDlgMUIActUsrUM
						Set wbtnCnclValDlg = wbtnCnclDlgMUIActUsrUM
					Else
						sTabToSel = arrTabsInUsrMain(1)
						sDiffTab = arrTabsInUsrMain(0)
						arrTblCols = arrTblColsInactUsrUM
						arrTblColsDiff = arrTblColsActUsrUM
						sIconName = "'Make User Active' icon"
						Set wtblHdr = wtblHdrInactUsrUM
						Set wtblData = wtblDataInactUsrUM
						Set wDiffTblHdr = wtblHdrActUsrUM
						Set wDiffTblData = wtblDataActUsrUM
						Set welMUIcon = welFstMUAInactUsrUM
						Set welValDlg = welDlgMUAInactUsrUM
						Set welValDlgMsg = welDlgTxtMUAInactUsrUM
						Set wbtnStChngValDlg = wbtnActDlgMUAInactUsrUM
						Set wbtnCnclValDlg = wbtnCnclDlgMUAInactUsrUM
					End If
				
				'	Selecting the required tab in 'User Maintenance' screen
					funSelTabInUserMain sTabToSel
					
				'	Filtering the record
					funSetFilterInAdmin wedtFltrUM, wbtnFltrUM, sUserSSO
					
				'	Sorting the records in ascending order of 'SSO' column
					funSortTblCols wtblHdr, arrTblCols(3), arrSortType(0)
					
				'	Getting the count of records in the table (before performing the operation)
					iTblRecCountBef = funGetTotlRecInTable(welPgsPgtnUM, wtblData)
					If iTblRecCountBef = 0 Then
						funHTMLResult "Done", "Check status change functionality", "Could not check the functionality as record with SSO : "  & sUserSSO & " does not exists."
						ExitTest
					End If
					
				'	Clicking on the 'Make User Active/Inactive' icon for first record
					funClickObject welMUIcon, sIconName
					
				'	Checking the existence of validation dialog
					bFlag = funObjectIsPresent(welValDlg, "validation dialog for changing the status of record in '" & sTabToSel & "' tab", 20)
					If bFlag Then
						
					'	Checking the message in the dialog
						funObjectIsPresent welValDlgMsg, "validation dialog message", 10
					End If
				
				Case "DlgStChngBtn"
					
				'	Checking if 'Save' button needs to be clicked
					If sValue = "CLICK" Then
						
					'	Clicking on the  button to change the status
						funClickObject wbtnStChngValDlg, "button to change the status of record"
						funCheckElementDisappearance welValDlg, "validation dialog for changing the record status"
						
					'	Getting the count of records in table (after performing the operation)
						iTblRecCountAft = funGetTotlRecInTable(welPgsPgtnUM, wtblData)
						
					'	Checking if the record is not available in the section
						If iTblRecCountAft = iTblRecCountBef - 1 Then
							funHTMLResult "Pass", "Check status change on clicking " & sIconName & " and accepting the validation", "Successfully checked that record status is changed. Expected Count : " & (iTblRecCountBef-1) & " & Actual Count : " & iTblRecCountAft
						Else
							funHTMLResult "Fail", "Check status change on clicking " & sIconName & " and accepting the validation", "Failed as record status is not changed. Expected Count : " & (iTblRecCountBef-1) & " & Actual Count : " & iTblRecCountAft
						End If
						
					'	Changing the tab
						funSelTabInUserMain sDiffTab
					
					'	Filtering the record
						funSetFilterInAdmin wedtFltrUM, wbtnFltrUM, sUserSSO
						
					'	Sorting the records in ascending order of 'SSO' column
						funSortTblCols wDiffTblHdr, arrTblColsDiff(3), arrSortType(0)
						
					'	Getting the 'SSO' of first record
						sUsrSSO = funGetDataFromTblInAdmin(wDiffTblData, wDiffTblHdr, arrTblColsDiff(3), 2)
						
					'	Checking if the record status is changed
						If Trim(sUsrSSO) = Trim(sUserSSO) Then
							funHTMLResult "Pass", "Check record transfer on clicking " & sIconName & " and accepting the validation", "Successfully checked that record is transferred. Expected SSO : " & sUserSSO & " & Actual SSO : " & sUsrSSO
						Else
							funHTMLResult "Fail", "Check record transfer on clicking " & sIconName & " and accepting the validation", "Failed as record is not transferred. Expected SSO : " & sUserSSO & " & Actual SSO : " & sUsrSSO
							ExitTest
						End If
					End If
				
				Case "DlgCnclBtn"
				
				'	Checking if 'Cancel' button needs to be clicked
					If sValue = "CLICK" Then
						
					'	Clicking on the  button to change the status and waiting till the validation dialog gets disappeared
						funClickObject wbtnCnclValDlg, "'Cancel' button of validation dialog"
						funCheckElementDisappearance welValDlg, "validation dialog for changing the record status"
						
					'	Getting the count of records in table (after performing the operation)
						iTblRecCountAft = funGetTotlRecInTable(welPgsPgtnUM, wtblData)	
						
					'	Checking if status of record is not changed
						If iTblRecCountAft = iTblRecCountBef Then
							funHTMLResult "Pass", "Check record status change on clicking " & sIconName & " and rejecting the validation", "Successfully checked that record status is not changed. Expected Count : " & iTblRecCountBef & " & Actual Count : " & iTblRecCountAft
						Else
							funHTMLResult "Fail", "Check record status change on clicking 'Cancel' button of validation dialog", "Failed as record status is changed. Expected Count : " & iTblRecCountBef & " & Actual Count : " & iTblRecCountAft
						End If
					End If
			End Select
		Next	
	Next
End Function


'*******************************************************************************************************************
'  Function Name	   	:   funChngRecStatusUsrMain
'  Function Description :   Function for changing the record status to Active/Inactive in User Maintenance screen
'  Function Parameters  :	sSectionName = Section name from where record is present and status change is required
'  Date Created      	:   17th Apr, 2017
'  Author               :  	Karan Mehta
'  Last modified  on    :  	
'*******************************************************************************************************************
Public Function funChngRecStatusUsrMain(ByVal sSectionName)

'	Checking the existence of TestData sheet containing  User's SSO information
	CheckSheetExistence sTDFileUM, sUserInfoSheetUM, bSheetExist
	If bSheetExist = False Then
		funHTMLResult "Fail", "Check Sheet : '" & sUserInfoSheetUM & "' existence", "Failed as sheet is not present in file at path : " & sTDFileUM
		ExitTest
	End If
	
'	Adding the TestData sheet in the DataTable
	DataTable.AddSheet sUserInfoSheetUM

'	Importing the contents of TestData sheets in DataTable
	DataTable.ImportSheet sTDFileUM, sUserInfoSheetUM, sUserInfoSheetUM

'	Getting the 'SSO' of the required user
	sUserSSO = DataTable.GetSheet(sUserInfoSheetUM).GetParameter(sUsrSSOCol).Value

'	Loop for searching the record under required tab
	For iLoop = 0 To UBound(arrTabsInUsrMain)
		
		Select Case arrTabsInUsrMain(iLoop)
			Case arrTabsInUsrMain(0)
				Set wtblHdr = wtblHdrActUsrUM
				Set wtblData = wtblDataActUsrUM
				arrTblCols = arrTblColsActUsrUM
				sSheetName = "StatChngActToInact"
			Case arrTabsInUsrMain(1) 
				Set wtblHdr = wtblHdrInactUsrUM
				Set wtblData = wtblDataInactUsrUM
				arrTblCols = arrTblColsInactUsrUM
				sSheetName = "StatChngInactToAct"
		End Select

	'	Selecting the required tab in 'User Maintenance' screen
		funSelTabInUserMain arrTabsInUsrMain(iLoop)
					
	'	Filtering the record
		funSetFilterInAdmin wedtFltrUM, wbtnFltrUM, sUserSSO

	'	Getting the count of records from the table
		iTblRecCount = funGetTotlRecInTable(welPgsPgtnUM, wtblData)
		
	'	Checking if any record appears?
		If iTblRecCount > 0 Then
				
		'	Sorting the records in ascending order of 'SSO' column
			funSortTblCols wtblHdr, arrTblCols(3), arrSortType(0)	
			
		'	Getting the 'SSO' for the first record in the table
			sSSOFstRec = funGetDataFromTblInAdmin(wtblData, wtblHdr, arrTblCols(3), 2)
			
		'	Checking if the required record exists in the selected tab?
			If Trim(sSSOFstRec) = Trim(sUserSSO) Then
				
			'	Checking if the record is having the required status or not?
				If Trim(arrTabsInUsrMain(iLoop)) <> Trim(sSectionName) Then
					
				'	Changing the status	of the record
					funChkStatusChngUserMain sSheetName	
				Else
					funHTMLResult "Pass", "Check existence of record having SSO : " & sUsrSSO, "Successfully checked that record having SSO : " & sUsrSSO & " exists under '" & sSectionName & "' tab." 				
				End If
				
			'	Setting the Users' SSO as output of functiona and exiting from the function as record is searched with proper status
				funChngRecStatusUsrMain = sUserSSO
				Exit Function		
			End If
		End If
	Next
	
'	Handing the condition if the record is not present under any tab
	funHTMLResult "Fail", "Check existence of record having SSO : " & sUsrSSO, "Failed as no record exists having SSO : " & sUsrSSO
	ExitTest
End Function


'*******************************************************************************************************************
'  Function Name	   	:   funChkChrLmtInUsrMain
'  Function Description :   Function for checking the character limit of fields in 'Add New User/Edit User' window of User Maintenance screen
'  Function Parameters  :	None
'  Date Created      	:   17th Apr, 2017
'  Author               :  	Karan Mehta
'  Last modified  on    :  	
'*******************************************************************************************************************
Public Function funChkChrLmtInUsrMain(ByVal sWindow)

Dim bSheetExist 'Reference variable for checking the existence of TestData sheet

	Select Case sWindow
		Case arrWinNameUM(0)
		
		'	Clicking on 'Add User' link
			funClickObject wlnkAddUsrActUsrUM, "'Add User' link"
			
		'	Checking the existence of elements in 'Add New User' window
			funChkElementsInAddUsrWinUM()
			
		'	Setting the objects
			Set welWindow = welAddUsrWinActUM
			Set wedUsrName = wedNameAddUsrWinActUM
			Set wedSSO = wedSSOAddUsrWinActUM
			Set wbtnCncl = wbtnCnclAddUsrWinActUM
		
		Case Else
		'	Checking the filter functionality. Filtering the record with valid 'SSO'
			funFltrUsrInUsrMain sSrchSheetUM, "SSO"
		
		'	Checking if 'Edit User' or 'Copy User' window needs to be opened?
		'	Setting the objects of the elements based on the window opened
			If sWindow = arrWinNameUM(1) Then
				Set welIcon = welFstEdtUsrActUsrUM
				Set welWindow =  welEdtUsrWinActUM
				Set wedUsrName = wedNameEdtUsrWinActUM
				Set wedSSO = wedSSOEdtUsrWinActUM
				Set wbtnCncl = wbtnCnclEdtUsrWinActUM
				sIcon = "'Edit User' icon"
			Else
				Set welIcon = welFstCpyUsrActUsrUM
				Set welWindow = welCpyUsrWinActUM
				Set wedUsrName = wedNameCpyUsrWinActUM
				Set wedSSO = wedSSOCpyUsrWinActUM
				Set wbtnCncl = wbtnCnclCpyUsrWinActUM
				sIcon = "'Copy User' icon"
			End If
			
		'	Clicking on icon of first record to open the required window
			funClickObject welIcon, sIcon & " for first record"
			
		'	Checking the existence of window
			bFlag = funObjectIsPresent(welWindow, "'" & sWindow & "' window", 20)
			If bFlag = False Then
				ExitTest
			End If
	End Select

'	Getting the random 'User Name' having 50 characters
	sUsrName = GetRandomString("A", 50, "C")
	
'	Verifying that the 'User Name' field accepts max of 50 characters
	funVerifygetROProperty wedUsrName, "Maximum length of 'User Name' field", "max length", 50

'	Entering string length of 50 characters in 'User Name' field and checking if the field accepts the string
	funSetValueInEditBox wedUsrName, "'User Name' with 50 characters", sUsrName
	funVerifygetROProperty wedUsrName, "entering 50 characters in 'User Name' field", "value", sUsrName

'	Getting the random 'SSO' having 20 characters
	sSSO = RandomNumber(1,9) & GetRandomString("N", 19, "U")
	
'	Verifying that the 'SSO' field accepts max of 20 characters
	funVerifygetROProperty wedSSO, "Maximum length of 'SSO' field", "max length", 20
	
'	Entering string length of 20 characters in 'SSO' field and checking if the field accepts the string
	funSetValueInEditBox wedSSO, "'SSO' field with 20 characters", sSSO
	funVerifygetROProperty wedSSO, "entering 20 characters in 'SSO' field", "value", sSSO
	
'	Clicking on the Cancel button of the window
	funClickObject wbtnCncl, "'Cancel' button"
	funCheckElementDisappearance welWindow, "'" & sWindow & "' window"
End Function


'*******************************************************************************************************************
'  Function Name	   	:   funFltrUsrInUsrMain
'  Function Description :   Function for setting the filter in 'User Maintenance' screen
'  Function Parameters  :	sSheetName = TestData Sheet Name, sColName = Column Name where TestData is to be fetched
'  Date Created      	:   18th Apr, 2017
'  Author               :  	Karan Mehta
'  Last modified  on    :  	
'*******************************************************************************************************************
Public Function funFltrUsrInUsrMain(ByVal sSheetName, ByVal sColName)
	
'	Checking the existence of TestData sheet
	CheckSheetExistence sTDFileUM, sSheetName, bSheetExist
	If bSheetExist = False Then
		funHTMLResult "Fail", "Check existence of TestData sheet", "Failed as TestData sheet : " & sSheetName & " doesn't exists in file placed at path : " & sTDFileUM
		ExitTest
	End If
	
'	Getting the name of selected tab in 'User Maintenance' screen
	sSelTab = funFetchROProperty(wlnkSelTabInUM, "default tab", "innertext")
	sSelTab = Trim(sSelTab)
	
'	Setting the objects based on selected tab
	If sSelTab = arrTabsInUsrMain(0) Then
		Set wtblHdr = wtblHdrActUsrUM
		Set wtblData = wtblDataActUsrUM
		sTblColName = arrTblColsActUsrUM(3)
	Else
		Set wtblHdr = wtblHdrInactUsrUM
		Set wtblData = wtblDataInactUsrUM
		sTblColName = arrTblColsInactUsrUM(3)		
	End If
		
'	Adding the sheet in the DataTable and importing the contents in the sheet
	DataTable.AddSheet sSheetName
	DataTable.ImportSheet sTDFileUM, sSheetName, sSheetName
	
'	Getting the valid SSO from the TestData sheet
	sSSOValid = DataTable.GetSheet(sSheetName).GetParameter(sColName).Value

'	Searching the record by setting the filter
	funSetFilterInAdmin wedtFltrUM, wbtnFltrUM, sSSOValid
	
'	Getting the count of actual filtered records
	iFilterRecCntAct = funGetTblPgRecCount(wtblData)

'	Getting the count of expected filtered records			
	iFilterRecCntExp = funGetFltrRecCntPerPg(sUsrMainScr, sTblColName, sSSOValid)

'	Checking if filter functionality working fine
	If iFilterRecCntExp = iFilterRecCntAct Then
		funHTMLResult "Pass", "Check filter functionality on column : " & sTblColName & " when " & sSSOValid & " string is used", "Successfully checked that filter is working fine. Expected Count : " & iFilterRecCntExp & " & Actual Count : " & iFilterRecCntAct
	Else
		funHTMLResult "Fail", "Check filter functionality on column : " & sTblColName & " when " & sSSOValid & " string is used", "Failed as filter is not working fine. Expected Count : " & iFilterRecCntExp & " & Actual Count : " & iFilterRecCntAct
	End If	
	
'	Checking if any record exists?
	If iFilterRecCntAct > 0 Then
		
	'	Sorting the records in 'Ascending' order of 'SSO' column
		funSortTblCols wtblHdr, sTblColName, arrSortType(0)
		
	'	Getting the 'SSO' of the first record
		sFstRecSSO = funGetDataFromTblInAdmin(wtblData, wtblHdr, sTblColName, 2)
		
	'	Checking if the record is displayed at the top
		If Trim(sFstRecSSO) = Trim(sSSOValid) Then
			funHTMLResult "Pass", "Check if record appears on top if sorting is done on 'SSO' column in ascending order", "Successfully checked that record appears on top. Expected SSO : " & sSSOValid & " & Actual SSO : " & sFstRecSSO 
		Else
			funHTMLResult "Fail", "Check if record appears on top if sorting is done on 'SSO' column in ascending order", "Failed as record doesn't appears on top. Expected SSO : " & sSSOValid & " & Actual SSO : " & sFstRecSSO
		End If
	Else
		funHTMLResult "Fail", "Filter record having SSO : " & sSSOValid, "Failed as record having SSO: " & sSSOValid & " does not exists."
		ExitTest
	End If
End Function


'*******************************************************************************************************************
'  Function Name	   	:   funChkEdtUsrFuncInUsrMain
'  Function Description :   Function for checking the 'Edit User' functionality in 'User Maintenance' screen
'  Function Parameters  :	None
'  Date Created      	:   18th Apr, 2017
'  Author               :  	Karan Mehta
'  Last modified  on    :  	
'*******************************************************************************************************************
Public Function funChkEdtUsrFuncInUsrMain()
	
Dim iLoop, iLoop1 'Reference variable for iteration
Dim bSheetExist 'Reference variable for checking the TestData sheet existence
Dim iRecCountSheet 'Reference variable for getting the count of records in the TestData sheet
Dim sActUserSSO 'Reference variable for getting the Active User's SSO
Dim sNameBef, sNameAft, sSSOBef, sSSOAft 'Reference variables for getting the value of 'Name' and 'SSO' fields before and after editing operation

arrColsTDSheet = Array("Name", "SSO", "BtnSave", "BtnCncl", "bValidation") 'Array for storing the 'TestData' sheet column names

'	Getting the 'Name' and 'SSO' of selected record before editing
	sNameBef = funGetDataFromTblInAdmin(wtblDataActUsrUM, wtblHdrActUsrUM, arrTblColsActUsrUM(2), 2)
	sSSOBef = funGetDataFromTblInAdmin(wtblDataActUsrUM, wtblHdrActUsrUM, arrTblColsActUsrUM(3), 2)

'	Checking the existence of the sheet containing TestData
	CheckSheetExistence sTDFileUM, sEdtFuncSheetUM, bSheetExist
	If bSheetExist = False Then
		funHTMLResult "Fail", "Check Sheet Existence", "Failed as Test Data sheet " & sEdtFuncSheetUM & " does not exists in file stored at path " & sTDFileUM
		ExitTest
	End If
	
'	Adding the Sheet and importing the TestData sheet
	DataTable.AddSheet sEdtFuncSheetUM
	DataTable.ImportSheet sTDFileUM, sEdtFuncSheetUM, sEdtFuncSheetUM
	Set objDTSheet = DataTable.GetSheet(sEdtFuncSheetUM)
	
'	Getting the count of records in the TestData sheet
	iRecCountSheet = objDTSheet.GetRowCount
	
'	Loop for checking the 'Add' functionality
	For iLoop = 1 To iRecCountSheet
	
	'	Setting the row in the sheet
		objDTSheet.SetCurrentRow iLoop
		
	'	Checking the existence of 'Edit User' window
		bFlag = funCheckElementExistence(welEdtUsrWinActUM, 3)
		If bFlag = False Then
				
		'	Clicking 'Edit User' link for first record in the table
			funClickObject welFstEdtUsrActUsrUM, "'Edit User' link"
		
		'	Checking the existence of 'Edit User' window
			bFlag = funObjectIsPresent(welEdtUsrWinActUM, "'Edit User' window", 20)
			If bFlag = False Then
				ExitTest
			End If
		End If
	
	'	Loop for getting the TestData for selected column in TestData sheet
		For iLoop1 = 0 To UBound(arrColsTDSheet)
		
		'	Getting the value of selected column
			sValue = objDTSheet.GetParameter(arrColsTDSheet(iLoop1)).Value
			
		'	Checking the condition in TestData sheet and performing the action accordingly
			Select Case arrColsTDSheet(iLoop1)
		
				Case "Name"
				
				'	Checking if Random value needs to be entered
				'	If Yes, getting the random string and editing the field
					If sValue = "GET_RANDOM_DATA" Then
						sNameEdt = GetRandomString("A", 10, "C")
					Else
						sNameEdt = sValue
					End If
				
				'	Entering the value for 'Full Name' field
					funSetValueInEditBox wedNameEdtUsrWinActUM, "'Full Name' field", sNameEdt
				Case "SSO"
				
				'	Checking if unique data needs to be entered in the field?
				'	If Yes, enter the unique data, else, put the value directly from the TestData sheet
					If sValue = "GET_UNIQUE_DATA" Then
						funGetUniqueDataForUM arrWinNameUM(1), arrFldsEdtUsrUM(1)
					Else
						funSetValueInEditBox wedSSOEdtUsrWinActUM, "'SSO' field", sValue
					End If
				Case "BtnSave"
					Select Case sValue
						Case "DISABLE"
						
						'	Waiting for the value to be set in the field and checking if 'Save' button is disabled
							Wait(2)
							funVerifygetROProperty wbtnSaveEdtUsrWinActUM, "'Save' button", "disabled", 1
						Case "CLICK"
						
						'	Clicking on the 'Save' button and waiting till the loading image gets disappeared
							funClickObject wbtnSaveEdtUsrWinActUM, "'Save' button"
							funWaitForLoadImgToDispr welLoadIconUM
							
						'	Getting the 'Name' and 'SSO' of selected record after editing
							sNameAft = funGetDataFromTblInAdmin(wtblDataActUsrUM, wtblHdrActUsrUM, arrTblColsActUsrUM(2), 2)
							sSSOAft = funGetDataFromTblInAdmin(wtblDataActUsrUM, wtblHdrActUsrUM, arrTblColsActUsrUM(3), 2)
							
						'	Checking if editing is performed as 'Save' button is clicked
							If (Trim(sNameEdt) = Trim(sNameAft)) AND (Trim(sSSOBef) <> Trim(sSSOAft)) Then
								funHTMLResult "Pass", "Check record editing on clicking 'Save' button", "Successfully checked that record is edited. Expected Name : " & sNameEdt & " & Actual Name : " & sNameAft & ", SSO Before : " & sSSOBef & " & SSO After : " & sSSOAft
							Else
								funHTMLResult "Fail", "Check record editing on clicking 'Save' button", "Failed as record is not edited. Expected Name : " & sNameEdt & " & Actual Name : " & sNameAft & ", SSO Before : " & sSSOBef & " & SSO After : " & sSSOAft
							End If
							
						'	Inactivating the first record
							funInactFstRecInUsrMain()
					End Select
				Case "BtnCncl"
					If sValue = "CLICK" Then
					
					'	Clicking on 'Cancel' button and verify that 'Edit User' window is closed
						funClickObject wbtnCnclEdtUsrWinActUM, "'Cancel' button"
						funCheckElementDisappearance welEdtUsrWinActUM, "'Edit User' window"
						
					'	Getting the 'Name' and 'SSO' of selected record after editing
						sNameAft = funGetDataFromTblInAdmin(wtblDataActUsrUM, wtblHdrActUsrUM, arrTblColsActUsrUM(2), 2)
						sSSOAft = funGetDataFromTblInAdmin(wtblDataActUsrUM, wtblHdrActUsrUM, arrTblColsActUsrUM(3), 2)	
							
					'	Checking if editing is performed as 'Cancel' button is clicked
						If (Trim(sNameBef) = Trim(sNameAft)) AND (Trim(sSSOBef) = Trim(sSSOAft)) Then
							funHTMLResult "Pass", "Check record editing on clicking 'Cancel' button", "Successfully checked that record is not edited. Name Before : " & sNameBef & " & Name After : " & sNameAft & ", SSO Before : " & sSSOBef & " & SSO After : " & sSSOAft
						Else
							funHTMLResult "Fail", "Check record editing on clicking 'Cancel' button", "Failed as record is edited. Name Before : " & sNameBef & " & Name After : " & sNameAft & ", SSO Before : " & sSSOBef & " & SSO After : " & sSSOAft
						End If
					End If
				Case "bValidation"
				
				'	Checking if the validation for duplicate SSO needs to be checked?
					If sValue = "TRUE" Then
					
					'	Checking the existence of validation message for using duplicate SSO
						funObjectIsPresent welValMsgExstSSOEdtUsrWinActUM, "validation message for using duplicate SSO", 10
					End If
			End Select
		Next
	Next
End Function


'*******************************************************************************************************************
'  Function Name	   	:   funChkCopyUsrFuncInUsrMain
'  Function Description :   Function for checking the 'Copy User' functionality in 'User Maintenance' screen
'  Function Parameters  :	sSheetName = Sheet Name containing the TestData to check the functionality
'  Date Created      	:   20th Apr, 2017
'  Author               :  	Karan Mehta
'  Last modified  on    :  	
'*******************************************************************************************************************
Public Function funChkCopyUsrFuncInUsrMain(ByVal sSheetName)

Dim iLoop, iLoop1 'Reference variable for iteration
Dim bSheetExist 'Reference variable for checking the TestData sheet existence
Dim iRecCountSheet 'Reference variable for getting the count of records in the TestData sheet
Dim sActUserSSO 'Reference variable for getting the Active User's SSO
Dim sNameBef, sNameAft, sSSOBef, sSSOAft 'Reference variables for getting the value of 'Name' and 'SSO' fields before and after editing operation

arrColsTDSheet = Array("Name", "SSO", "BtnSave", "BtnCncl", "bValidation") 'Array for storing the 'TestData' sheet column names

'	Checking the existence of the sheet containing TestData
	CheckSheetExistence sTDFileUM, sSheetName, bSheetExist
	If bSheetExist = False Then
		funHTMLResult "Fail", "Check Sheet Existence", "Failed as Test Data sheet : " & sSheetName & " does not exists in file stored at path : " & sTDFileUM
		ExitTest
	End If
	
'	Getting the count of records in the table
	iTblRecCntBef = funGetTotlRecInTable(welPgsPgtnUM, wtblDataActUsrUM)
	
'	Adding the Sheet and importing the TestData sheet
	DataTable.AddSheet sSheetName
	DataTable.ImportSheet sTDFileUM, sSheetName, sSheetName
	Set objDTSheet = DataTable.GetSheet(sSheetName)
	
'	Getting the count of records in the TestData sheet
	iRecCountSheet = objDTSheet.GetRowCount
	
'	Loop for checking the 'Copy User' functionality
	For iLoop = 1 To iRecCountSheet
	
	'	Setting the row in the sheet
		objDTSheet.SetCurrentRow iLoop
		
	'	Checking the existence of 'Copy User' window
		bFlag = funCheckElementExistence(welCpyUsrWinActUM, 3)
		If bFlag = False Then
		
		'	Checking the filter functionality. Filtering the record with valid 'SSO'	
			funFltrUsrInUsrMain sSrchSheetUM, "SSO"
				
		'	Clicking 'Copy User' link for first record in the table
			funClickObject welFstCpyUsrActUsrUM, "'Copy User' link"
		
		'	Checking the existence of 'Copy User' window
			bFlag = funObjectIsPresent(welCpyUsrWinActUM, "'Copy User' window", 20)
			If bFlag = False Then
				ExitTest
			End If
		End If
		
	'	Loop for getting the TestData for selected column in TestData sheet
		For iLoop1 = 0 To UBound(arrColsTDSheet)
		
		'	Getting the value of selected column
			sValue = objDTSheet.GetParameter(arrColsTDSheet(iLoop1)).Value
			
		'	Checking the condition in TestData sheet and performing the action accordingly
			Select Case arrColsTDSheet(iLoop1)
		
				Case "Name"
			
				'	Entering the value for 'Full Name' field
					funSetValueInEditBox wedNameCpyUsrWinActUM, "'Full Name' field", sValue
				Case "SSO"
				
				'	Checking if unique data needs to be entered in the field?
				'	If Yes, enter the unique data, else, put the value directly from the TestData sheet
					If sValue = "GET_UNIQUE_DATA" Then
						funGetUniqueDataForUM arrWinNameUM(2), arrFldsCpyUsrUM(1)
					Else
						funSetValueInEditBox wedSSOCpyUsrWinActUM, "'SSO' field", sValue
					End If
				Case "BtnSave"
					Select Case sValue
						Case "DISABLE"
						
						'	Waiting for the value to be set in the field and checking if 'Save' button is disabled
							Wait(2)
							funVerifygetROProperty wbtnSaveCpyUsrWinActUM, "'Save' button", "disabled", 1
						Case "CLICK"
						
						'	Getting the 'SSO' of the user
							sUsrSSO = funFetchROProperty(wedSSOCpyUsrWinActUM, "'SSO' field", "value")
						
						'	Clicking on the 'Save' button and waiting till the loading image gets disappeared
							funClickObject wbtnSaveCpyUsrWinActUM, "'Save' button"
							funWaitForLoadImgToDispr welLoadIconUM
							
						'	Clears the applied filter
							funClearFltrInAdmin wedtFltrUM, wbtnFltrUM
							
						'	Getting the count of records in the table
							iTblRecCntAft = funGetTotlRecInTable(welPgsPgtnUM, wtblDataActUsrUM)
						
						'	Checking that the record is not added as 'Save' button is clicked	
							If iTblRecCntAft = (iTblRecCntBef + 1) Then
								funHTMLResult "Pass", "Check copying record on clicking 'Save' button", "Successfully checked that record is copied. Expected Count : " & (iTblRecCntBef+1) & " & Actual Count : " & iTblRecCntAft
							Else
								funHTMLResult "Fail", "Check copying record on clicking 'Save' button", "Failed as record is not copied. Expected Count : " & (iTblRecCntBef+1) & " & Actual Count : " & iTblRecCntAft
								ExitTest
							End If
							
						'	Adding the user's 'SSO' in the TestData sheet
							funWriteInExcel sTDFileUM, sUserInfoSheetUM, 2, sUsrSSOCol, "'" & sUsrSSO
							
						'	Setting the 'SSO' of the newly added user as output of the function
							funChkCopyUsrFuncInUsrMain = sUsrSSO
					End Select
				Case "BtnCncl"
					If sValue = "CLICK" Then
					
					'	Clicking on 'Cancel' button and verify that 'Copy User' window is closed
						funClickObject wbtnCnclCpyUsrWinActUM, "'Cancel' button"
						funCheckElementDisappearance welCpyUsrWinActUM, "'Copy User' window"
						
					'	Clears the applied filter
						funClearFltrInAdmin wedtFltrUM, wbtnFltrUM
						
					'	Getting the count of records in the table
						iTblRecCntAft = funGetTotlRecInTable(welPgsPgtnUM, wtblDataActUsrUM)
						
					'	Checking that the record is not added as 'Cancel' button is clicked	
						If iTblRecCntAft = iTblRecCntBef Then
							funHTMLResult "Pass", "Check copying record on clicking 'Cancel' button", "Successfully checked that record is not copied. Expected Count : " & iTblRecCntBef & " & Actual Count : " & iTblRecCntAft
						Else
							funHTMLResult "Fail", "Check copying record on clicking 'Cancel' button", "Failed as record is copied. Expected Count : " & iTblRecCntBef & " & Actual Count : " & iTblRecCntAft
						End If
					End If
				Case "bValidation"
				
				'	Checking if the validation for duplicate SSO needs to be checked?
					If sValue = "TRUE" Then
					
					'	Checking the existence of validation message for using duplicate SSO
						funObjectIsPresent welValMsgExstSSOCpyUsrWinActUM, "validation message for using duplicate SSO", 10
					End If
			End Select
		Next
	Next

End Function


'*******************************************************************************************************************
'  Function Name	   	:   funClearFltrInAdmin
'  Function Description :   Function for clearing the applied filter in Administration module
'  Function Parameters  :	objFltr = Object for filter field, objBtnSrchFltr = Search button in filter field
'  Date Created      	:   20th Apr, 2017
'  Author               :  	Karan Mehta
'  Last modified  on    :  	
'*******************************************************************************************************************
Public Function funClearFltrInAdmin(ByVal objFltr, ByVal objBtnSrchFltr)
	
'	Removing the filter
	funSetValueInEditBox objFltr, "'Filter' field", ""
	
'	Clicking on the 'Search' button in the filter	
	funClickObject objBtnSrchFltr, "'Search' button in filter"
	Wait(2)
End Function


'*******************************************************************************************************************
'  Function Name	   	:   funChkPrmsnCpyUsrInUsrMain
'  Function Description :   Function for checking the permissions while performing 'Copy User' functionality in 'User Maintenance' screen
'  Function Parameters  :	NA
'  Date Created      	:   21st Apr, 2017
'  Author               :  	Karan Mehta
'  Last modified  on    :  	
'*******************************************************************************************************************
Public Function funChkPrmsnCpyUsrInUsrMain()

Dim iLoop 'Reference variable for iteration
Dim iRecCountSheet 'Reference variable for getting the count of records in the TestData sheet
Dim bSheetExist 'Reference variable for checking the sheet existence

'	Checking the existence of TestData sheet
	CheckSheetExistence sTDFileUM, sSrchSheetUM, bSheetExist
	If bSheetExist = False Then
		funHTMLResult "Fail", "Check Sheet Existence", "Failed as Test Data sheet : " & sSrchSheetUM & " does not exists in file stored at path : " & sTDFileUM
		ExitTest
	End If
	
'	Adding a new sheet in DataTable and importing the contents TestData sheet
	DataTable.AddSheet sSrchSheetUM
	DataTable.ImportSheet sTDFileUM, sSrchSheetUM, sSrchSheetUM
	Set objDTSheet = DataTable.GetSheet(sSrchSheetUM)
	
'	Getting the User's SSO
	sUsrSSO = objDTSheet.GetParameter("SSO").Value
	
'	Filtering the newly created record and checking if record appears on top when sorted by 'SSO' in 'Ascending' order
	funSetSSOFltrInUM arrTabsInUsrMain(0), sUsrSSO
	
'	Open 'Manage Groups' window for the selected record
	funSelSetSecInUsrMain arrTabsInUsrMain(0), arrOptnsSetUsrMain(0)
	
'	Getting the count of records available under 'selected Groups' section
	iRecCountSelSecExp = funGetRecCntInMngGrpAndCGWin(arrOptnsSetUsrMain(0), arrSecMngGrpWin(1), "//input")
	ReDim arrSelGrp(iRecCountSelSecExp-1)
	
'	Loop for getting the name of records available under 'selected Groups' section
	For iLoop = 0 To (iRecCountSelSecExp-1)
	
	'	Setting the object for getting the name of the record in 'Selected Groups' section
		Set welRecSelGrp = welSelGrpSecMGWinUM.WebElement("xpath:=//h5[normalize-space(.)='Selected Groups']/following-sibling::div[@id='GroupListCheckBox']/label[" & (iLoop+1) & "]")
	
	'	Getting the item name and removing '*' if present in name
		arrSelGrp(iLoop) = Trim(funFetchROProperty(welRecSelGrp, "record in 'Selected Group' section", "innertext"))
	Next
	
'	Clicking on the 'Cancel' button
	funClickObject wbtnCnclMGWinUM, "'Cancel' button"
	funCheckElementDisappearance welMGWinUM, "'Manage Groups' window"
	
'	Clearing the filter
	funClearFltrInAdmin wedtFltrUM, wbtnFltrUM

'	Copying the user
	sUsrSSO = funChkCopyUsrFuncInUsrMain(sCpyUsrSheetUM)

'	Filtering the newly created record
	funSetSSOFltrInUM arrTabsInUsrMain(0), sUsrSSO
	
'	Opening the 'Manage Groups' window
	funSelSetSecInUsrMain arrTabsInUsrMain(0), arrOptnsSetUsrMain(0)
	
'	Creating the Description object and setting the properties to fetch the details for records in 'Selected Groups' section
	Set objDesc = Description.Create
	objDesc("micClass").value = "WebElement"
	objDesc("xpath").value = "//label[@ng-repeat='userGroup in userGroups']"
	
'	Setting the object for records in 'Selected Groups' section
	Set objChild = welMngGrpWinActUM.ChildObjects(objDesc)
	
'	Getting the count of records in the 'Selected Groups' section
	iSelGrpCnt = objChild.Count
	
'	Checking if required groups are copied?
	If iSelGrpCnt = iRecCountSelSecExp Then
		funHTMLResult "Pass", "Match count of records in 'Selected Groups' section", "Successfully matched the count. Expected Count : " & iRecCountSelSecExp & " & Actual Count : " &  iSelGrpCnt
	Else
		funHTMLResult "Fail", "Match count of records in 'Selected Groups' section", "Failed as the count is not matching. Expected Count : " & iRecCountSelSecExp & " & Actual Count : " &  iSelGrpCnt
		ExitTest
	End If
	
'	Checking if the 'Groups' information of copied record is same as parent record
	For iLoop = 0 To (iRecCountSelSecExp-1)
		
	'	Setting the object of the 'Group' in the 'Selected Groups' section
		Set welElement = welMngGrpWinActUM.WebElement("xpath:=//label[@ng-repeat='userGroup in userGroups'][normalize-space(.)='" & arrSelGrp(iLoop) & "']")
		
	'	Checking if the required group is present in 'Selected Groups' section
		funObjectIsPresent welElement, "'" & sGrpName & "' group", 5
	Next
	
'	Clicking on the 'Cancel' button in 'Manage Groups' window
	funClickObject wbtnCnclMGWinUM, "'Cancel' button"
	funCheckElementDisappearance welMGWinUM, "'Manage Groups' window"
End Function


'*******************************************************************************************************************
'  Function Name	   	:   funSelSetSecInUsrMain
'  Function Description :   Function for opening the screen for item under 'Settings' option for first record in 'User Maintenance' screen
'  Function Parameters  :	sTabName = Tab to be selected, sOption = Item to be selected under 'Settings' option for first record
'  Date Created      	:   21st Apr, 2017
'  Author               :  	Karan Mehta
'  Last modified  on    :  	
'*******************************************************************************************************************
Public Function funSelSetSecInUsrMain(ByVal sTabName, ByVal sOption)

	Select Case sTabName
		Case arrTabsInUsrMain(0)
		
			Select Case sOption
				Case arrOptnsSetUsrMain(0)
					Set welIcon = welMngGrpFstRecActUsrUM
					Set welWindow = welMGWinUM
				Case arrOptnsSetUsrMain(1) 
					Set welIcon = welMngClntFstRecActUsrUM
					Set welWindow = welMngClntWinUM
				Case arrOptnsSetUsrMain(2)
					Set welIcon = welMCGFstRecActUsrUM
					Set welWindow = welMCGWinUM
				Case arrOptnsSetUsrMain(3)
					Set welIcon = welMngDOALmtFstRecActUsrUM
					Set welWindow = welMngDOALmtWinActUM
			End Select
			
		Case arrTabsInUsrMain(1)
			Select Case sOption
				Case arrOptnsSetUsrMain(0)
					Set welIcon = welMngGrpFstRecInactUsrUM
					Set welWindow = welMGWinUM
				Case arrOptnsSetUsrMain(1)
					Set welIcon = welMngClntFstRecInactUsrUM
					Set welWindow = welMngClntWinUM
				Case arrOptnsSetUsrMain(2)
					Set welIcon = welMCGFstRecInactUsrUM
					Set welWindow = welMCGWinUM
				Case arrOptnsSetUsrMain(3)
					Set welIcon = welMngDOALmtFstRecInactUsrUM
					Set welWindow = welMngDOALmtWinInactUM
			End Select
	End Select

'	Selecting the required tab
	funSelTabInUserMain sTabName
	
'	Clicking on the icon for first record in 'User Maintenance' screen
	funClickObject welIcon, "'" & sOption & "' icon for first record"
	
'	Checking the existence of required section/window
	bFlag = funObjectIsPresent(welWindow, "'" & sOption & "' window/section", 25)
	If bFlag Then
		
	'	Wait for window to open and contents to load
		Wait(5)
	Else
		ExitTest
	End If	
End Function


'*******************************************************************************************************************
'  Function Name	   	:   funChkMngDOALmtFuncInUsrMain
'  Function Description :   Function for checking the 'Manage DOA Limit' functionality in 'User Maintenance' screen
'  Function Parameters  :	sTabName = Tab to be selected
'  Date Created      	:   24th Apr, 2017
'  Author               :  	Karan Mehta
'  Last modified  on    :  	
'*******************************************************************************************************************
Public Function funChkMngDOALmtFuncInUsrMain(ByVal sTabName)

Dim iLoop, iLoop1 'Reference variable for iteration
Dim bSheetExist 'Reference variable for checking the existence of TestData sheet
Dim iRecCountSheet 'Reference variable for getting the count of records from the TestData sheet

arrTDSheetCols = Array("DOA_Type", "DOA_Limit", "Currency", "BtnSave", "BtnCncl", "BtnSync", "bValidation") 'Array for storing the column in TestData sheet for checking 'Manage DOA Limit' functionality
arrFlds = Array("DOA_Type", "DOA_Limit", "Currency")
	
'	Checking the existence of TestData sheet
	CheckSheetExistence sTDFileUM, sMngDOALmtSheetUM, bSheetExist	
	If bSheetExist = False Then
		funHTMLResult "Fail", "Check Sheet Existence", "Failed as Test Data sheet : " & sMngDOALmtSheetUM & " does not exists in file stored at path : " & sTDFileUM
		ExitTest
	End If
	
'	Selecting the user and changing the status as per the requirement
	funChngRecStatusUsrMain sTabName
	
'	Adding the Sheet and importing the TestData sheet
	DataTable.AddSheet sMngDOALmtSheetUM
	DataTable.ImportSheet sTDFileUM, sMngDOALmtSheetUM, sMngDOALmtSheetUM
	Set objDTSheet = DataTable.GetSheet(sMngDOALmtSheetUM)
	
'	Getting the count of records in the TestData sheet
	iRecCountSheet = objDTSheet.GetRowCount
	
'	Setting the objects based on tab selection
	If sTabName = arrTabsInUsrMain(0) Then
		Set welMngDOALmtFstRec = welMngDOALmtFstRecActUsrUM
		Set welMngDOALmtWin = welMngDOALmtWinActUM
		Set wlstDOAType = wlstDOATypeMngDOALmtWinActUM
		Set wedDOALmt = wedDOALmtMngDOALmtWinActUM
		Set wlstCurncy = wlstCurncyMngDOALmtWinActUM
		Set welValDOALmt = welValDOALmtMngDOALmtWinActUM
		Set wbtnSaveMngDOALmtWin = wbtnSaveMngDOALmtWinActUM
		Set wbtnCnclMngDOALmtWin = wbtnCnclMngDOALmtWinActUM
		Set wbtnSyncMngDOALmtWin = wbtnSyncMngDOALmtWinActUM
		Set welLoadSyncMngDOALmtWin = welLoadSyncMngDOALmtWinActUM
	Else
		Set welMngDOALmtFstRec = welMngDOALmtFstRecInactUsrUM
		Set welMngDOALmtWin = welMngDOALmtWinInactUM
		Set wlstDOAType = wlstDOATypeMngDOALmtWinInactUM
		Set wedDOALmt = wedDOALmtMngDOALmtWinInactUM
		Set wlstCurncy = wlstCurncyMngDOALmtWinInactUM
		Set welValDOALmt = welValDOALmtMngDOALmtWinInactUM
		Set wbtnSaveMngDOALmtWin = wbtnSaveMngDOALmtWinInactUM
		Set wbtnCnclMngDOALmtWin = wbtnCnclMngDOALmtWinInactUM
		Set wbtnSyncMngDOALmtWin = wbtnSyncMngDOALmtWinInactUM
		Set welLoadSyncMngDOALmtWin = welLoadSyncMngDOALmtWinInactUM
	End If
	
'	Loop for checking the 'Manage DOA Limit' functionality
	For iLoop = 1 To iRecCountSheet
	
	'	Checking the existence of 'Manage DOA Limit' window
		bFlag = funCheckElementExistence(welMngDOALmtWin, 3)
		If bFlag = False Then

		'	Opening the 'Manage DOA Limit' window
			funSelSetSecInUsrMain sTabName, arrOptnsSetUsrMain(3)
		End If
	
	'	Setting the row in the TestData sheet
		objDTSheet.SetCurrentRow iLoop
		
	'	Loop for getting the data of specified column from TestData sheet
		For iLoop1 = 0 To UBound(arrTDSheetCols)
			
		'	Getting the TestData of specified column
			sValue = objDTSheet.GetParameter(arrTDSheetCols(iLoop1)).Value
			
		'	Performing the functionality based on the conditions set in the sheet for different columns
			Select Case arrTDSheetCols(iLoop1)
				
				Case "DOA_Type"
				
				'	Setting the value for 'DOA Type' dropdown
					funSelectFromList wlstDOAType, "'DOA Type' field", sValue
				Case "DOA_Limit"
				
				'	Getting the random data if it is required
					If sValue = "GET_RANDOM_DATA" Then
						sDOALmt = GetRandomString("N", 2, "U") & "." & GetRandomString("N", 2, "U")
						objDTSheet.GetParameter("DOA_Limit").Value = sDOALmt
					Else
						sDOALmt = sValue
					End If
				
				'	Setting the value for 'DOA Limit' field
					funSetValueInEditBox wedDOALmt, "'DOA Limit' field", sDOALmt
				Case "Currency"
	
				'	Setting the value in the 'Currency' dropdown
					funSelectFromList wlstCurncy, "'Currency' field", sValue
				Case "BtnSave"
					Select Case sValue
						Case "DISABLE"
						
						'	Checking if 'Save' button is disabled
							Wait(2)
							funVerifygetROProperty wbtnSaveMngDOALmtWin, "'Save' button", "disabled", 1
						Case "CLICK"
						
						'	Clicking on the 'Save' button	
							funClickObject wbtnSaveMngDOALmtWin, "'Save' button"
						
						'	Checking if 'Manage DOA Limit' window disappears and waiting for loading to complete
							funCheckElementDisappearance welMngDOALmtWin, "'Manage DOA Limit' window"
							funWaitForLoadImgToDispr welLoadIconUM
							
						'	Setting the user filter
							funFltrUsrInUsrMain sUserInfoSheetUM, sUsrSSOCol
							
						'	Clicking 'Settings >> Manage DOA Limit' link for first record in the table
							funClickObject welMngDOALmtFstRec, "'Settings >> Manage DOA Limit' link"
						
						'	Checking the existence of 'Manage DOA Limit' window
							bFlag = funObjectIsPresent(welMngDOALmtWin, "'Manage DOA Limit' window", 20)
							If bFlag = False Then
								ExitTest
							Else
							'	Waiting for window and fields to load properly
								Wait(3)
							End If
							
						'	Loop for checking if the fields are updated after save operation
							For iLoop2 = 0 To UBound(arrFlds)
							
								Select Case arrFlds(iLoop2)
									Case "DOA_Type"
										Set welField = wlstDOAType
									Case "DOA_Limit"
										Set welField = wedDOALmt
									Case "Currency"
										Set welField = wlstCurncy
								End Select
							
							'	Getting the value in the TestData sheet
								sValSheet = objDTSheet.GetParameter(arrFlds(iLoop2)).Value
								
							'	Checking if the field is showing the correct value
								funVerifygetROProperty welField, arrFlds(iLoop2) & " field", "value", sValSheet
							Next
					End Select
				Case "BtnCncl"
				
				'	Checking if 'Cancel' button needs to be clicked
					If sValue = "CLICK" Then
					
					'	Clicking on the 'Cancel' button and checking if 'Manage DOA Limit' window disappears
						funClickObject wbtnCnclMngDOALmtWinActUM, "'Cancel' button"
						funCheckElementDisappearance welMngDOALmtWin, "'Manage DOA Limit' window"
					End If
				Case "BtnSync"	
					
				'	Checking if 'Active Users' tab is selected in the screen?
					If sTabName = arrTabsInUsrMain(0) Then
					
					'	Checking if 'Click' operation needs to be performed?
						If sValue = "CLICK" Then
						
						'	Clicking on the 'Synchronization' button and waiting for the loading to be completed
							funClickObject wbtnSyncMngDOALmtWin, "'Synchronization' button"
							funWaitForRecToSyncInUM()
							
						'	Clicking on the 'Cancel' button
							funClickObject wbtnCnclMngDOALmtWinActUM, "'Cancel' button"
						End If
					End If	
				Case "bValidation"
				
				'	Checking if validation message needs to be checked
					If sValue = "TRUE" Then
				
					'	Checking the existence of validation message for 'DOA Limit' field
						funObjectIsPresent welValDOALmt, "validation for 'DOA Limit' field", 10				
					End If
			End Select
		Next
	Next
End Function


'*******************************************************************************************************************
'  Function Name	   	:   funChkMngGrpAndCGFunc
'  Function Description :   Function for checking the 'Manage Groups' and 'Manage Client Groups' functionality in 'User Maintenance' screen 
'  Function Parameters  :	sTabName = Tab to be selected, sOption = Option to be selected in 'Settings' icon of selected record
'  Date Created      	:   2nd May, 2017
'  Author               :  	Karan Mehta
'  Last modified  on    :  	
'*******************************************************************************************************************
Public Function funChkMngGrpAndCGFunc(ByVal sTabName, ByVal sOption)

Dim sUsrSSO 'Reference variable for getting the User's SSO

	Select Case sOption
		Case arrOptnsSetUsrMain(0)
			'arrElmnts = arrElmntsMngGrpUM
			sAvailSec = arrSecMngGrpWin(0)
			sSelSec = arrSecMngGrpWin(1)
			Set wcbxSelAllAvail = wcbxSelAllAvGrpMGWinUM
			Set wcbxSelAllSel = wcbxSelAllSelGrpMGWinUM
			Set wcbxFstRecAvail = wcbxFstRecAvGrpMGWinUM
			Set wcbxFstRecSel = wcbxFstRecSelGrpMGWinUM
			Set wbtnAddGrp = wbtnAddGrpMGWinUM
			Set wbtnRemGrp = wbtnRmGrpMGWinUM
			Set wbtnSave = wbtnSaveMGWinUM
			Set wbtnCncl = wbtnCnclMGWinUM
			Set wbtnSync = wbtnSyncMGWinUM
			Set welWindow = welMGWinUM
		Case arrOptnsSetUsrMain(2)
			'arrElmnts = arrElmntsMngClntGrpUM	
			sAvailSec =  arrSecMngClntGrpWin(0)
			sSelSec = arrSecMngClntGrpWin(1)
			Set wcbxSelAllAvail = wcbxSelAllAvCGMCGWinUM
			Set wcbxSelAllSel = wcbxSelAllSelCGMCGWinUM
			Set wcbxFstRecAvail = wcbxFstRecAvCGWinUM
			Set wcbxFstRecSel = wcbxFstRecSelCGWinUM
			Set wbtnAddGrp = wbtnAddGrpMCGWinUM
			Set wbtnRemGrp = wbtnRmGrpMCGWinUM
			Set wbtnSave = wbtnSaveMCGWinUM
			Set wbtnCncl = wbtnCnclMCGWinUM
			Set wbtnSync = wbtnSyncMCGWinUM
			Set welWindow = welMCGWinUM
	End Select

'	Selecting the record in the screen and making it 'Active'/'Inactive' based on requirement	
	sUsrSSO = funChngRecStatusUsrMain(sTabName)
	
'	Opening the window for the selected option under 'Settings' option
	funSelSetSecInUsrMain sTabName, sOption
	
'	Checking the existence of elements in the selected window
	funChkElmntsInMngGrpAndCG sTabName, sOption
	
'	Getting the count of records in the 'Available' and 'Selected' sections
	iAvCGRecCntBef = funGetRecCntInMngGrpAndCGWin(sOption, sAvailSec, "//input")
	iSelCGRecCntBef = funGetRecCntInMngGrpAndCGWin(sOption, sSelSec, "//input")
	
'	Getting the total records available
	iTotlRecCnt = iAvCGRecCntBef + iSelCGRecCntBef
	
'	Checking if any record is present in 'Available' section
	If iAvCGRecCntBef > 0 Then
	
	'	Clicking on the 'Select All' checkbox in 'Available' section
		funSetCheckBox wcbxSelAllAvail, "'Select All' checkbox in '" & sAvailSec & "' section", "ON"
		
	'	Getting the count of records in the 'Available' section for which checkbox is checked
		iAvCGRecCntSel = funGetRecCntInMngGrpAndCGWin(sOption, sAvailSec, "//input[@checked='checked']")
		If iAvCGRecCntSel = iAvCGRecCntBef Then
			funHTMLResult "Pass", "Check functionality of 'Select All' checkbox in '" & sAvailSec & "' section", "Successfully checked that all available records are selected. Expected Count : " & iAvCGRecCntBef & " & Actual Count : " & iAvCGRecCntSel
		Else
			funHTMLResult "Fail", "Check functionality of 'Select All' checkbox in '" & sAvailSec & "' section", "Failed as all available records are not selected. Expected Count : " & iAvCGRecCntBef & " & Actual Count : " & iAvCGRecCntSel
		End If
		
	'	Clicking on the 'Add Group' button
		funClickObject wbtnAddGrp, "'Add Group' button"
		Wait(2)
		
	'	Getting the count of records in the 'Available' and 'Selected' sections
		iAvCGRecCntAft = funGetRecCntInMngGrpAndCGWin(sOption, sAvailSec, "//input")
		iSelCGRecCntAft = funGetRecCntInMngGrpAndCGWin(sOption, sSelSec, "//input")
		
	'	Checking if all records are moved from 'Available' to 'Selected' section
		If (iAvCGRecCntAft = 0) AND (iSelCGRecCntAft = iTotlRecCnt) Then
			funHTMLResult "Pass", "Moving records on clicking 'Select All' and clicking 'Add Group' button", "Successfully checked that all records are moved from 'Available to Selected' section. Available Count Expected : 0, Available Count Actual : " & iAvCGRecCntAft & ", Selected Count Expected : " & iTotlRecCnt & ", Selected Count Actual : " & iSelCGRecCntAft 
		Else
			funHTMLResult "Fail", "Moving records on clicking 'Select All' and clicking 'Add Group' button", "Failed as all records are not moved from 'Available to Selected' section. Available Count Expected : 0, Available Count Actual : " & iAvCGRecCntAft & ", Selected Count Expected : " & iTotlRecCnt & ", Selected Count Actual : " & iSelCGRecCntAft 
		End If
	Else
		funHTMLResult "Done", "Moving records on clicking 'Select All' and clicking 'Add Group' button", "Could not check the functionality as no record exists in '" & sAvailSec & "' section. Actual Count : " & iAvCGRecCntBef
	
	'	Setting the record count in 'Selected' section
	'	Since, no record is present in 'Available' section, so all should be present in 'Selected' section
		iSelCGRecCntAft = iTotlRecCnt
	End If
	
'	Clicking on the 'Select All' checkbox in 'Selected' section
	funSetCheckBox wcbxSelAllSel, "'Select All' checkbox in '" & sSelSec & "' section", "ON"
	
'	Getting the count of records in the 'Selected' section for which checkbox is checked
	iSelCGRecCntSel = funGetRecCntInMngGrpAndCGWin(sOption, sSelSec, "//input[@checked='checked']")
	If iSelCGRecCntSel = iSelCGRecCntAft Then
		funHTMLResult "Pass", "Check functionality of 'Select All' checkbox in '" & sSelSec & "' section", "Successfully checked that all available records are selected. Expected Count : " & iSelCGRecCntAft & " & Actual Count : " & iSelCGRecCntSel
	Else
		funHTMLResult "Fail", "Check functionality of 'Select All' checkbox in '" & sSelSec & "' section", "Failed as all available records are not selected. Expected Count : " & iSelCGRecCntAft & " & Actual Count : " & iSelCGRecCntSel
	End If

'	Clicking on the 'Remove Group' button
	funClickObject wbtnRemGrp, "'Remove Group' button"
	Wait(2)
	
'	Getting the count of records in the 'Available' and 'Selected' sections
	iAvCGRecCntAft = funGetRecCntInMngGrpAndCGWin(sOption, sAvailSec, "//input")
	iSelCGRecCntAft = funGetRecCntInMngGrpAndCGWin(sOption, sSelSec, "//input")
	
'	Checking if all records are moved from 'Selected' to 'Available' section
	If (iSelCGRecCntAft = 0) AND (iAvCGRecCntAft = iTotlRecCnt) Then
		funHTMLResult "Pass", "Moving records on clicking 'Select All' and clicking 'Remove Group' button", "Successfully checked that all records are moved from 'Selected to Available' section. Available Count Expected : " & iTotlRecCnt & ", Available Count Actual : " & iAvCGRecCntAft & ", Selected Count Expected : 0, Selected Count Actual : " & iSelCGRecCntAft 
	Else
		funHTMLResult "Fail", "Moving records on clicking 'Select All' and clicking 'Remove Group' button", "Failed as all records are not moved from 'Selected to Available' section. Available Count Expected : " & iTotlRecCnt & ", Available Count Actual : " & iAvCGRecCntAft & ", Selected Count Expected : 0, Selected Count Actual : " & iSelCGRecCntAft 
	End If
	
'	Clicking on the 'Cancel' button
	funClickObject wbtnCncl, "'Cancel' button"
	funCheckElementDisappearance welWindow, "'" & sOption & "' window"
	
'	Opening the window
	funSelSetSecInUsrMain sTabName, sOption
	
'	Getting the count of records in the 'Available' and 'Selected' sections
	iAvCGRecCntAft = funGetRecCntInMngGrpAndCGWin(sOption, sAvailSec, "//input")
	iSelCGRecCntAft = funGetRecCntInMngGrpAndCGWin(sOption, sSelSec, "//input")
	
'	Checking if the changes are not saved as 'Cancel' button is clicked
	If (iAvCGRecCntBef = iAvCGRecCntAft) AND (iSelCGRecCntBef = iSelCGRecCntAft) Then
		funHTMLResult "Pass", "Check saving of changes on clicking 'Cancel' button", "Successfully checked that changes are not saved. Available Count Expected : " & iAvCGRecCntBef & ", Available Count Actual : " & iAvCGRecCntAft & ", Selected Count Expected : " & iSelCGRecCntBef & ", Selected Count Actual : " & iSelCGRecCntAft
	Else
		funHTMLResult "Fail", "Check saving of changes on clicking 'Cancel' button", "Failed as changes are saved. Available Count Expected : " & iAvCGRecCntBef & ", Available Count Actual : " & iAvCGRecCntAft & ", Selected Count Expected : " & iSelCGRecCntBef & ", Selected Count Actual : " & iSelCGRecCntAft
	End If
	
'	Checking if any record exists in 'Available' section
	If iAvCGRecCntAft > 0 Then
		
	'	Selecting the first record from 'Available Client Groups' section
		funSetCheckBox wcbxFstRecAvail, "first checkbox in 'Available' section", "ON"
		
	'	Clicking on the 'Add Group' button
		funClickObject wbtnAddGrp, "'Add Group' button"
		Wait(2)
		
	'	Getting the count of records in 'Available' and 'Selected Client Groups' section
		iAvCGRecCntAft1 = funGetRecCntInMngGrpAndCGWin(sOption, sAvailSec, "//input")
		iSelCGRecCntAft1 = funGetRecCntInMngGrpAndCGWin(sOption, sSelSec, "//input")
		
	'	Checking if the selected record is moved?
		If (iAvCGRecCntAft1 = iAvCGRecCntAft-1) AND (iSelCGRecCntAft1 = iSelCGRecCntAft+1) Then
			funHTMLResult "Pass", "Moving some records from Available to Selected section", "Successfully moved the selected records. Available Count Expected : " & (iAvCGRecCntAft-1) & ", Available Count Actual : " & iAvCGRecCntAft1 & ", Selected Count Expected : " &( iSelCGRecCntAft+1) & ", Selected Count Actual : " & iSelCGRecCntAft1
		Else
			funHTMLResult "Fail", "Moving some records from Available to Selected section", "Failed to move the selected records. Available Count Expected : " & (iAvCGRecCntAft-1) & ", Available Count Actual : " & iAvCGRecCntAft1 & ", Selected Count Expected : " & (iSelCGRecCntAft+1) & ", Selected Count Actual : " & iSelCGRecCntAft1
		End If
	
	'	Clicking on the 'Save' button and checking if window is closed
		funClickObject wbtnSave, "'Save' button"
		funCheckElementDisappearance welWindow, "'" & sOption & "' window"
		funWaitForLoadImgToDispr welLoadIconUM
	
	'	Checking if 'Active Users' tab is selected in 'User Maintenance' screen?
		If sTabName = arrTabsInUsrMain(0) Then
		
		'	Setting the filter as User's SSO
			funSetSSOFltrInUM sTabName, sUsrSSO
		
		'	Opening the window
			funSelSetSecInUsrMain sTabName, sOption
			
		'	Clicking on the 'Synchronize' button	
			funClickObject wbtnSync, "'Synchronize' button"
			funWaitForRecToSyncInUM()
		End If
		
	'	Setting the filter as User's SSO
		funSetSSOFltrInUM sTabName, sUsrSSO
		
	'	Opening the window
		funSelSetSecInUsrMain sTabName, sOption
		
	'	Getting the count of records in 'Available' and 'Selected' sections
		iAvCGRecCntAft = funGetRecCntInMngGrpAndCGWin(sOption, sAvailSec, "//input")
		iSelCGRecCntAft = funGetRecCntInMngGrpAndCGWin(sOption, sSelSec, "//input")
		
	'	Checking if the changes are reflected
		If (iAvCGRecCntAft1 = iAvCGRecCntAft) AND (iSelCGRecCntAft1 = iSelCGRecCntAft) Then
			funHTMLResult "Pass", "Check if changes are saved on clicking 'Save' button", "Successfully checked that changes are saved. Expected Available Count : " & iAvCGRecCntAft1 & ", Actual Available Count : " & iAvCGRecCntAft & ", Expected Selected Count : " & iSelCGRecCntAft1 & ", Actual Selected Count : " & iSelCGRecCntAft
		Else
			funHTMLResult "Fail", "Check if changes are saved on clicking 'Save' button", "Failed as changes are not saved. Expected Available Count : " & iAvCGRecCntAft1 & ", Actual Available Count : " & iAvCGRecCntAft & ", Expected Selected Count : " & iSelCGRecCntAft1 & ", Actual Selected Count : " & iSelCGRecCntAft
		End If
	Else
		funHTMLResult "Done", "Moving some records from Available to Selected section", "Could not check the functionality as no record exists in '" & sAvailSec & "' section. Actual Count : " & iAvCGRecCntAft
	
	'	Setting the record count in both sections
	'	Since, no record is present in 'Available' section, so all should be present in 'Selected' section
		iAvCGRecCntAft = 0
		iSelCGRecCntAft = iTotlRecCnt
	End If
	
'	Selecting the first record from 'Selected' section
	funSetCheckBox wcbxFstRecSel, "first checkbox in 'Selected' section", "ON"

'	Clicking on the 'Remove Group' button
	funClickObject wbtnRemGrp, "'Remove Group' button"
	Wait(2)
	
'	Getting the count of records in 'Available' and 'Selected' sections
	iAvCGRecCntAft1 = funGetRecCntInMngGrpAndCGWin(sOption, sAvailSec, "//input")
	iSelCGRecCntAft1 = funGetRecCntInMngGrpAndCGWin(sOption, sSelSec, "//input")
	
'	Checking if the selected record is moved?
	If (iAvCGRecCntAft1 = iAvCGRecCntAft+1) AND (iSelCGRecCntAft1 = iSelCGRecCntAft-1) Then
		funHTMLResult "Pass", "Moving some records from Selected to Available section", "Successfully moved the selected records. Expected Available Count : " & (iAvCGRecCntAft+1) & ", Actual Available Count : " & iAvCGRecCntAft1 & ", Expected Selected Count : " & (iSelCGRecCntAft-1) & ", Actual Selected Count : " & iSelCGRecCntAft1
	Else
		funHTMLResult "Fail", "Moving some records from Selected to Available section", "Failed to move the selected records. Expected Available Count : " & (iAvCGRecCntAft+1) & ", Actual Available Count : " & iAvCGRecCntAft1 & ", Expected Selected Count : " & (iSelCGRecCntAft-1) & ", Actual Selected Count : " & iSelCGRecCntAft1
	End If
	
'	Clicking on the 'Save' button and checking if window is closed
	funClickObject wbtnSave, "'Save' button"
	funCheckElementDisappearance welWindow, "'" & sOption & "' window"
	funWaitForLoadImgToDispr welLoadIconUM
	
'	Checking if 'Active Users' tab is selected in 'User Maintenance' screen?
	If sTabName = arrTabsInUsrMain(0) Then
	
	'	Setting the filter as User's SSO and checking if record appears on top if sorted by 'SSO' in Ascending order
		funSetSSOFltrInUM sTabName, sUsrSSO
		
	'	Opening the window
		funSelSetSecInUsrMain sTabName, sOption
		
	'	Clicking on the 'Synchronize' button	
		funClickObject wbtnSync, "'Synchronize' button"
		funWaitForRecToSyncInUM()
	End If
	
'	Setting the filter as User's SSO and checking if record appears on top after sorting by 'SSO' in Ascending order
	funSetSSOFltrInUM sTabName, sUsrSSO
	
'	Opening the window
	funSelSetSecInUsrMain sTabName, sOption
	
'	Getting the count of records in 'Available' and 'Selected' sections
	iAvCGRecCntAft = funGetRecCntInMngGrpAndCGWin(sOption, sAvailSec, "//input")
	iSelCGRecCntAft = funGetRecCntInMngGrpAndCGWin(sOption, sSelSec, "//input")	
	
'	Checking if the changes are reflected
	If (iAvCGRecCntAft1 = iAvCGRecCntAft) AND (iSelCGRecCntAft1 = iSelCGRecCntAft) Then
		funHTMLResult "Pass", "Check if changes are saved on clicking 'Save' button", "Successfully checked that changes are saved. Expected Available Count : " & iAvCGRecCntAft1 & ", Actual Available Count : " & iAvCGRecCntAft & ", Expected Selected Count : " & iSelCGRecCntAft1 & ", Actual Selected Count : " & iSelCGRecCntAft
	Else
		funHTMLResult "Fail", "Check if changes are saved on clicking 'Save' button", "Failed as changes are not saved. Expected Available Count : " & iAvCGRecCntAft1 & ", Actual Available Count : " & iAvCGRecCntAft & ", Expected Selected Count : " & iSelCGRecCntAft1 & ", Actual Selected Count : " & iSelCGRecCntAft
	End If
	
'	Clicking on 'Cancel' button
	funClickObject wbtnCncl, "'Cancel' button"
End Function


'*******************************************************************************************************************
'  Function Name	   	:   funChkElmntsInMngGrpAndCG
'  Function Description :   Function for checking the existence of elements in 'Manage Client Groups' and 'Manage Groups' 
'							windows of 'User Maintenance' screen
'  Function Parameters  :	sOption = Option to be selected in 'Settings' icon of selected record
'  Date Created      	:   2nd May, 2017
'  Author               :  	Karan Mehta
'  Last modified  on    :  	
'*******************************************************************************************************************
Public Function funChkElmntsInMngGrpAndCG(ByVal sTabName, ByVal sOption)
	
Dim iLoop 'Reference variable for iteration	
	
'	Checking if 'Active Users' tab is selected in 'User Maintenance' screen?
	If sTabName = arrTabsInUsrMain(0) Then
		
	'	Checking if 'Manage Groups' or 'Manage Client Groups' window is selected
	'	Setting the elements based on the window selected
		If sOption = arrOptnsSetUsrMain(0) Then
			arrElmnts = arrElmntsMngGrpActUM
		Else
			arrElmnts = arrElmntsMngClntGrpActUM
		End If
	Else
	'	Checking if 'Manage Groups' or 'Manage Client Groups' window is selected
	'	Setting the elements based on the window selected
		If sOption = arrOptnsSetUsrMain(0) Then
			arrElmnts = arrElmntsMngGrpInactUM
		Else
			arrElmnts = arrElmntsMngClntGrpInactUM
		End If
	End If
	
'	Loop for checking the existence of elements in the window	
	For iLoop = 0 To UBound(arrElmnts)
		
	'	Getting the object for the element and checking it's existence in the selected window
		Set welElement = funGetFldObjMngScrUM(sOption, arrElmnts(iLoop))
		funObjectIsPresent welElement, "'" & arrElmnts(iLoop) & "' button/section", 5
	Next
End Function


'*******************************************************************************************************************
'  Function Name	   	:   funGetFldObjMngScrUM
'  Function Description :   Function for getting the selected field object in 'Manage Client Groups' and 'Manage Groups' windows of 'User Maintenance' screen
'  Function Parameters  :	sOption = Window Name , sXPathCbx = Xpath of the records for which coubnt need to be checked
'  Date Created      	:   2nd May, 2017
'  Author               :  	Karan Mehta
'  Last modified  on    :  	
'*******************************************************************************************************************
Public Function funGetFldObjMngScrUM(ByVal sOption, ByVal sFldName)

'	Setting the objects for the element based on setting's option selected
	If sOption = arrOptnsSetUsrMain(0) Then
		Select Case sFldName
			Case "Available Groups"
				Set welElement = welAvGrpSecMGWinUM	'Object for 'Available Groups' section
			Case "Selected Groups"
				Set welElement = welSelGrpSecMGWinUM 'Object for 'Selected Groups' section
			Case "Save"
				Set welElement = wbtnSaveMGWinUM 'Object for 'Save' button
			Case "Cancel"
				Set welElement = wbtnCnclMGWinUM 'Object for 'Cancel' button
			Case "Synchronize"
				Set welElement = wbtnSyncMGWinUM 'Object for 'Synchronize' button
			Case "Remove Group"
				Set welElement = wbtnRmGrpMGWinUM 'Object for 'Remove Group' button
			Case "Add Group"
				Set welElement = wbtnAddGrpMGWinUM 'Object for 'Add Group' button
		End Select	
	Else
		Select Case sFldName
			Case "Available Client Groups"
				Set welElement = welAvCGSecMCGWinUM 'Object for 'Available Client Groups' section
			Case "Selected Client Groups"
				Set welElement = welSelCGSecMCGWinUM 'Object for 'Selected Client Groups' section
			Case "Save"
				Set welElement = wbtnSaveMCGWinUM 'Object for 'Save' button object
			Case "Cancel"
				Set welElement = wbtnCnclMCGWinUM 'Object for 'Cancel' button
			Case "Synchronize"
				Set welElement = wbtnSyncMCGWinUM 'Object for 'Synchronization' button
			Case "Remove Group"
				Set welElement = wbtnRmGrpMCGWinUM 'Object for 'Remove Client Group' button
			Case "Add Group"
				Set welElement = wbtnAddGrpMCGWinUM 'Object for 'Add Client Group' button
		End Select
	End If

'	Setting the object as output of the function
	Set funGetFldObjMngScrUM = welElement
End Function


'*******************************************************************************************************************
'  Function Name	   	:   funGetRecCntInMngGrpAndCGWin
'  Function Description :   Function for getting the count of records in sections available in 'Manage Groups' and 
'							'Manage Client Groups' windows of 'User Maintenance' screen
'  Function Parameters  :	sSecName = Section Name , sXPathCbx = Xpath of the records for which coubnt need to be checked
'  Date Created      	:   3rd May, 2017
'  Author               :  	Karan Mehta
'  Last modified  on    :  	
'*******************************************************************************************************************
Public Function funGetRecCntInMngGrpAndCGWin(ByVal sOption, ByVal sSecName, ByVal sXPathCbx)

	If sOption = arrOptnsSetUsrMain(0) Then
		If sSecName = arrSecMngGrpWin(0) Then
			Set welSection = welAvGrpSecMGWinUM
		Else
			Set welSection = welSelGrpSecMGWinUM
		End If
	Else
		If sSecName = arrSecMngClntGrpWin(0) Then
			Set welSection = welAvCGSecMCGWinUM
		Else
			Set welSection = welSelCGSecMCGWinUM
		End If
	End If
	
'	Creating the 'Description' object and setting the object properties
	Set objDesc = Description.Create
	objDesc("micClass").Value = "WebElement"
	objDesc("xpath").Value = "//h5[normalize-space(.)='" & sSecName & "']/..//div[@id='GroupListCheckBox']" & sXPathCbx

'	Creating the object for records available in the desired section
	welSection.RefreshObject
	Set objChild = welSection.ChildObjects(objDesc)
	
'	Getting the count of records available and setting it as output of function
	funGetRecCntInMngGrpAndCGWin = objChild.Count
End Function


'*******************************************************************************************************************
'  Function Name	   	:   funWaitForRecToSyncInUM
'  Function Description :   Function for waiting till sync is going on and checking if the sync is successful in  'User Maintenance' screen
'  Function Parameters  :	None
'  Date Created      	:   4th May, 2017
'  Author               :  	Karan Mehta
'  Last modified  on    :  	
'*******************************************************************************************************************
Public Function funWaitForRecToSyncInUM()

Dim bFlag 'Reference flag for checking the existence of 'Sync In Progress' element

'	Loop for checking the existence of 'Sync In Progress' element
	Do
	'	Waiting for the loading to happen and checking the existence
		Wait(1)
	
	'	Checking the existence of 'Sync In Progress' element
		bFlag = funCheckElementExistence(welSyncInProgUM, 1)
	Loop While bFlag
						
'	Checking the existence of 'Synchronization Successful' message
	funObjectIsPresent welSyncSuccUM, "'Synchronization Successful' message", 10
	
'	Wait till loading icon disappears
	funWaitForLoadImgToDispr welLoadIconUM
End Function



''''''''''''''''''''''''''''''''''''''''''''''system code functions ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''



'*******************************************************************************************************************
'  Function Name	   	:   funChkSrchInSysCode
'  Function Description :   Function for checking search functionality in 'System Codes' screen
'  Function Parameters  :	None
'  Date Created      	:   23rd Feb, 2017
'  Author               :  	Karan Mehta
'  Last modified  on    :  	
'*******************************************************************************************************************
Public Function funChkSrchInSysCode()
	
Dim bSheetExist 'Reference flag for checking the existence of TestData sheet
Dim iLoop, iLoop1 'Reference variables for iteration

	sColNameTbl = arrTblColsCT(3)
	
'	Getting the count of records available in the table
	iTblRecCount = funGetTotlRecInTable(welPgsPgtnSC, wtblDataCT)
	
'	Checking if no record exists in the table
	If iTblRecCount = 0 Then
		funHTMLResult "Done", "Check records in table", "Could not proceed further as no records exists in the table."
		ExitTest
	End If
	
'	Checking the existence of sheet containing TestData
	CheckSheetExistence sTDFileSC, sCodeTypeSheetSC, bSheetExist
	If bSheetExist = False Then
		ExitTest
	End If
	
'	Importing the TestData sheet and creating the object for TestData sheet
	DataTable.AddSheet sCodeTypeSheetSC
	DataTable.ImportSheet sTDFileSC, sCodeTypeSheetSC, sCodeTypeSheetSC
	Set objDTSheet = DataTable.GetSheet(sCodeTypeSheetSC)
	
'	Getting the invalid 'Code Type' from the TestData sheeet
	sDescInvalid = objDTSheet.GetParameter("Code_Description").Value
	
'	Getting the valid 'Code Type' from the application
	sDescValid = funGetDataFromTblInAdmin(wtblDataCT, wtblHdrCT, sColNameTbl, 2)

'	Loop for getting the TestData
	For iLoop = 1 To 2
	
		If iLoop = 1 Then
			sDesc = sDescInvalid
			
		'	Setting the no. of iterations which needs to be performed
			iFltrItrn = 1
			
		'	Setting the string to be displayed in the results
			sDataType = "invalid "
		Else
		'	Getting the valid 'Code Type' from the table
			sDesc = Trim(sDescValid)
			
		'	Getting the length of the string
			iStrLen = Len(sDesc)
	
		'	Setting the no. of iterations to check filter functionality
			Select Case iStrLen
				Case 0
					iFltrItrn = 0
				Case 1
					iFltrItrn = 1
				Case Else
					iFltrItrn = 2
			End Select
			
		'	Setting the string to be displayed in the results
			sDataType = "valid "
		End If
		
	'	Loop for checking the filter functionality	
		For iLoop1 = 1 To iFltrItrn
		
		'	Setting the string to be set in the filter
			If iLoop1 = 1 Then
				sFltrStr = sDesc	
				sText = "complete string"
			Else
				sFltrStr = Trim(Mid(sDesc, 1, RandomNumber(1, iStrLen-1)))
				sText = "partial string"
			End If
			
		'	Setting the string in the filter
			funSetFilterInAdmin wedtFltrSC, wbtnFltrSC, sFltrStr
			
		'	Getting the count of actual filtered records
			iFilterRecCntAct = funGetTblPgRecCount(wtblDataCT)
			
		'	Getting the count of expected filtered records			
			iFilterRecCntExp = funGetFltrRecCntPerPg(sSysCodeScr, sColNameTbl, sFltrStr)
			
		'	Checking if filter functionality working fine
			If iFilterRecCntExp = iFilterRecCntAct Then
				funHTMLResult "Pass", "Check filter functionality on column : " & sColNameTbl & " when " & sDataType & sText & " is used", "Successfully checked that filter is working fine. Expected Count : " & iFilterRecCntExp & " & Actual Count : " & iFilterRecCntAct
			Else
				funHTMLResult "Fail", "Check filter functionality on column : " & sColNameTbl & " when " & sDataType & sText & " is used", "Failed as filter is not working fine. Expected Count : " & iFilterRecCntExp & " & Actual Count : " & iFilterRecCntAct
			End If
		Next
	Next
End Function


'*******************************************************************************************************************
'  Function Name	   	:   funGetUniqueDataInSysCode
'  Function Description :   Function for getting the unique data for fields in 'System Codes' screen
'  Function Parameters  :	sWinName = Window Name, sFieldName = Field name
'  Date Created      	:   28th Feb, 2017
'  Author               :  	Karan Mehta
'  Last modified  on    :  	
'*******************************************************************************************************************
Public Function funGetUniqueDataInSC(ByVal sWinName, ByVal sFieldName)
	
	Select Case sWinName
		Case arrWinNameSC(0)
			Select Case sFieldName
				Case arrElmntsAddCTSC(0)
					Set welElement = wedCodTypIDAddCTSC
					Set welValMsg = welValMsgCodTypIDAddCTSC
				Case arrElmntsAddCTSC(1)
					Set welElement = wedCodDesAddCTSC
					Set welValMsg = welValMsgCodDescAddCTSC
			End Select
		Case arrWinNameSC(1)
			Select Case sFieldName
				Case arrElmntsEdtCTSC(1)
					Set welElement = wedCodDesEdtCTSC
					Set welValMsg = welValMsgCodDescEdtCTSC
			End Select
		Case arrWinNameSC(2)
			Select Case sFieldName
				Case arrElmntsAddCodeSC(1)
					Set welElement = wedCodeIDAddCodeSC
					Set welValMsg = welValMsgCodIDAddCodeSC
				Case arrElmntsAddCodeSC(2)
					Set welElement = wedCodeAlphaAddCodeSC
					Set welValMsg = welValMsgCodAlfAddCodeSC
			End Select
		Case arrWinNameSC(3)
			Select Case sFieldName
				Case arrElmntsEdtCodeSC(1)
					Set welElement = wedCodeIDEdtCodeSC
					Set welValMsg = welValMsgCodIDEdtCodeSC
				Case arrElmntsEdtCodeSC(2)
					Set welElement = wedCodeAlphaEdtCodeSC
					Set welValMsg = welValMsgCodAlfEdtCodeSC
			End Select
	End Select
	
'	Loop for getting the data which is already not present in the application
	Do
	'	Getting the value to be entered for the field
		Select Case sFieldName
			Case arrElmntsAddCTSC(0)
				sValue = RandomNumber(100000, 999999)
			Case arrElmntsAddCTSC(1), arrElmntsAddCodeSC(2)
				sValue = GetRandomString("A", 10, "C")
			Case arrElmntsAddCodeSC(1)
				sValue = GetRandomString("N", 6, "U")
		End Select
		
	'	Entering the value in the field
		funSetValueInEditBox welElement, "'" & sFieldName & "' field", sValue
		
	'	Checking if Code/Name entered is already present?
		bFlag = funCheckElementExistence(welValMsg, 3)
	Loop While bFlag
	
'	Setting the output of the function
	funGetUniqueDataInSC = sValue
End Function


'*******************************************************************************************************************
'  Function Name	   	:   funChkElementsInSysCodeWin
'  Function Description :   Function for checking the existence of elements in windows of 'System Codes' screen
'  Function Parameters  :	sWinName = Window Name
'  Date Created      	:   28th Feb, 2017
'  Author               :  	Karan Mehta
'  Last modified  on    :  	
'*******************************************************************************************************************
Public Function funChkElementsInSysCodeWin(ByVal sWinName)

Dim iLoop 'Reference variable for iteration

	Select Case sWinName
		Case arrWinNameSC(0)
			Set welWindow = welAddCodeTypeWinSC
			arrFldElmnts = arrElmntsAddCTSC
		Case arrWinNameSC(1)
			Set welWindow = welEdtCodeTypeWinSC
			arrFldElmnts = arrElmntsEdtCTSC
		Case arrWinNameSC(2)
			Set welWindow = welAddCodeWinSC
			arrFldElmnts = arrElmntsAddCodeSC
		Case arrWinNameSC(3)
			Set welWindow = welEdtCodeWinSC
			
		'	Checking if 'Additional fields' are collapsed
			sClassVal = funFetchROProperty(wlnkAddAntrAtrEdtCodeSC, "'Add additional attribute (optional)' link", "class")
			If Trim(sClassVal) = "collapsed" Then
				arrFldElmnts = arrAdtnlElmntsEdtCodeSC
			Else			
				arrFldElmnts = arrElmntsEdtCodeSC	
			End If	
	End Select

'	Checking the existence of required window
	bFlag = funObjectIsPresent(welWindow, "'" & sWinName & "' window", 20)
	If bFlag Then
	
	'	Loop for checking the existence of elements
		For iLoop = 0 To UBound(arrFldElmnts)
		
		'	Getting the object of the field and checking the existence
			Set welElement = funGetFieldObjSysCode(sWinName, arrFldElmnts(iLoop))
			bFlag = funObjectIsPresent (welElement, "'" & arrFldElmnts(iLoop) & "' field/button", 3)
		Next
	End If
End Function


'*******************************************************************************************************************
'  Function Name	   	:   funGetFieldObjSysCode
'  Function Description :   Function for getting the object of fields in windows of 'System Codes' screen
'  Function Parameters  :	sWinName = Window Name
'  Date Created      	:   28th Feb, 2017
'  Author               :  	Karan Mehta
'  Last modified  on    :  	
'*******************************************************************************************************************
Public Function funGetFieldObjSysCode(ByVal sWinName, ByVal sFieldName)

	Select Case sWinName
		
		Case arrWinNameSC(0)
			Select Case sFieldName
				Case "Code Type ID"
					Set welElement = wedCodTypIDAddCTSC
				Case "Code Description"
					Set welElement = wedCodDesAddCTSC 
				Case "User Groups"
					Set welElement = wedUsrGrpAddCTSC 
				Case "Active"
					Set welElement = wcbxActiveAddCTSC 
				Case "Save"
					Set welElement = wbtnSaveAddCTSC 
				Case "Cancel"
					Set welElement = wbtnCncnlAddCTSC 
			End Select
		Case arrWinNameSC(1)
			Select Case sFieldName
				Case "Code Type ID"
					Set welElement = wedCodTypIDEdtCTSC
				Case "Code Description"
					Set welElement = wedCodDesEdtCTSC 
				Case "User Groups"
					Set welElement = wedUsrGrpEdtCTSC 
				Case "Active"
					Set welElement = wcbxActiveEdtCTSC 
				Case "Save"
					Set welElement = wbtnSaveEdtCTSC 
				Case "Cancel"
					Set welElement = wbtnCnclEdtCTSC
			End Select
		Case arrWinNameSC(2)
			Select Case sFieldName
				Case "Code Type Description"
					Set welElement = wlnkCTDescAddCodeSC
				Case "Code ID"
					Set welElement = wedCodeIDAddCodeSC
				Case "Code Alpha"
					Set welElement = wedCodeAlphaAddCodeSC
				Case "Code Description"
					Set welElement = wedCodeDescAddCodeSC
				Case "Comments"
					Set welElement = wedCmntsAddCodeSC
				Case "Active"
					Set welElement = wcbxActiveAddCodeSC
				Case "Cancel"
					Set welElement = wbtnCnclAddCodeSC
				Case "Save"
					Set welElement = wbtnSaveAddCodeSC
				Case "Save and add another code"
					Set welElement = wbtnSavAddAnthrAddCodeSC
			End Select
		Case arrWinNameSC(3)
			Select Case sFieldName
				Case "Code Type Description"
					Set welElement = wedCTDescEdtCodeSC
				Case "Code ID"
					Set welElement = wedCodeIDEdtCodeSC
				Case "Code Alpha"
					Set welElement = wedCodeAlphaEdtCodeSC
				Case "Code Description"
					Set welElement = wedCodeDescEdtCodeSC
				Case "Comments"
					Set welElement = wedCmntsEdtCodeSC
				Case "Active"
					Set welElement = wcbxActiveEdtCodeSC
				Case "Cancel"
					Set welElement = wbtnCnclEdtCodeSC
				Case "Save"
					Set welElement = wbtnSaveEdtCodeSC
				Case "+ Add additional attribute (optional)"
					Set welElement = wlnkAddAntrAtrEdtCodeSC
				Case "Alpha Attr 1"
					Set welElement = wedAlpAtr1EdtCodeSC
				Case "Alpha Attr 2"
					Set welElement = wedAlpAtr2EdtCodeSC
				Case "Alpha Attr 3"
					Set welElement = wedAlpAtr3EdtCodeSC
				Case "Num Attr 1"
					Set welElement = wedNumAtr1EdtCodeSC
				Case "Num Attr 2"
					Set welElement = wedNumAtr2EdtCodeSC
				Case "Num Attr 3"
					Set welElement = wedNumAtr3EdtCodeSC
				Case "Y/N Attr 1"
					Set welElement = wedYNAtr1EdtCodeSC
				Case "Y/N Attr 2"	
					Set welElement = wedYNAtr2EdtCodeSC
				Case "Y/N Attr 3"
					Set welElement = wedYNAtr3EdtCodeSC
			End Select
	End Select

	Set funGetFieldObjSysCode = welElement
End Function


'*******************************************************************************************************************
'  Function Name	   	:   funChkAddFuncInCodeTypeSC
'  Function Description :   Function for checking the Add functionality in 'System Codes >> Code Type' screen
'  Function Parameters  :	sTDSheetName = Test Data sheet name
'  Date Created      	:   1st Mar, 2017
'  Author               :  	Karan Mehta
'  Last modified  on    :  	
'*******************************************************************************************************************
Public Function funChkAddFuncInCodeTypeSC(ByVal sTDSheetName)
	
Dim bSheetExist	'Reference variable for checking the existence of Test Data sheet
Dim iLoop, iLoop1 'Reference variables for iteration
Dim sCodeTypeID, sDupCodeTypeID 'Reference variable for getting the value of 'Code Type ID' field
Dim sCodeTypeDesc 'Reference variable for getting the value of 'Code Type Description' field
Dim iTblRecCountBef, iTblRecCountAft 'Reference variable for getting the record count from the table

arrTDFileCols = Array("Code_Type_ID", "Code_Description", "User_Groups", "Active", "bSaveBtn", "bCnclBtn", "Validation")

'	Checking if existing 'Code Type ID' is required
	If sTDSheetName = sCodeTypeSheetSC Then
		
	'	Getting the already existing 'Code Type ID'
		sDupCodeTypeID = funGetExistingCodeTypeIDSC()
	Else
	'	Getting the count of records in table before performing the operation
		iTblRecCountBef = funGetTotlRecInTable(welPgsPgtnSC, wtblDataCT)	
	End If

'	Clicking on 'Add code type' link
	funClickObject wlnkAddCTSC, "'Add code type' link"
	
'	Checking the existence of elements in the window
	funChkElementsInSysCodeWin arrWinNameSC(0)
	
'	Checking the existence of Test Data sheet
	CheckSheetExistence sTDFileSC, sTDSheetName, bSheetExist
	If bSheetExist = False Then
		funHTMLResult "Fail", "Check Test Data sheet existence", "Failed as Test Data sheet : " & sTDSheetName & " does not exists at path : " &  sTDFileSC
		ExitTest
	End If
	
'	Adding a new sheet and importing the Test Data sheet to the DataTable
'	Also, creating the DataTable sheet object
	DataTable.AddSheet sTDSheetName
	DataTable.ImportSheet sTDFileSC, sTDSheetName, sTDSheetName
	Set objDTSheet = DataTable.GetSheet(sTDSheetName)
	
'	Checking the rows where Test Data is present
	sRows = funGetRowsFromDTSheet(objDTSheet, "Functionality", "Add")
	If Len(sRows) = 0 Then
		funHTMLResult "Fail", "Check ", "Could not proceed further as no record exists in Test Data file to check the functionality."
		ExitTest
	End If
	
'	Splitting the string to get the rows where TestData is present
	arrRows = Split(sRows, ",")
	
'	Loop for performing the functionality
	For iLoop = 0 to UBound(arrRows)
	
	'	Checking the existence of 'Add Code Type' window
		bFlag = funCheckElementExistence(welAddCodeTypeWinSC, 3)
		If bFlag = False Then
		
		'	Getting the count of records in table before performing the operation
			iTblRecCountBef = funGetTotlRecInTable(welPgsPgtnSC, wtblDataCT)
			
		'	Clicking on 'Add Code Type' button
			funClickObject wlnkAddCTSC, "'Add code type' link" 
			
		'	Checking the existence of required window
			bFlag = funObjectIsPresent(welAddCodeTypeWinSC, "'Add Code Type' window", 20)
			If bFlag = False Then
				ExitTest
			End If
		End If
	
	'	Setting the row in the DataTable sheet
		objDTSheet.SetCurrentRow cInt(arrRows(iLoop))
	
	'	Loop for getting the value of cells in TestData sheet
		For iLoop1 = 0 To UBound(arrTDFileCols)
		
		'	Getting the value for selected field
			sValue = objDTSheet.GetParameter(arrTDFileCols(iLoop1)).Value
			sValue = Trim(sValue)
			
			Select Case arrTDFileCols(iLoop1)
				Case "Code_Type_ID"
					Select Case sValue
						Case "GET_UNIQUE_DATA"
							sValue = funGetUniqueDataInSC(arrWinNameSC(0), arrElmntsAddCTSC(0))
						Case "GET_EXISTING_DATA"
							sValue = sDupCodeTypeID
					End Select
				Case "Code_Description"
					If sValue = "GET_UNIQUE_DATA" Then
						sCodeTypeDesc = funGetUniqueDataInSC(arrWinNameSC(0), arrElmntsAddCTSC(1))
					Else
						sCodeTypeDesc = sValue
					End If
				Case "User_Groups"
					funRemoveAllUsrGrpCodeTypeSC arrWinNameSC(0)
			End Select
		
			Select Case arrTDFileCols(iLoop1)
				Case "Code_Type_ID"
					funSetValueInEditBox wedCodTypIDAddCTSC, "'" & arrElmntsAddCTSC(0) & "' field", sValue
				Case "Code_Description"
					funSetValueInEditBox wedCodDesAddCTSC, "'" & arrElmntsAddCTSC(0) & "' field", sCodeTypeDesc
				Case "User_Groups"
					If Len(sValue) > 0 Then
						funSelectFromList wlnkUsrGrpAddCTSC, "'User List' field", sValue	
					End If
				Case "Validation"
					If UCase(sValue) = "TRUE" Then
						funObjectIsPresent welValMsgCodTypIDAddCTSC, "validation message for 'Code Type ID' field", 10
					End If
				Case "Active"
					funSetCheckBox wcbxActiveAddCTSC, "'Active' checkbox", sValue
				Case "bCnclBtn"
					If UCase(sValue) = "CLICK" Then
					
					'	Clicking on the 'Cancel' button
						funClickObject wbtnCncnlAddCTSC, "'Cancel' button"
						
					'	Checking if 'Add Code Type' window disappears
						funCheckElementDisappearance  welAddCodeTypeWinSC, "'Add Code Type' window"
					End If
				Case "bSaveBtn"
					If UCase(sValue) = "TRUE" Then
						funVerifygetROProperty  wbtnSaveAddCTSC, "'Save' button", "disabled", 1
					ElseIf UCase(sValue) = "CLICK" Then
					
					'	Clicking on 'Save' button	
						funClickObject wbtnSaveAddCTSC, "'Save' button"
						funWaitForLoadImgToDispr welLoadIconSC
						
					'	Getting the count of records from the table
						iTblRecCountAft = funGetTotlRecInTable(welPgsPgtnSC, wtblDataCT)
						
					'	Checking if new record is added
						If iTblRecCountAft = iTblRecCountBef + 1 Then
							funHTMLResult "Pass", "Add new record", "Successfully added a new record. Expected Count : " & (iTblRecCountBef + 1) & " & Actual Count : " & iTblRecCountAft
						
						'	Setting the function output as 'Code Type Description'
							funChkAddFuncInCodeTypeSC = sCodeTypeDesc 
						Else
							funHTMLResult "Fail", "Add new record", "Failed to add a new record. Expected Count : " & (iTblRecCountBef + 1) & " & Actual Count : " & iTblRecCountAft
							ExitTest
						End If	

					'	Sorting the record in 'Descending' order of 'ID' column
						funSortTblCols wtblHdrCT, arrTblColsCT(1), arrSortType(1)
						
					'	Getting the value of 'Active' checkbox
						sActive = objDTSheet.GetParameter("Active").Value
						
					'	Checking if 'Active' checkbox is checked
						If UCase(sActive) = "ON" Then
						
						'	Clicking on the 'Edit' icon for the first record
							funClickObject welEdtFstCodeTypeSC, "'Edit' icon for first record"
							
						'	Checking the existence of 'Edit Code Type' window
							bFlag = funObjectIsPresent(welEdtCodeTypeWinSC, "'Edit Code Type' window", 20)
							If bFlag Then
								
							'	Deseleting the 'Active' checkbox
								funSetCheckBox wcbxActiveEdtCTSC, "'Active' checkbox", "OFF"
								
							'	Clicking on 'Save' button	
								funClickObject wbtnSaveEdtCTSC, "'Save' button"
								funWaitForLoadImgToDispr welLoadIconSC
							Else
								ExitTest
							End If
						Else
						'	Getting the value for 'Active' column in the table
							sValue = funGetDataFromTblInAdmin(wtblDataCT, wtblHdrCT, arrTblColsCT(5), 2)
							If Trim(sValue) = "No" Then
								funHTMLResult "Pass", "Check value for 'Active' column", "Successfully checked the value for 'Active' column in the table. Expected Value : No & Actual Value : " &  sValue
							Else
								funHTMLResult "Fail", "Check value for 'Active' column", "Failed as 'Active' column in the table is not set correctly. Expected Value : No & Actual Value : " &  sValue
							End If
						End If
						
					'	Checking if 'CodeType' sheet is selected?
						If sTDSheetName = sCodeTypeSheetSC Then
							
						'	Filtering the record
							funSetFilterInAdmin wedtFltrSC, wbtnFltrSC, sCodeTypeDesc
							
						'	Sorting the records in 'ASCENDING' order of 'Description' column
							funSortTblCols wtblHdrCT, arrTblColsCT(3), arrSortType(0)
							
						'	Getting the 'Description' of first record
							sRecDesc = funGetDataFromTblInAdmin(wtblDataCT, wtblHdrCT, arrTblColsCT(3), 2)
							
						'	Checking if the record is filtered and is getting displayed?
							If Trim(sRecDesc) = Trim(sCodeTypeDesc) Then
								funHTMLResult "Pass", "Check filter functionality", "Successfully checked that record is filtered. Expected Value : " & sCodeTypeDesc & " & Actual Value : " & sRecDesc
							Else
								funHTMLResult "Fail", "Check filter functionality", "Failed as record is not filtered. Expected Value : " & sCodeTypeDesc & " & Actual Value : " & sRecDesc
							End If
							
						'	Removing the filter
							funClearFltrInAdmin wedtFltrSC, wbtnFltrSC
						End If
					End If
			End Select
		Next
	Next
End Function


'*******************************************************************************************************************
'  Function Name	   	:   funGetExistingCodeTypeIDSC
'  Function Description :   Function for getting the existing 'Code Type ID' in 'Code Type' section of 'Security Codes' screen
'  Function Parameters  :	None
'  Date Created      	:   2nd Mar, 2017
'  Author               :  	Karan Mehta
'  Last modified  on    :  	
'*******************************************************************************************************************
Public Function funGetExistingCodeTypeIDSC()

arrTDFileCols = Array("Code_Type_ID", "Code_Description", "User_Groups", "Active", "bSaveBtn", "bCnclBtn", "Validation")
	
'	Getting the count of records in the table
	iTblRecCount = funGetTotlRecInTable(welPgsPgtnSC, wtblDataCT)
						
'	Checking if any record exists?
	If iTblRecCount = 0 Then
		funHTMLReport "Done", "Get existing 'Code Type ID'", "Could not check the functionality as no record exists in table."
		ExitTest
	Else			
	'	Sorting the 'Code Type ID' column
		funSortTblCols wtblHdrCT, arrTblColsCT(2), arrSortType(1)
		
	'	Getting the 'Code Type ID' for first record in table
		sCodeTypeID = funGetDataFromTblInAdmin(wtblDataCT, wtblHdrCT, arrTblColsCT(2), 2) 
	End If
	
'	Setting the output of function
	funGetExistingCodeTypeIDSC = sCodeTypeID
End Function


'*******************************************************************************************************************
'  Function Name	   	:   funRemoveAllUsrGrpCodeTypeSC
'  Function Description :   Function for removing all user groups in 'Code Type' windows of 'System Codes' screen
'  Function Parameters  :	sWinName = Window Name
'  Date Created      	:   2nd Mar, 2017
'  Author               :  	Karan Mehta
'  Last modified  on    :  	
'*******************************************************************************************************************
Public Function funRemoveAllUsrGrpCodeTypeSC(ByVal sWinName)

	Select Case sWinName
		Case arrWinNameSC(0)
			Set welWindow = welAddCodeTypeWinSC
		Case arrWinNameSC(1)
			Set welWindow = welEdtCodeTypeWinSC
	End Select
	
'	Setting the object for delete icon of first record
	Set welDelFstRec = welWindow.WebElement("xpath:=//ul[@class='chosen-choices']/li[@class='search-choice'][1]/a[@class='search-choice-close']")
	
'	Loop for deleting the selected options from the field
	Do 
	'	Checking the existence of 'Delete' icon for first selected record
		bFlag = funCheckElementExistence(welDelFstRec, 2)
		If bFlag Then
			
		'	Clicking on the icon to delete the record
			funClickObject welDelFstRec, "Delete record"
			Wait(2)
		End If
	Loop While bFlag	
End Function


'*******************************************************************************************************************
'  Function Name	   	:   funChkAddCodeFuncInSC
'  Function Description :   Function for checking the 'Add Code' functionality in 'System Codes' screen
'  Function Parameters  :	None
'  Date Created      	:   6th Mar, 2017
'  Author               :  	Karan Mehta
'  Last modified  on    :  	
'*******************************************************************************************************************
Public Function funChkAddCodeFuncInSC(ByVal sTDSheetName)

Dim bSheetExist 'Reference variable for checking the existence of TestData sheet
Dim iLoop, iLoop1 'Reference variables for iteration	
Dim iTblRecCount, iCodeCountBef 'Reference variable for getting the count of records in table
Dim sExtngCodeID, sExtngCodeAlpha
Dim bCodeRecExist

arrTDFileCols = Array("Code_Type_Description", "Code_ID", "Code_Alpha", "Code_Description", "Comments", "Active", "bCnclBtn", "bSaveBtn", "bSaveAndAddCode", "bValidation")	

'	Getting the count of records in 'Code Type' table
	iTblRecCount = funGetTotlRecInTable(welPgsPgtnSC, wtblDataCT)
	
'	Checking if any record exists?
	If iTblRecCount = 0 Then
		funHTMLResult "Done", "Check 'Add code' functionality", "Could not check the functionality as no record exists in 'Code Type' table."
		ExitTest
	End If
	
'	Sorting the records in descending order of 'ID' column
	funSortTblCols wtblHdrCT, arrTblColsCT(1), arrSortType(1)
	
'	Getting the Description for the first record
	sDescCT = funGetDataFromTblInAdmin(wtblDataCT, wtblHdrCT, arrTblColsCT(3), 2)
	
'	Getting the count of 'Code' records for selected 'Code Type'
	iCodeCountBef = funGetCodeCountForSelCodeType()
	
'	Getting the value of already existing 'Code ID' and 'Code Alpha' fields
	bCodeRecExist = funGetExistingDataFromCodeSC(sExtngCodeID, sExtngCodeAlpha)
	
'	Clicking on 'Back to Code Type' button
	funClickBckToCodeTypeSC()
	
'	Opening the 'Add Code' window
	funOpenAddCodeWinSC()
	
'	Checking the existence of elements in the window
	funChkElementsInSysCodeWin arrWinNameSC(2)
	
'	Checking the existence of Test Data sheet
	CheckSheetExistence sTDFileSC, sTDSheetName, bSheetExist
	If bSheetExist = False Then
		funHTMLResult "Fail", "Check Test Data sheet existence", "Failed as Test Data sheet : " & sTDSheetName & " does not exists at path : " &  sTDFileSC
		ExitTest
	End If
	
'	Adding a new sheet and importing the Test Data sheet to the DataTable
'	Also, creating the DataTable sheet object
	DataTable.AddSheet sTDSheetName
	DataTable.ImportSheet sTDFileSC, sTDSheetName, sTDSheetName
	Set objDTSheet = DataTable.GetSheet(sTDSheetName)
	
'	Checking the rows where Test Data is present
	sRows = funGetRowsFromDTSheet(objDTSheet, "Functionality", "Add")
	If Len(sRows) = 0 Then
		funHTMLResult "Fail", "Check ", "Could not proceed further as no record exists in Test Data file to check the functionality."
		ExitTest
	End If
	
'	Splitting the string to get the rows where TestData is present
	arrRows = Split(sRows, ",")
	
'	Loop for performing the functionality
	For iLoop = 0 to UBound(arrRows)
	
	'	Checking the existence of 'Add Code' window
		bFlag = funCheckElementExistence(welAddCodeWinSC, 3)
		If bFlag = False Then
		
		'	Getting the count of records in table before performing the operation
			iTblRecCountBef = funGetCodeCountForSelCodeType()
			
		'	Clicking on 'Back to Code Type' button in 'Code' section
			funClickBckToCodeTypeSC()
			
		'	Opening the 'Add Code' window
			funOpenAddCodeWinSC()
		End If

	'	Setting the row in the DataTable sheet
		objDTSheet.SetCurrentRow cInt(arrRows(iLoop))
	
	'	Loop for getting the value of cells in TestData sheet
		For iLoop1 = 0 To UBound(arrTDFileCols)
		
		'	Getting the value for selected field
			sValue = objDTSheet.GetParameter(arrTDFileCols(iLoop1)).Value
			sValue = Trim(sValue)
			
			Select Case arrTDFileCols(iLoop1)
				Case "Code_Type_Description"
					If sValue = "GET_EXISTING_DATA" Then
						sValue = sDescCT
					End If
				Case "Code_ID"
					If sValue = "GET_UNIQUE_DATA" Then
						sValue = funGetUniqueDataInSC(arrWinNameSC(2), arrElmntsAddCodeSC(1))
					ElseIf sValue = "GET_EXISTING_DATA" Then
						sValue = sExtngCodeID
					End If
				Case "Code_Alpha"
					If sValue = "GET_UNIQUE_DATA" Then
						sValue = funGetUniqueDataInSC(arrWinNameSC(2), arrElmntsAddCodeSC(2))
					ElseIf sValue = "GET_EXISTING_DATA" Then
						sValue = sExtngCodeAlpha
					End If
			End Select
			
			Select Case  arrTDFileCols(iLoop1)
				Case "Code_Type_Description"
					funSelectFromList wlnkCTDescAddCodeSC, "'Code Type Description' list", sValue
				Case "Code_ID", "Code_Alpha", "Code_Description", "Comments"
					Select Case arrTDFileCols(iLoop1)
						Case "Code_ID"
							Set welElement = wedCodeIDAddCodeSC
							sFieldName = "Code ID"
						Case "Code_Alpha"
							Set welElement = wedCodeAlphaAddCodeSC
							sFieldName = "Code Alpha"
						Case "Code_Description"
							Set welElement = wedCodeDescAddCodeSC
							sFieldName = "Code Description"
						Case "Comments"
							Set welElement = wedCmntsAddCodeSC
							sFieldName = "Comments"
					End Select
				
					funSetValueInEditBox welElement, "'" & sFieldName & "' field", sValue
				Case "Active"
					funSetCheckBox wcbxActiveAddCodeSC, "'Active' checkbox", sValue
				Case "bCnclBtn"
					If UCase(sValue) = "CLICK" Then
						funClickObject wbtnCnclAddCodeSC, "'Cancel' button"
						
					'	Checking if 'Add Code' window disappears
						funCheckElementDisappearance  welAddCodeWinSC, "'Add Code' window"
					End If
				Case "bSaveBtn"
					Select Case UCase(sValue)
						Case "ENABLE"
							funVerifygetROProperty  wbtnSaveAddCodeSC, "'Save' button", "disabled", 0
						Case "DISABLE"
							funVerifygetROProperty  wbtnSaveAddCodeSC, "'Save' button", "disabled", 1
						Case "CLICK"
						'	Clicking on 'Save' button
							funClickObject wbtnSaveAddCodeSC, "'Save' button"
							funWaitForLoadImgToDispr welLoadIconSC
							
						'	Getting the count of records in table after performing the operation
							iTblRecCountAft = funGetCodeCountForSelCodeType()
							
						'	Clicking on 'Back to Code Type' button in 'Code' section and setting the expected records count
							If sTDSheetName = sCodeSheetSC Then
								funClickBckToCodeTypeSC()
								iExpRecCount = iCodeCountBef + 2
							Else
								iExpRecCount = iCodeCountBef + 1
							End If
							
						'	Checking if the 'Code' is added successfully
							If iTblRecCountAft = iExpRecCount Then
								funHTMLResult "Pass", "Check adding 'Code' record", "Successfully added a new 'Code' record. Expected Count : " & iExpRecCount & " & Actual Count : " & iTblRecCountAft
							Else
								funHTMLResult "Fail", "Check adding 'Code' record", "Failed to add a new 'Code' record. Expected Count : " & iExpRecCount & " & Actual Count : " & iTblRecCountAft
							End If
					End Select	
				Case "bSaveAndAddCode"
					If UCase(sValue) = "CLICK" Then
						funClickObject wbtnSavAddAnthrAddCodeSC, "'Save and add another code' button"
						funWaitForLoadImgToDispr welLoadIconSC
						
						funObjectIsPresent welAddCodeWinSC, "'Add Code' window", 20
					End If	
				Case "bValidation"
					If UCase(sValue) = "TRUE" Then
						If bCodeRecExist Then
							funObjectIsPresent welValMsgCodIDAddCodeSC, "'Code ID' field", 10
							funObjectIsPresent welValMsgCodAlfAddCodeSC, "'Code Alfa' field", 10
						Else
							funHTMLResult "Done", "Check validations on entering existing value for 'Code ID' and 'Code Alpha' fields", "Could not check the functionality as no 'Code' record exists for selected Code Type having description : '" & sDescCT & "'"
						End If
					End If	
			End Select
		Next
	Next
End Function


'*******************************************************************************************************************
'  Function Name	   	:   funOpenCodesSecForCodeType
'  Function Description :   Function for opening the 'Codes' section of selected 'Code Type' in 'System Codes' window
'  Function Parameters  :	None
'  Date Created      	:   6th Mar, 2017
'  Author               :  	Karan Mehta
'  Last modified  on    :  	
'*******************************************************************************************************************
Public Function funOpenCodesSecForCodeType()

Dim iTblRecCount 'Reference variable for getting the count of records in the 'Code Type' table

'	Getting the count of records in 'Code Type' table
	iTblRecCount = funGetTotlRecInTable(welPgsPgtnSC, wtblDataCT)
	
'	Checking if any record is present
	If iTblRecCount > 0 Then
		
	'	Setting the object for 'Code Type ID' for first record
		Set wlnkLink = wtblDataCT.Link("xpath:=//tbody[1]/tr[1]/td[3]/a")
		
	'	Clicking on the 'Code Type ID' link
		funClickObject wlnkLink, "'Code Type ID' link"
		
	'	Wait for loading icon to disappear
		funWaitForLoadImgToDispr welLoadIconSC
		
	'	Checking the existence of 'Code' section
		bFlag = funObjectIsPresent(wtblDataCodeSC, "'Code' table", 15)
		If bFlag = False Then
			funHTMLResult "Fail", "Check existence of 'Code' section", "Failed as 'Code' section doesn't appears."
			ExitTest
		End If
	Else
		funHTMLResult "Done", "Open 'Codes' section for Code Type", "Could not open the 'Codes' section as no record is present in 'Code Type' table."
		ExitTest
	End If
End Function


'*******************************************************************************************************************
'  Function Name	   	:   funGetCodeCountForSelCodeType
'  Function Description :   Function for getting the count of 'Code' records in 'Code' section of selected 'Code Type' in 'System Codes' window
'  Function Parameters  :	None
'  Date Created      	:   6th Mar, 2017
'  Author               :  	Karan Mehta
'  Last modified  on    :  	
'*******************************************************************************************************************
Public Function funGetCodeCountForSelCodeType()

Dim iTblRecCount 'Reference variable for getting the count of records in table

'	Checking if 'Codes' section needs to be opened or already opened?
	bFlag = funCheckElementExistence(wlnkBckToCodeTypeSC, 3)
	If bFlag = False Then
	
	'	Opening the 'Codes' section
		funOpenCodesSecForCodeType()
	End If
	
'	Getting the count of records in the table
	iTblRecCount = funGetTotlRecInTable(welPgsPgtnSC, wtblDataCodeSC)

'	Setting the output of function
	funGetCodeCountForSelCodeType = cLng(iTblRecCount)
End Function


'*******************************************************************************************************************
'  Function Name	   	:   funGetExistingDataFromCodeSC
'  Function Description :   Function for getting the existing 'Code ID' and 'Code Alpha' in the 'Codes' section of selected 'Code Type'
'  Function Parameters  :	None
'  Date Created      	:   6th Mar, 2017
'  Author               :  	Karan Mehta
'  Last modified  on    :  	
'*******************************************************************************************************************
Public Function funGetExistingDataFromCodeSC(ByRef sCodeID, sCodeAlpha)
	
Dim iTblRecCount 'Reference variable for getting the count of records in 'Code' table	
	
'	Getting the count of records in the 'Code' table
	iTblRecCount = funGetTotlRecInTable(welPgsPgtnSC, wtblDataCodeSC)
	
'	Checking if any record is present in table
	If iTblRecCount > 0 Then
		
	'	Getting the 'Code ID' for the first record
		sCodeID = funGetDataFromTblInAdmin(wtblDataCodeSC, wtblHdrCodeSC, arrTblColsCode(1), 2)
		
	'	Getting the 'Code Alpha' for the first record
		sCodeAlpha = funGetDataFromTblInAdmin(wtblDataCodeSC, wtblHdrCodeSC, arrTblColsCode(2), 2)
	Else
		bFlag = False
	End If
	
'	Setting the output of the function
	funGetExistingDataFromCodeSC = bFlag
End Function


'*******************************************************************************************************************
'  Function Name	   	:   funClickBckToCodeTypeSC
'  Function Description :   Function for clicking on 'Back to Code Type' button in 'Code' section of selected 'Code Type'
'  Function Parameters  :	None
'  Date Created      	:   6th Mar, 2017
'  Author               :  	Karan Mehta
'  Last modified  on    :  	
'*******************************************************************************************************************
Public Function funClickBckToCodeTypeSC()

'	Clicking on 'Back to code types' button
	funClickObject wlnkBckToCodeTypeSC, "'Back to code types' button"
	
'	Wait for loading icon to disappear
	funWaitForLoadImgToDispr welLoadIconSC
	
'	Checking the existence of 'Code Types' section
	bFlag = funObjectIsPresent(welCTSecSC, "'Code Types' section", 20) 
	If bFlag = False Then
		ExitTest
	End If
End Function


'*******************************************************************************************************************
'  Function Name	   	:   funOpenAddCodeWinSC
'  Function Description :   Function for opening the 'Add Code' window in 'System Codes' screen
'  Function Parameters  :	None
'  Date Created      	:   6th Mar, 2017
'  Author               :  	Karan Mehta
'  Last modified  on    :  	
'*******************************************************************************************************************
Public Function funOpenAddCodeWinSC()
	
'	Clicking on 'Add Code' button
	funClickObject wlnkAddCodeSC, "'Add code' link" 
	
'	Checking the existence of required window
	bFlag = funObjectIsPresent(welAddCodeWinSC, "'Add Code' window", 20)
	If bFlag Then
		Wait(5)
	Else
		ExitTest
	End If
End Function


'*******************************************************************************************************************
'  Function Name	   	:   funChkEditFuncInCodeTypeSC
'  Function Description :   Function for checking the 'Edit' functionality in 'Code Type' section of 'System Codes' window
'  Function Parameters  :	None
'  Date Created      	:   6th Mar, 2017
'  Author               :  	Karan Mehta
'  Last modified  on    :  	
'*******************************************************************************************************************
Public Function funChkEditFuncInCodeTypeSC()
	
Dim bSheetExist	'Reference variable for checking the existence of Test Data sheet
Dim iLoop, iLoop1 'Reference variables for iteration
Dim sCodeTypeID 'Reference variable for getting the value for 'Code Type ID' field
Dim iTblRecCountBef, iTblRecCountAft 'Reference variable for getting the record count from the table
Dim sCodeDesc, sCodeDescBef, sCodeDescAft 'Reference variables for getting the 'Code Description' of the record

arrTDFileCols = Array("Code_Description", "User_Groups", "Active", "bSaveBtn", "bCnclBtn")

'	Adding a new 'Code Type' record
	sCodeDescBef = funChkAddFuncInCodeTypeSC(sAddCodeTypeSheetSC)
	
'	Setting the filter
	funSetFilterInAdmin wedtFltrSC, wbtnFltrSC, sCodeDescBef
	
'	Sorting the records in 'Ascending' order of 'Description' column
	funSortTblCols wtblHdrCT, arrTblColsCT(3), arrSortType(0)
	
'	Getting the 'Code Description' of the record
	sCodeDescFltr = funGetDataFromTblInAdmin(wtblDataCT, wtblHdrCT, arrTblColsCT(3), 2)
	
'	Checking if the correct record is filtered?
	If Trim(sCodeDescBef) = Trim(sCodeDescFltr) Then
		funHTMLResult "Pass", "Check filtering record", "Successfully filter record having 'Code Description' : '" & sCodeDescBef & ". Expected Value : " & sCodeDescBef & " & Actual Value : " & sCodeDescFltr
	Else
		funHTMLResult "Fail", "Check filtering record", "Failed to filter record having 'Code Description' : '" & sCodeDescBef & ". Expected Value : " & sCodeDescBef & " & Actual Value : " & sCodeDescFltr
		ExitTest
	End If
	
'	Clicking on 'Edit' link
	funClickObject welEdtFstCodeTypeSC, "'Edit' icon for newly added record"
	
'	Checking the existence of elements in the window
	funChkElementsInSysCodeWin arrWinNameSC(1)
	
'	Checking the existence of Test Data sheet
	CheckSheetExistence sTDFileSC, sCodeTypeSheetSC, bSheetExist
	If bSheetExist = False Then
		funHTMLResult "Fail", "Check Test Data sheet existence", "Failed as Test Data sheet : " & sCodeTypeSheetSC & " does not exists at path : " &  sTDFileSC
		ExitTest
	End If
	
'	Adding a new sheet and importing the Test Data sheet to the DataTable
'	Also, creating the DataTable sheet object
	DataTable.AddSheet sCodeTypeSheetSC
	DataTable.ImportSheet sTDFileSC, sCodeTypeSheetSC, sCodeTypeSheetSC
	Set objDTSheet = DataTable.GetSheet(sCodeTypeSheetSC)
	
'	Checking the rows where Test Data is present
	sRows = funGetRowsFromDTSheet(objDTSheet, "Functionality", "Edit")
	If Len(sRows) = 0 Then
		funHTMLResult "Fail", "Check ", "Could not proceed further as no record exists in Test Data file to check the functionality."
		ExitTest
	End If
	
'	Splitting the string to get the rows where TestData is present
	arrRows = Split(sRows, ",")
	
'	Loop for performing the functionality
	For iLoop = 0 to UBound(arrRows)
	
	'	Checking the existence of 'Edit Code Type' window
		bFlag = funCheckElementExistence(welEdtCodeTypeWinSC, 3)
		If bFlag = False Then
			
		'	Clicking on 'Edit' icon for the record
			funClickObject welEdtFstCodeTypeSC, "'Edit' icon for newly added record"
			
		'	Checking the existence of required window
			bFlag = funObjectIsPresent(welEdtCodeTypeWinSC, "'Edit Code Type' window", 20)
			If bFlag = False Then
				ExitTest
			End If
		End If
	
	'	Setting the row in the DataTable sheet
		objDTSheet.SetCurrentRow cInt(arrRows(iLoop))
	
	'	Loop for getting the value of cells in TestData sheet
		For iLoop1 = 0 To UBound(arrTDFileCols)
		
		'	Getting the value for selected field
			sValue = objDTSheet.GetParameter(arrTDFileCols(iLoop1)).Value
			sValue = Trim(sValue)
			
			Select Case arrTDFileCols(iLoop1)
				Case "Code_Description"
					If sValue = "GET_UNIQUE_DATA" Then
						sCodeDesc = funGetUniqueDataInSC(arrWinNameSC(1), arrElmntsEdtCTSC(1))
					Else
						sCodeDesc = ""
					End If
				Case "User_Groups"
					funRemoveAllUsrGrpCodeTypeSC arrWinNameSC(1)
			End Select
		
			Select Case arrTDFileCols(iLoop1)
				Case "Code_Description"
					funSetValueInEditBox wedCodDesEdtCTSC, "'" & arrElmntsEdtCTSC(1) & "' field", sCodeDesc
				Case "User_Groups"
					If Len(sValue) > 0 Then
						funSelectFromList wlnkUsrGrpEdtCTSC, "'" & arrElmntsEdtCTSC(2) & "' field", sValue	
					End If
				Case "Active"
					funSetCheckBox wcbxActiveEdtCTSC, "'Active' checkbox", sValue
				Case "bCnclBtn"	
					If UCase(sValue) = "CLICK" Then
					
					'	Clicking on the 'Cancel' button
						funClickObject wbtnCnclEdtCTSC, "'Cancel' button"
						
					'	Checking if 'Add Code' window disappears
						funCheckElementDisappearance  welEdtCodeTypeWinSC, "'Edit Code Type' window"
						
					'	Getting the 'Code Description' of the record
						sCodeDescAft = funGetDataFromTblInAdmin(wtblDataCT, wtblHdrCT, arrTblColsCT(3), 2)
					
					'	Checking if editing is not performed as 'Cancel' button is clicked
						If Trim( sCodeDescAft) = Trim(sCodeDescBef) Then
							funHTMLResult "Pass", "Check editing of record when '" & arrElmntsEdtCTSC(5) & "' button is clicked", "Successfully checked that editing is not performed for record. Expected Value : " & sCodeDescBef & " & Actual Value : " & sCodeDescAft
						Else
							funHTMLResult "Fail", "Check editing of record when '" & arrElmntsEdtCTSC(5) & "' button is clicked", "Failed as editing is performed for record. Expected Value : " & sCodeDescBef & " & Actual Value : " & sCodeDescAft
						End If
					End If
				Case "bSaveBtn"
					If UCase(sValue) = "TRUE" Then
						funVerifygetROProperty  wbtnSaveEdtCTSC, "'Save' button", "disabled", 1
					ElseIf UCase(sValue) = "CLICK" Then
					
					'	Clicking on 'Save' button	
						funClickObject wbtnSaveEdtCTSC, "'Save' button"
						funWaitForLoadImgToDispr welLoadIconSC
						
					'	Getting the 'Code Description' of the record
						sCodeDescAft = funGetDataFromTblInAdmin(wtblDataCT, wtblHdrCT, arrTblColsCT(3), 2)
					
					'	Checking if editing is not performed as 'Cancel' button is clicked
						If Trim( sCodeDescAft) = Trim(sCodeDesc) Then
							funHTMLResult "Pass", "Check editing of record when '" & arrElmntsEdtCTSC(4) & "' button is clicked", "Successfully checked that editing is performed for record. Expected Value : " & sCodeDesc & " & Actual Value : " & sCodeDescAft
						Else
							funHTMLResult "Fail", "Check editing of record when '" & arrElmntsEdtCTSC(4) & "' button is clicked", "Failed as editing is not performed for record. Expected Value : " & sCodeDesc & " & Actual Value : " & sCodeDescAft
						End If
					End If
			End Select
		Next
	Next
End Function


'*******************************************************************************************************************
'  Function Name	   	:   funChkEdtCodeFuncInSC
'  Function Description :   Function for checking the 'Edit Code' window of 'System Codes' screen
'  Function Parameters  :	None
'  Date Created      	:   15th Mar, 2017
'  Author               :  	Karan Mehta
'  Last modified  on    :  	
'*******************************************************************************************************************
Public Function funChkEdtCodeFuncInSC()

Dim bSheetExist 'Reference variable for checking the existence of TestData sheet
Dim iLoop, iLoop1 'Reference variables for iteration	
Dim iCodeRecCnt 'Reference variable for getting the count of 'Code' records in table
Dim sExtngCodeID, sExtngCodeAlpha 'Reference variables for getting the existing 'Code ID' and 'Code Alpha' values

arrTDFileCols = Array("Code_ID", "Code_Alpha", "Code_Description", "Comments", "Active", "bCnclBtn", "bSaveBtn", "bValidation")	

'	Adding an new 'Code' record
	funChkAddCodeFuncInSC sAddCodeSheetSC
	
'	Getting the count of 'Code' records
	iCodeRecCnt = funGetCodeCountForSelCodeType()
	
'	Sorting the 'Code' records in 'Ascending' order of 'Code ID' column
	funSortTblCols wtblHdrCodeSC, arrTblColsCode(1), arrSortType(0)
	
'	Getting the 'Code ID' and 'Code Alpha' for first record
	sExtCodeID = funGetDataFromTblInAdmin(wtblDataCodeSC, wtblHdrCodeSC, arrTblColsCode(1), 2)
	sExtCodeAlpha = funGetDataFromTblInAdmin(wtblDataCodeSC, wtblHdrCodeSC, arrTblColsCode(2), 2)
	
'	Sorting the 'Code' records in 'descending' order of 'Code ID' column
	funSortTblCols wtblHdrCodeSC, arrTblColsCode(1), arrSortType(1)
	
'	Clicking on the 'Edit' icon to open 'Edit Code' window
	funClickObject welEdtFstCodeSC, "'Edit' icon for newly added record"
	
'	Checking the existence of elements in the window
	funChkElementsInSysCodeWin arrWinNameSC(3)
	
'	Clicking on 'Add additional attribute (optional)' link
	funClickObject wlnkAddAntrAtrEdtCodeSC, "'Add additional attribute (optional)' link"
	
'	Checking the existence of 'additional fields' in the window
	funChkElementsInSysCodeWin arrWinNameSC(3)
	
'	Loop for checking the validations for 'Alpha Attr' fields
	For iLoop = 0 To UBound(arrAlphaFldsEdtCodeSC)
		
		Select Case arrAlphaFldsEdtCodeSC(iLoop)
			Case "Alpha Attr 1"
				Set welElement = wedAlpAtr1EdtCodeSC
			Case "Alpha Attr 2"
				Set welElement = wedAlpAtr2EdtCodeSC
			Case "Alpha Attr 3"
				Set welElement = wedAlpAtr3EdtCodeSC
		End Select
		
	'	Checking the max. allowed string for the field
		funVerifygetROProperty welElement, "'" & arrAlphaFldsEdtCodeSC(iLoop) & "' field", "max length", iMaxStrLenAlphaFldsEdtCodeSC
		
	'	Entering the special characters in the field
		funSetValueInEditBox welElement, "'" & arrAlphaFldsEdtCodeSC(iLoop) & "' field", sAlphaFldsValStrEdtCodeSC
		
	'	Fetching the value from the field
		sValue = funFetchROProperty(welElement, "'" & arrAlphaFldsEdtCodeSC(iLoop) & "' field", "value")
		
	'	Checking if the field allow special character string to be entered
		If sAlphaFldsValStrEdtCodeSC = Trim(sValue) Then
			funHTMLResult "Pass", "Check entering string: " & sAlphaFldsValStrEdtCodeSC, "Successfully checked that field accepts string: " & sAlphaFldsValStrEdtCodeSC
		Else
			funHTMLResult "Fail", "Check entering string: " & sAlphaFldsValStrEdtCodeSC, "Failed as field does not accepts string: " & sAlphaFldsValStrEdtCodeSC
		End If
	Next
	
'	Checking the existence of Test Data sheet
	CheckSheetExistence sTDFileSC, sCodeSheetSC, bSheetExist
	If bSheetExist = False Then
		funHTMLResult "Fail", "Check Test Data sheet existence", "Failed as Test Data sheet : " & sCodeSheetSC & " does not exists at path : " &  sTDFileSC
		ExitTest
	End If
	
'	Adding a new sheet and importing the Test Data sheet to the DataTable
'	Also, creating the DataTable sheet object
	DataTable.AddSheet sCodeSheetSC
	DataTable.ImportSheet sTDFileSC, sCodeSheetSC, sCodeSheetSC
	Set objDTSheet = DataTable.GetSheet(sCodeSheetSC)
	
'	Checking the rows where Test Data is present
	sRows = funGetRowsFromDTSheet(objDTSheet, "Functionality", "Edit")
	If Len(sRows) = 0 Then
		funHTMLResult "Fail", "Check ", "Could not proceed further as no record exists in Test Data file to check the functionality."
		ExitTest
	End If
	
'	Splitting the string to get the rows where TestData is present
	arrRows = Split(sRows, ",")
	
'	Loop for performing the edit functionality
	For iLoop = 0 To UBound(arrRows)
	
	'	Checking the existence of 'Edit Code Type' window
		bFlag = funCheckElementExistence(welEdtCodeWinSC, 3)
		If bFlag = False Then
			
		'	Clicking on 'Edit' icon for the record
			funClickObject welEdtFstCodeSC, "'Edit' icon for newly added record"
			
		'	Checking the existence of required window
			bFlag = funObjectIsPresent(welEdtCodeWinSC, "'Edit Code' window", 20)
			If bFlag = False Then
				ExitTest
			End If
		End If
		
	'	Setting the row in the DataTable sheet
		objDTSheet.SetCurrentRow cInt(arrRows(iLoop))
	
	'	Loop for getting the value of cells in TestData sheet
		For iLoop1 = 0 To UBound(arrTDFileCols)
		
		'	Getting the value for selected field
			sValue = objDTSheet.GetParameter(arrTDFileCols(iLoop1)).Value
			sValue = Trim(sValue)
			
			Select Case arrTDFileCols(iLoop1)
				Case "Code_ID"
					If sValue = "GET_UNIQUE_DATA" Then
						sValue = funGetUniqueDataInSC(arrWinNameSC(3), arrElmntsEdtCodeSC(1))
					ElseIf sValue = "GET_EXISTING_DATA" Then
						sValue = sExtCodeID
					End If
				Case "Code_Alpha"
					If sValue = "GET_UNIQUE_DATA" Then
						sValue = funGetUniqueDataInSC(arrWinNameSC(3), arrElmntsEdtCodeSC(2))
					ElseIf sValue = "GET_EXISTING_DATA" Then
						sValue = sExtCodeAlpha
					End If
			End Select
		
			Select Case  arrTDFileCols(iLoop1)
				Case "Code_ID", "Code_Alpha", "Code_Description", "Comments"
					Select Case arrTDFileCols(iLoop1)
						Case "Code_ID"
							Set welElement = wedCodeIDEdtCodeSC
							sFieldName = "Code ID"
						Case "Code_Alpha"
							Set welElement = wedCodeAlphaEdtCodeSC
							sFieldName = "Code Alpha"
						Case "Code_Description"
							Set welElement = wedCodeDescEdtCodeSC
							sFieldName = "Code Description"
						Case "Comments"
							Set welElement = wedCmntsEdtCodeSC
							sFieldName = "Comments"
					End Select
					
					funSetValueInEditBox welElement, "'" & sFieldName & "' field", sValue
				Case "Active"
					funSetCheckBox wcbxActiveEdtCodeSC, "'Active' checkbox", sValue
				Case "bCnclBtn"
					If UCase(sValue) = "CLICK" Then
						funClickObject wbtnCnclEdtCodeSC, "'Cancel' button"
						
					'	Checking if 'Edit Code' window disappears
						funCheckElementDisappearance  welEdtCodeWinSC, "'Edit Code' window"
					End If
				Case "bSaveBtn"
					Select Case UCase(sValue)
						Case "ENABLE"
							funVerifygetROProperty  wbtnSaveEdtCodeSC, "'Save' button", "disabled", 0
						Case "DISABLE"
							funVerifygetROProperty  wbtnSaveEdtCodeSC, "'Save' button", "disabled", 1
						Case "CLICK"
						'	Getting the 'Code ID' after editing the record
							sCodeIDExp = funFetchROProperty(wedCodeAlphaEdtCodeSC, "'Code ID' field", "value")
						
						'	Clicking on 'Save' button
							funClickObject wbtnSaveEdtCodeSC, "'Save' button"
							
						'	Checking if 'Edit Code' window disappears and waiting for loading icon to disappear
							funCheckElementDisappearance  welEdtCodeWinSC, "'Edit Code' window"	
							funWaitForLoadImgToDispr welLoadIconSC
							
						'	Getting the 'Code ID' for the edited record from the 'Code' table
							sCodeIDAct = funGetDataFromTblInAdmin(wtblDataCodeSC, wtblHdrCodeSC, arrTblColsCode(2), 2)
							
						'	Checking if the record is edited successfully
							If Trim(sCodeIDExp) = Trim(sCodeIDAct) Then
								funHTMLResult "Pass", "Check editing of 'Code ID' field", "Successfully edited the record. Expected Value : " & sCodeIDExp & " & Actual Value : " & sCodeIDAct
							Else
								funHTMLResult "Fail", "Check editing of 'Code ID' field", "Failed as field is not edited properly. Expected Value : " & sCodeIDExp & " & Actual Value : " & sCodeIDAct					
							End If
					End Select
				Case "bValidation"
					If UCase(Trim(sValue)) = "TRUE" Then
						If iCodeRecCnt > 1 Then
							
						'	Checking the existence of validation text for 'Code ID' and 'Code Alpha' fields
							funObjectIsPresent welValMsgCodIDEdtCodeSC, "validation message for 'Code ID' field", 5
							funObjectIsPresent welValMsgCodAlfEdtCodeSC, "validation message for 'Code Alpha' field", 5
						Else
							funHTMLResult "Done", "Check validation if existing 'Code ID' and 'Code Alpha' used", "Could not check the functionality as only 1 'Code' record exists."
						End If
					End If				
			End Select
		Next
	Next
End Function


'*******************************************************************************************************************
'  Function Name	   	:   funChkUsrGrpInAddCodeType
'  Function Description :   Function for checking the options available under 'User Groups' field in 'Add Code Type' window
'  Function Parameters  :	None
'  Date Created      	:   23rd May, 2017
'  Author               :  	Karan Mehta
'  Last modified  on    :  	
'*******************************************************************************************************************
Public Function funChkUsrGrpInAddCodeType()

Dim iLoop 'Reference variable for iteration
	
'	Opening the 'User Maintenance' screen
	funSelectMenuItem objLoginPage, sUsrMaintLink
	
'	Adding a new sheet and importing the TestData sheet for getting the user's credentials
	DataTable.AddSheet sLoginUsrCredSheet
	DataTable.ImportSheet sExecEnvDetFilePath, sLoginUsrCredSheet, sLoginUsrCredSheet
	Set objDTSheet = DataTable.GetSheet(sLoginUsrCredSheet)

'	Getting the login user's SSO
	sUsrSSO = objDTSheet.GetParameter("username").Value
	
'	Filter the record sort the results in ascending order of 'SSO' to check if it appears on top?
	funSetSSOFltrInUM arrTabsInUsrMain(0), sUsrSSO
	
'	Opening the 'Manage Groups' screen
	funSelSetSecInUsrMain arrTabsInUsrMain(0), arrOptnsSetUsrMain(0)
	
'	Getting the count of records in the 'Selected Groups' section
	iRecCountExp = funGetRecCntInMngGrpAndCGWin(arrOptnsSetUsrMain(0), arrSecMngGrpWin(1), "//input")
	ReDim arrSelGrp(iRecCountExp-1)
	
'	Loop for getting the names of the records in the 'Selected Groups' section
	For iLoop = 0 To (iRecCountExp-1)
	
	'	Setting the object for getting the name of the record in 'Selected Groups' section
		Set welRecSelGrp = welSelGrpSecMGWinUM.WebElement("xpath:=//h5[normalize-space(.)='Selected Groups']/following-sibling::div[@id='GroupListCheckBox']/label[" & (iLoop+1) & "]")
	
	'	Getting the item name and removing '*' if present in name
		sItemName = funFetchROProperty(welRecSelGrp, "record in 'Selected Group' section", "innertext")
		sItemName = Replace(sItemName, "*", "")
		arrSelGrp(iLoop) = Trim(sItemName)
	Next
	
'	Clicking on the 'Cancel' button
	funClickObject wbtnCnclMGWinUM, "'Cancel' button"
	funCheckElementDisappearance welMGWinUM, "'Manage Groups' window"
	
'	Opening 'System Codes' screen and checking the Screen title/section
	funSelectMenuItem wpgUsrMain, sSysCodeLink
	
'	Clicking on 'Add Code Type' button
	funClickObject wlnkAddCTSC, "'Add code type' link" 
			
'	Checking the existence of required window
	bFlag = funObjectIsPresent(welAddCodeTypeWinSC, "'Add Code Type' window", 20)
	If bFlag = False Then
		ExitTest
	Else
		Wait(5)
	End If

'	Getting the count of records available for 'User Groups' dropdown
	sItems = funFetchROProperty(wlnkUsrGrpAddCTSC, "'Add User Group' list", "all items")
	arrListOptns = Split(sItems, ";")
	
'	Getting the count of records under 'User Groups' dropdown
	iRecCountAct = UBound(arrListOptns) + 1
	
'	Checking if the count of records are getting matched?
	If iRecCountAct = iRecCountExp Then
		funHTMLResult "Pass", "Check record count under 'User Groups' dropdown", "Successfully matched the record count. Expected Value : " & iRecCountExp & " & Actual Value : " & iRecCountAct
	
	'	Loop for checking the existence of 'User Groups'
		For iLoop = 0 To UBound(arrSelGrp)
			
		'	Setting the object for the option available in 'User Group' dropdown
			Set welElement = wpgUsrMain.WebElement("xpath:=//select[@data-placeholder='Select User Groups']/option[normalize-space(.)='" & arrSelGrp(iLoop) & "']")
			
		'	Checking the existence of option under 'User Group' dropdown
			funObjectIsPresent welElement, "'" & arrSelGrp(iLoop) & "' option under 'User Group' dropdown", 5
		Next
	Else
		funHTMLResult "Fail", "Check record count under 'User Groups' dropdown", "Failed as the record count is not matching. Expected Value : " & iRecCountExp & " & Actual Value : " & iRecCountAct
	End If
	
'	Clicking on the 'Cancel' button and waiting till 'Add Code Type' window disappears
	funClickObject wbtnCncnlAddCTSC, "'Cancel' button"
	funCheckElementDisappearance  welAddCodeTypeWinSC, "'Add Code Type' window"
End Function











''''''''''''''''''''''''''''''''''''''''''''''client groups functions ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


'*******************************************************************************************************************
'  Function Name	   	:   funChkSrchInClntGrp
'  Function Description :   Function for checking the 'Search' functionality in 'Client Groups' screen
'  Function Parameters  :	None
'  Date Created      	:   7th Mar, 2017
'  Author               :  	Karan Mehta
'  Last modified  on    :  	
'*******************************************************************************************************************
Public Function funChkSrchInClntGrp()
	
Dim bSheetExist 'Reference variable for checking the existence of TestData sheet	
Dim iLoop 'Reference variable for iteration
Dim iSheetRecCnt 'Reference variable for getting the count of records in the TestData sheet

'	Getting the count of records in the table
	iTblRecCount = funGetTotlRecInTable(welPgsPgtnCG, wtblDataCG)
	
'	Checking if any record exists in the table
	If iTblRecCount = 0 Then
		funHTMLResult "Done", "Check search functionality", "Could not perform the functionality as no record exists in the table."
		ExitTest
	Else
	'	Getting the ID and Name of the existing record
		sID = funGetDataFromTblInAdmin(wtblDataCG, wtblHdrCG, arrClntGrpTblCols(1), 2)
		sName = funGetDataFromTblInAdmin(wtblDataCG, wtblHdrCG, arrClntGrpTblCols(2), 2)
	End If
	
'	Checking the existence of TestData sheet
	CheckSheetExistence sTDFileCG, sSrchSheetCG, bSheetExist
	
'	Checking if TestData sheet exists?
	If bSheetExist = False Then
		funHTMLResult "Fail", "Check Test Data sheet existence", "Failed as Test Data sheet : " & sSrchSheetCG & " does not exists at path : " &  sTDFileCG
		ExitTest
	End If
	
'	Importing the TestData sheet (if exists) into data table
	DataTable.AddSheet sSrchSheetCG
	DataTable.ImportSheet sTDFileCG, sSrchSheetCG, sSrchSheetCG
	Set objDTSheet = DataTable.GetSheet(sSrchSheetCG)
	
'	Getting the count of records in the TestData sheet
	iSheetRecCnt = objDTSheet.GetRowCount
	
'	Loop for getting the TestData from TestData sheet
	For iLoop = 1 To iSheetRecCnt
	
	'	Selecting the row in the TestData sheet
		objDTSheet.SetCurrentRow iLoop
	
	'	Getting the value for 'ColumnName' field to check which column in TestData sheet has required TestData
		sColName = objDTSheet.GetParameter("ColumnName").Value
		
	'	Getting the required TestData
		sTestData = objDTSheet.GetParameter(sColName).Value
		
	'	Checking if valid data is required?
		If UCase(Trim(sTestData)) = "GET_EXISTING_DATA" Then
			
		'	Checking if valid ID/Name is required to be searched	
			If sColName = "ID" Then
				sTestData = sID
			Else
				sTestData = sName
			End If
		End If
		
	'	Setting the string in the filter
		funSetFilterInAdmin wedtFltrCG, wbtnFltrCG, sTestData
	
	'	Getting the count of actual search records
		iSrchRecCntAct = funGetTblPgRecCount(wtblDataCG)
	
	'	Getting the count of expected search records			
		iSrchRecCntExp = funGetFltrRecCntPerPg(sClntGrpScr, sColName, sTestData)
		
	'	Checking if filter functionality working fine
		If iFilterRecCntExp = iFilterRecCntAct Then
			funHTMLResult "Pass", "Check search functionality for column : " & sColName & " when " & sTestData & " is used", "Successfully verified the search functionality. Expected Count : " & iSrchRecCntExp & " & Actual Count : " & iSrchRecCntAct
		Else
			funHTMLResult "Fail", "Check search functionality for column : " & sColName & " when " & sTestData & " is used", "Failed as search functionality is not working fine. Expected Count : " & iSrchRecCntExp & " & Actual Count : " & iSrchRecCntAct
		End If
	Next
End Function


'*******************************************************************************************************************
'  Function Name	   	:   funFormatChkAddClntGrp
'  Function Description :   Function for checking the fields format in 'Add New Client Group' window of 'Client Groups' screen
'  Function Parameters  :	None
'  Date Created      	:   7th Mar, 2017
'  Author               :  	Karan Mehta
'  Last modified  on    :  	
'*******************************************************************************************************************
Public Function funChkFormatAddClntGrp()
	
Dim bSheetExist 'Reference variable for checking the existence of TestData sheet
Dim iLoop, iLoop1 'Reference variable for iteration
Dim iRecCountSheet 'Reference variable for getting the count of records in the TestData sheet

arrColsTDSheet = Array("ID", "Name", "BtnSave", "Name_Validation", "ID_Validation") 'Array storing the column names of TestData sheet
	
'	Clicking 'Add Client Group' link
	funClickObject wlnkAddClntGrpCG, "'Add Client Group' link"
	
'	Checking the existence of elements in the 'Add New Client Group' window
	funChkElementsInClntGrpWin arrWinNameCG(0)
	
'	Checking the existence of TestData sheet
	CheckSheetExistence sTDFileCG, sAddFormatSheetCG, bSheetExist
	
'	Importing the TestData (if sheet exists) and creating the object for DataTable sheet
	If bSheetExist Then
		DataTable.AddSheet sAddFormatSheetCG
		DataTable.ImportSheet sTDFileCG, sAddFormatSheetCG, sAddFormatSheetCG
		Set objDTSheet = DataTable.GetSheet(sAddFormatSheetCG)
	Else
		funHTMLResult "Fail", "Check Test Data sheet existence", "Failed as Test Data sheet : " & sAddFormatSheetCG & " does not exists at path : " &  sTDFileCG
		ExitTest	
	End If
	
'	Getting the count of records in the TestData sheet
	iRecCountSheet = objDTSheet.GetRowCount
	
'	Loop for checking the fields format
	For iLoop = 1 To iRecCountSheet
	
	'	Setting the row in the sheet
		objDTSheet.SetCurrentRow iLoop
		
	'	Loop for getting the TestData for selected column in TestData sheet
		For iLoop1 = 0 To UBound(arrColsTDSheet)
		
		'	Getting the value of selected column
			sTestData = objDTSheet.GetParameter(arrColsTDSheet(iLoop1)).Value
		
		'	Checking the condition in TestData sheet and performing the action accordingly
			Select Case arrColsTDSheet(iLoop1)
				
				Case "ID"
				
				'	Checking if unique 'ID' needs to be selected. If required, getting unique 'ID' and populating the field
					If UCase(Trim(sTestData)) = "GET_UNIQUE_DATA" Then
						sTestData = funGetUniqueDataInCG(arrWinNameCG(0), arrElmntsAddClntGrpCG(0))	
					Else
						funSetValueInEditBox wedIDAddClntGrpCG, "'ID' field", sTestData
					End If
				Case "Name"
				
				'	Checking if unique 'Name' needs to be selected. If required, getting unique 'Name' and populating the field
					If UCase(Trim(sTestData)) = "GET_UNIQUE_DATA" Then
						sTestData = funGetUniqueDataInCG(arrWinNameCG(0), arrElmntsAddClntGrpCG(1))	
					Else
						funSetValueInEditBox wedNameAddClntGrpCG, "'Name' field", sTestData
					End If
				Case "BtnSave"
				
				'	Checking if 'Save' button is disabled
					If UCase(Trim(sTestData)) = "DISABLE" Then
						Wait(2)
						funVerifygetROProperty wbtnSaveAddClntGrpCG, "'Save' button", "disabled", 1
					End If
				Case "Name_Validation"
				
					If UCase(Trim(sTestData)) = "TRUE" Then
					
					'	Getting the string displayed in the field
						sValue = funFetchROProperty(wedNameAddClntGrpCG, "'Name' field", "value")
					
					'	Checking if field is allowing to enter string having length of 30 characters
						If Len(sValue) = iMaxLenNameFldAddClntGrpCG Then
							funHTMLResult "Pass", "Check if string of length " & iMaxLenNameFldAddClntGrpCG & " is allowed in 'Name' field", "Successfully checked  that string of length " & iMaxLenNameFldAddClntGrpCG & " is allowed in 'Name' field."
						Else
							funHTMLResult "Fail", "Check if string of length " & iMaxLenNameFldAddClntGrpCG & " is allowed in 'Name' field", "Failed as string of length " & iMaxLenNameFldAddClntGrpCG & " is not allowed in 'Name' field."
						End If
						
					'	Checking the max. length of string allowed for 'Name' field
						funVerifygetROProperty wedNameAddClntGrpCG, "'Name' field", "max length", iMaxLenNameFldAddClntGrpCG
					End If
				Case "ID_Validation"
				
				'	Checking the existence of validation message to enter integer value for 'ID' field
					If UCase(Trim(sTestData)) = "TRUE" Then
						funObjectIsPresent welValMsgIDAddClntGrpCG, "validation message for 'ID' field", 10
					End If
			End Select
		Next	
	Next
	
'	Clicking on the 'Cancel' button in 'Add New Client Group' window
	funClickObject wbtnCnclAddClntGrpCG, "'Cancel' button"
End Function


'*******************************************************************************************************************
'  Function Name	   	:   funChkElementsInClntGrpWin
'  Function Description :   Function for checking the existence of fields in 'Add New Client Group' window of 'Client Groups' screen
'  Function Parameters  :	sWinName = Window Name
'  Date Created      	:   7th Mar, 2017
'  Author               :  	Karan Mehta
'  Last modified  on    :  	
'*******************************************************************************************************************
Public Function funChkElementsInClntGrpWin(ByVal sWinName)
	
Dim iLoop 'Reference variable for iteration	
	
'	Setting the window object and array containing field names based on window name
	If sWinName = arrWinNameCG(0) Then
		Set welElement = welAddClntGrpWinCG
		arrElements = arrElmntsAddClntGrpCG
	Else
		Set welElement = welEdtClntGrpWinCG
		arrElements = arrElmntsEdtClntGrpCG
	End If
	
'	Checking the existence of 'Add New Client Group'/'Edit Client Group' window
	bFlag = funObjectIsPresent(welElement, "'" & sWinName & "' window", 20)
	If bFlag = False Then
		funHTMLResult "Fail", "Check existence of '" & sWinName & "' window", "Failed as '" & sWinName & "' window does not appear."
		ExitTest
	End If
	
'	Loop for checking the existence of elements
	For iLoop = 0 To UBound(arrElements)
	
	'	Getting the object for the selected element
		Set welElement = funGetFieldObjClntGrp(sWinName, arrElements(iLoop))
		
	'	Checking the existence of required element	
		funObjectIsPresent welElement, "'" & arrElements(iLoop) & "' field/button", 10
	Next
End Function


'*******************************************************************************************************************
'  Function Name	   	:   funGetFieldObjClntGrp
'  Function Description :   Function for getting the object of fields in windows of 'Client Group' screen
'  Function Parameters  :	sScrName = Window Name, sFieldName = Field Name for which object is required
'  Date Created      	:   7th Mar, 2017
'  Author               :  	Karan Mehta
'  Last modified  on    :  	
'*******************************************************************************************************************
Public Function funGetFieldObjClntGrp(ByVal sScrName, ByVal sFieldName)
	
	Select Case sScrName
		
		Case arrWinNameCG(0)
			Select Case sFieldName
				Case "ID"
					Set welElement = wedIDAddClntGrpCG
				Case "Name"
					Set welElement = wedNameAddClntGrpCG
				Case "Active"
					Set welElement = wcbxActiveAddClntGrpCG
				Case "Save"
					Set welElement = wbtnSaveAddClntGrpCG
				Case "Cancel"
					Set welElement = wbtnCnclAddClntGrpCG
			End Select
		Case arrWinNameCG(1)
			Select Case sFieldName
				Case "ID"
					Set welElement = wedIDEdtClntGrpCG
				Case "Name"
					Set welElement = wedNameEdtClntGrpCG
				Case "Active"
					Set welElement = wcbxActiveEdtClntGrpCG
				Case "Save"
					Set welElement = wbtnSaveEdtClntGrpCG
				Case "Cancel"
					Set welElement = wbtnCnclEdtClntGrpCG
			End Select
	End Select
	
'	Setting the object as output of the function
	Set funGetFieldObjClntGrp = welElement
End Function

'*******************************************************************************************************************
'  Function Name	   	:   funGetUniqueDataInCG
'  Function Description :   Function for getting the unique data for fields of windows in 'Client Groups' screen
'  Function Parameters  :	sWinName = Window Name, sFieldName = Field name
'  Date Created      	:   9th Mar, 2017
'  Author               :  	Karan Mehta
'  Last modified  on    :  	
'*******************************************************************************************************************
Public Function funGetUniqueDataInCG(ByVal sWinName, ByVal sFieldName)
	
	Select Case sWinName
		Case arrWinNameCG(0)
			Select Case sFieldName
				Case arrElmntsAddClntGrpCG(0)
					Set welElement = wedIDAddClntGrpCG
					Set welValMsg = welValMsgExistIDAddClntGrpCG
				Case arrElmntsAddClntGrpCG(1)
					Set welElement = wedNameAddClntGrpCG
					Set welValMsg = welValMsgNameAddClntGrpCG
			End Select
		Case arrWinNameCG(1)
			Select Case sFieldName
				Case arrElmntsEdtClntGrpCG(0)
					Set welElement = wedIDEdtClntGrpCG
					Set welValMsg = welValMsgExistIDEdtClntGrpCG
				Case arrElmntsEdtClntGrpCG(1)
					Set welElement = wedNameEdtClntGrpCG
					Set welValMsg = welValMsgNameEdtClntGrpCG
			End Select
	End Select
	
'	Loop for getting the data which is already not present in the application
	Do
	'	Getting the value to be entered for the field
		Select Case sFieldName
			Case arrElmntsAddClntGrpCG(0)
				sValue = GetRandomString("N", 6, "U")
			Case arrElmntsAddClntGrpCG(1)
				sValue = GetRandomString("A", 10, "C")
		End Select
		
	'	Entering the value in the field
		funSetValueInEditBox welElement, "'" & sFieldName & "' field", sValue
		
	'	Checking if Code/Name entered is already present?
		bFlag = funCheckElementExistence(welValMsg, 3)
	Loop While bFlag
	
'	Setting the output of the function
	funGetUniqueDataInCG = sValue
End Function


'*******************************************************************************************************************
'  Function Name	   	:   funChkAddFuncInClntGrp
'  Function Description :   Function for checking the add functionality in 'Client Groups' screen
'  Function Parameters  :	sTDSheetName = Test Data sheet name
'  Date Created      	:   14th Mar, 2017
'  Author               :  	Karan Mehta
'  Last modified  on    :  	
'*******************************************************************************************************************
Public Function funChkAddFuncInClntGrp(ByVal sTDSheetName)

Dim iTblRecCntBef, iTblRecCntAft 'Reference variables for getting the count of records in table
Dim iLoop, iLoop1 'Reference variables for iteration
Dim bSheetExist 'Reference variable for checking the existence of TestData sheet
Dim iRecCountSheet 'Reference variable for getting the count of records in the TestData sheet

arrColsTDSheet = Array("ID", "Name", "Active", "BtnSave", "BtnCncl") 'Array storing the column names of TestData sheet

'	Getting the count of records from the table before performing the functionality
	iTblRecCntBef = funGetTotlRecInTable(welPgsPgtnCG, wtblDataCG)
	
'	Checking the existence of TestData sheet
	CheckSheetExistence sTDFileCG, sTDSheetName, bSheetExist
	
'	Importing the TestData (if sheet exists) and creating the object for DataTable sheet
	If bSheetExist Then
		DataTable.AddSheet sTDSheetName
		DataTable.ImportSheet sTDFileCG, sTDSheetName, sTDSheetName
		Set objDTSheet = DataTable.GetSheet(sTDSheetName)
	Else
		funHTMLResult "Fail", "Check Test Data sheet existence", "Failed as Test Data sheet : " & sTDSheetName & " does not exists at path : " &  sTDFileCG
		ExitTest	
	End If
	
'	Getting the count of records in the TestData sheet
	iRecCountSheet = objDTSheet.GetRowCount
	
'	Loop for checking the fields format
	For iLoop = 1 To iRecCountSheet
	
	'	Clicking 'Add Client Group' link
		funClickObject wlnkAddClntGrpCG, "'Add Client Group' link"
		
	'	Checking the existence of elements in the 'Add New Client Group' window
		funChkElementsInClntGrpWin arrWinNameCG(0)
	
	'	Setting the row in the sheet
		objDTSheet.SetCurrentRow iLoop
		
	'	Loop for getting the TestData for selected column in TestData sheet
		For iLoop1 = 0 To UBound(arrColsTDSheet)
		
		'	Getting the value of selected column
			sTestData = objDTSheet.GetParameter(arrColsTDSheet(iLoop1)).Value
			
		'	Checking the condition in TestData sheet and performing the action accordingly
			Select Case arrColsTDSheet(iLoop1)
				
				Case "ID"
				
				'	Checking if unique 'ID' needs to be selected. If required, getting unique 'ID' and populating the field
					If UCase(Trim(sTestData)) = "GET_UNIQUE_DATA" Then
						sTestData = funGetUniqueDataInCG(arrWinNameCG(0), arrElmntsAddClntGrpCG(0))	
					Else
						funSetValueInEditBox wedIDAddClntGrpCG, "'ID' field", sTestData
					End If
					
				'	Setting the 'Client Group ID' as output of function
					funChkAddFuncInClntGrp = sTestData
				Case "Name"
				
				'	Checking if unique 'Name' needs to be selected. If required, getting unique 'Name' and populating the field
					If UCase(Trim(sTestData)) = "GET_UNIQUE_DATA" Then
						sTestData = funGetUniqueDataInCG(arrWinNameCG(0), arrElmntsAddClntGrpCG(1))	
					Else
						funSetValueInEditBox wedNameAddClntGrpCG, "'Name' field", sTestData
					End If
				Case "Active"	
				
				'	Setting the 'Active' checkbox
					funSetCheckBox wcbxActiveAddClntGrpCG, "'Active' field", sTestData
				Case "BtnSave"
				
				'	Checking if 'Save' button needs to be clicked
					If UCase(Trim(sTestData)) = "CLICK" Then
						
					'	Clicking on the 'Save' button
						funClickObject wbtnSaveAddClntGrpCG, "'Save' button" 
						funWaitForLoadImgToDispr welLoadIconCG
	
					'	Getting the count of records from the table
						iTblRecCntAft = funGetTotlRecInTable(welPgsPgtnCG, wtblDataCG)
						
					'	Checking if record is added successfully
						If iTblRecCntAft = iTblRecCntBef + 1 Then
							funHTMLResult "Pass", "Check 'Add' functionality", "Successfully added a new record. Expected count : " & (iTblRecCntBef + 1) & " & Actual Count : " & iTblRecCntAft
						Else
							funHTMLResult "Fail", "Check 'Add' functionality", "Failed to add a new record. Expected count : " & (iTblRecCntBef + 1) & " & Actual Count : " & iTblRecCntAft
						End If
					End If
				Case "BtnCncl"
				
				'	Checking if 'Cancel' button needs to be clicked
					If UCase(Trim(sTestData)) = "CLICK" Then
						
					'	Clicking on the 'Cancel' button
						funClickObject wbtnCnclAddClntGrpCG, "'Cancel' button" 
						
					'	Checking if 'Add New Client Group' window disappears
						funCheckElementDisappearance  welAddClntGrpWinCG, "'Add New Client Group' window"
					End If
			End Select
		Next
	Next
End Function


'*******************************************************************************************************************
'  Function Name	   	:   funChkEditFuncInClntGrp
'  Function Description :   Function for checking the edit functionality in 'Client Groups' screen
'  Function Parameters  :	sClntGrpID = 'ID' of Client Group record where editing need to be performed
'  Date Created      	:   22nd Mar, 2017
'  Author               :  	Karan Mehta
'  Last modified  on    :  	
'*******************************************************************************************************************
Public Function funChkEditFuncInClntGrp(ByVal sClntGrpID)

Dim iLoop, iLoop1 'Reference variables for iteration
Dim bSheetExist 'Reference variable for checking the existence of TestData sheet
Dim iRecCountSheet 'Reference variable for getting the count of records in the TestData sheet

arrColsTDSheet = Array("Name", "Active", "BtnSave", "BtnCncl") 'Array storing the column names of TestData sheet

'	Setting the 'Client Group ID' in the search filter
	funSetFilterInAdmin wedtFltrCG, wbtnFltrCG, sClntGrpID
	
'	Getting the count of records filtered
	iFltrRecCount = funGetTotlRecInTable(welPgsPgtnCG, wtblDataCG)
	
'	Checking if any record is filtered?
	If iFltrRecCount = 0 Then
		funHTMLResult "Fail", "Check filter functionality", "Failed as no record appears when filter is applied for ID : " & sClntGrpID
		ExitTest
	End If
	
'	Setting the 'ID' column in 'ASCENDING' order
	funSortTblCols wtblHdrCG, arrClntGrpTblCols(1), arrSortType(0)
	
'	Getting the 'ID' value for the first record
	sIDFstRec = funGetDataFromTblInAdmin(wtblDataCG, wtblHdrCG, arrClntGrpTblCols(1), 2)
	
'	Checking if the searched record appears on top
	If Trim(sIDFstRec) = Trim(sClntGrpID) Then
		funHTMLResult "Pass", "Check if searched record appears on top", "Successfully checked that searched record appears on top. Expected Value : " & sClntGrpID & " & Actual Value : " & sIDFstRec
	Else
		funHTMLResult "Fail", "Check if searched record appears on top", "Failed as searched record doesn't appears on top. Expected Value : " & sClntGrpID & " & Actual Value : " & sIDFstRec
		ExitTest
	End If
	
'	Getting the value for 'Name' column
	sNameBef = funGetDataFromTblInAdmin(wtblDataCG, wtblHdrCG, arrClntGrpTblCols(2), 2)
	
'	Checking the existence of TestData sheet
	CheckSheetExistence sTDFileCG, sEdtFuncSheetCG, bSheetExist
	
'	Importing the TestData (if sheet exists) and creating the object for DataTable sheet
	If bSheetExist Then
		DataTable.AddSheet sEdtFuncSheetCG
		DataTable.ImportSheet sTDFileCG, sEdtFuncSheetCG, sEdtFuncSheetCG
		Set objDTSheet = DataTable.GetSheet(sEdtFuncSheetCG)
	Else
		funHTMLResult "Fail", "Check Test Data sheet existence", "Failed as Test Data sheet : " & sEdtFuncSheetCG & " does not exists at path : " &  sTDFileCG
		ExitTest	
	End If
	
'	Getting the count of records in the TestData sheet
	iRecCountSheet = objDTSheet.GetRowCount
	
'	Loop for checking the fields format
	For iLoop = 1 To iRecCountSheet
	
	'	Clicking 'Edit Client Group' icon for first record
		funClickObject welFstEdtIconCG, "'Edit Client Group' icon"
		
	'	Checking the existence of elements in the 'Edit Client Group' window
		funChkElementsInClntGrpWin arrWinNameCG(1)

	'	Setting the row in the sheet
		objDTSheet.SetCurrentRow iLoop
		
	'	Loop for getting the TestData for selected column in TestData sheet
		For iLoop1 = 0 To UBound(arrColsTDSheet)
		
		'	Getting the value of selected column
			sTestData = objDTSheet.GetParameter(arrColsTDSheet(iLoop1)).Value
			
		'	Checking the condition in TestData sheet and performing the action accordingly
			Select Case arrColsTDSheet(iLoop1)
				
				Case "Name"
				
				'	Checking if unique 'Name' needs to be selected. If required, getting unique 'Name' and populating the field
					If UCase(Trim(sTestData)) = "GET_UNIQUE_DATA" Then
						sTestData = funGetUniqueDataInCG(arrWinNameCG(1), arrElmntsEdtClntGrpCG(1))	
					Else
						funSetValueInEditBox wedNameEdtClntGrpCG, "'Name' field", sTestData
					End If
				Case "Active"	
				
				'	Setting the 'Active' checkbox
					funSetCheckBox wcbxActiveEdtClntGrpCG, "'Active' field", sTestData
				Case "BtnSave"
				
				'	Checking if 'Save' button needs to be clicked
					If UCase(Trim(sTestData)) = "CLICK" Then
					
					'	Getting the 'Name' field value after editing the record
						sNameEdit = funFetchROProperty(wedNameEdtClntGrpCG, "'Name' field", "value")
						
					'	Clicking on the 'Save' button
						funClickObject wbtnSaveEdtClntGrpCG, "'Save' button" 
						funWaitForLoadImgToDispr welLoadIconCG
	
					'	Getting the value for 'Name' column
						sNameTbl = funGetDataFromTblInAdmin(wtblDataCG, wtblHdrCG, arrClntGrpTblCols(2), 2)
						
					'	Checking if record is added successfully
						If Trim(sNameTbl) = Trim(sNameEdit) Then
							funHTMLResult "Pass", "Check 'Edit' functionality on clicking '" & arrElmntsEdtClntGrpCG(3) & "' button", "Successfully checked the edit functionality. Expected Value : " & sNameEdit & " & Actual Count : " & sNameTbl
						Else
							funHTMLResult "Fail", "Check 'Edit' functionality on clicking '" & arrElmntsEdtClntGrpCG(3) & "' button", "Failed to edit the record. Expected Value : " & sNameEdit & " & Actual Count : " & sNameTbl
						End If
					End If
				Case "BtnCncl"
				
				'	Checking if 'Cancel' button needs to be clicked
					If UCase(Trim(sTestData)) = "CLICK" Then
						
					'	Clicking on the 'Cancel' button
						funClickObject wbtnCnclEdtClntGrpCG, "'Cancel' button" 
						
					'	Checking if 'Add New Client Group' window disappears
						funCheckElementDisappearance  welEdtClntGrpWinCG, "'Edit Client Group' window"
						
					'	Getting the value for 'Name' column
						sNameTbl = funGetDataFromTblInAdmin(wtblDataCG, wtblHdrCG, arrClntGrpTblCols(2), 2)
						
					'	Checking if record is added successfully
						If Trim(sNameTbl) = Trim(sNameBef) Then
							funHTMLResult "Pass", "Check 'Edit' functionality on clicking '" & arrElmntsEdtClntGrpCG(4) & "' button", "Successfully checked the edit functionality. Expected Value : " & sNameBef & " & Actual Count : " & sNameTbl
						Else
							funHTMLResult "Fail", "Check 'Edit' functionality on clicking '" & arrElmntsEdtClntGrpCG(4) & "' button", "Failed to edit the record. Expected Value : " & sNameBef & " & Actual Count : " & sNameTbl
						End If
					End If
			End Select
		Next
	Next
End Function


'*******************************************************************************************************************
'  Function Name	   	:   funChkAddValForDupIDInCG
'  Function Description :   Function for checking the validation for duplicate 'ID' while adding record in 'Client Groups' screen
'  Function Parameters  :	None
'  Date Created      	:   23rd Mar, 2017
'  Author               :  	Karan Mehta
'  Last modified  on    :  	
'*******************************************************************************************************************
Public Function funChkAddValForDupIDInCG()
	
Dim sExistID 'Reference variable for getting the 'ID' 	
	
'	Getting the count of records in the table
	iTblRecCount = funGetTotlRecInTable(welPgsPgtnCG, wtblDataCG)
	
'	Checking if any record exists?
	If iTblRecCount = 0 Then
		
	'	Adding a new record if no such record exists
		funChkAddFuncInClntGrp sAddSheetCG
	End If
	
'	Getting the 'ID' value for the existing record
	sExistID = funGetDataFromTblInAdmin(wtblDataCG, wtblHdrCG, arrClntGrpTblCols(1), 2)
	
'	Clicking 'Add Client Group' link
	funClickObject wlnkAddClntGrpCG, "'Add Client Group' link"
		
'	Checking the existence of 'Add New Client Group' window
	bFlag = funObjectIsPresent(welAddClntGrpWinCG, "'Add New Client Group' window", 20)
	If bFlag = False Then
		ExitTest
	End If
	
'	Entering the existing 'ID' in 'ID' field
	funSetValueInEditBox wedIDAddClntGrpCG, "'ID' field", sExistID
	
'	Checking if validation message appears?
	funObjectIsPresent welValMsgExistIDAddClntGrpCG, "validation message for existing 'ID' value", 10
	
'	Clicking on the 'Cancel' button in 'Add New Client Group' window
	funClickObject wbtnCnclAddClntGrpCG, "'Cancel' button"
End Function




'''''''''''''''''''''''''''''''''''''''''''''''GROUP MAINTENANCE''''''''''''''''''''''''''''''''''''''''''''''

'*******************************************************************************************************************
'  Function Name	   	:   funChkAddFuncInGrpMaint
'  Function Description :   Function for checking the 'Add' functionality in 'Group Maintenance' screen
'  Function Parameters  :	None
'  Date Created      	:   28th Mar, 2017
'  Author               :  	Karan Mehta
'  Last modified  on    :  	
'*******************************************************************************************************************
Public Function funChkAddFuncInGrpMaint(ByVal sTDSheetName)
	
Dim iLoop, iLoop1 'Reference variables for iteration
Dim bSheetExist 'Reference variable for checking the existence of TestData sheet
Dim iRecCountSheet 'Reference variable for getting the count of records in the TestData sheet
Dim sGrpNameExp 'Reference variable for getting the Group name which is entered for adding a new record
Dim sExistGrpName 'Reference variable for storing the 'Group Name' of already existing record
Dim iTblRecCntBef, iCodeCntAft, iTblRecCntAftDel 'Reference variable for getting the count of records in table

arrColsTDSheet = Array("Group_Name", "Group_Description", "BtnSave", "BtnCncl", "bValidation") 'Array storing the column names of TestData sheet

'	Getting the 'Group Name' of already existing record
	sExistGrpName = funGetDataFromTblInAdmin(wtblDataGM, wtblHdrGM, arrTblColsGM(2), 2)

'	Getting the count of records from the table before performing the functionality
	iTblRecCntBef = funGetTotlRecInTable(welPgsPgtnGM, wtblDataGM)
	
'	Checking the existence of TestData sheet
	CheckSheetExistence sTDFileGM, sTDSheetName, bSheetExist
	
'	Importing the TestData (if sheet exists) and creating the object for DataTable sheet
	If bSheetExist Then
		DataTable.AddSheet sTDSheetName
		DataTable.ImportSheet sTDFileGM, sTDSheetName, sTDSheetName
		Set objDTSheet = DataTable.GetSheet(sTDSheetName)
	Else
		funHTMLResult "Fail", "Check Test Data sheet existence", "Failed as Test Data sheet : " & sTDSheetName & " does not exists at path : " &  sTDFileGM
		ExitTest	
	End If
	
'	Getting the count of records in the TestData sheet
	iRecCountSheet = objDTSheet.GetRowCount
	
'	Loop for checking the fields format
	For iLoop = 1 To iRecCountSheet
	
	'	Checking the existence of 'Add Group' window
		bFlag = funCheckElementExistence(welAddGrpWinGM, 3)
		If bFlag = False Then
		
		'	Clicking 'Add group' link
			funClickObject wlnkAddGrpGM, "'Add Group' link"
		
		'	Checking the existence of elements in the 'Add Group' window
			funChkElementsInGrpMainWin arrWinNameGM(0)	
		End If
	
	'	Setting the row in the sheet
		objDTSheet.SetCurrentRow iLoop
		
	'	Loop for getting the TestData for selected column in TestData sheet
		For iLoop1 = 0 To UBound(arrColsTDSheet)
		
		'	Getting the value of selected column
			sValue = objDTSheet.GetParameter(arrColsTDSheet(iLoop1)).Value
			sValue = Trim(sValue)
			
		'	Checking the condition in TestData sheet and performing the action accordingly
			Select Case arrColsTDSheet(iLoop1)
				Case "Group_Name"
				
				'	Checking the value in the TestData sheet for 'Group_Name' column
					Select Case sValue
					
						Case "GET_UNIQUE_DATA"
					
						'	Getting the unique 'Group Name' and entering it in the field
							sGrpNameExp = funGetUniqueDataInGM(arrWinNameGM(0), arrFldsAddGrpMainGM(0))
						Case Else
						'	Checking if duplicate data needs to be entered for 'Group Name' field or not
							If sValue = "GET_EXISTING_DATA" Then
								sValue = sExistGrpName
							End If
							
						'	Entering the value for Group Name field
							funSetValueInEditBox wedGrpNameAddGrpWinGM, "'Group Name' field", sValue
					End Select
				Case "Group_Description"
				
				'	Entering the value for Group Description field
					funSetValueInEditBox wedGrpDescAddGrpWinGM, "'Group Description' field", sValue
				Case "BtnSave"
				
				'	Check that 'Save' button is disabled or not
					If sValue = "DISABLE" Then
					
					'	Waiting after setting the fields to check if 'Save' button is disabled or not
						wait(2)
					
					'	Checking if the 'Save' button is disabled
						funVerifygetROProperty wbtnSaveAddGrpWinGM, "'Save' button", "disabled", 1
					ElseIf UCase(sValue) = "CLICK" Then	
					
					'	Clicking on the 'Save' button and wait till loading image appears
						funClickObject wbtnSaveAddGrpWinGM, "'Save' button"
						funWaitForLoadImgToDispr welLoadIconGM
						
					'	Getting the count of records in the table
						iTblRecCntAft = funGetTotlRecInTable(welPgsPgtnGM, wtblDataGM)
						
					'	Checking if the record is added successfully?
						If iTblRecCntAft = iTblRecCntBef + 1 Then
							funHTMLResult "Pass", "Check add functionality", "Successfully added a new record. Expected Count : " & (iTblRecCntBef + 1) & " & Actual Count : " & iTblRecCntAft
						
						'	Sorting the record in descending order of 'ID' column
							funSortTblCols wtblHdrGM, arrTblColsGM(1), arrSortType(1)
						
						'	Getting the value of 'Name' column for the first record
							sGrpNameAct = funGetDataFromTblInAdmin(wtblDataGM, wtblHdrGM, arrTblColsGM(2), 2)
							
						'	Checking if the newly added record appears on the top?
							If Trim(sGrpNameAct) = Trim(sGrpNameExp) Then
								funHTMLResult "Pass", "Check if newly added record appears on top", "Successfully checked that newly added record appears on top. Expected Value : " & sGrpNameExp & " & Actual Value : " & sGrpNameAct
							
							'	Checking if record needs to be deleted.
								If sTDSheetName = sAddFuncSheetGM Then
								
								'	Delete the newly added record
									funDelFstRecInGrpMaint()
								End If
							Else
								funHTMLResult "Fail", "Check if newly added record appears on top", "Failed as newly added record doesn't appear on top. Expected Value : " & sGrpNameExp & " & Actual Value : " & sGrpNameAct
							End If
						Else
							funHTMLResult "Fail", "Check add functionality", "Failed as new record is not added. Expected Count : " & (iTblRecCntBef + 1) & " & Actual Count : " & iTblRecCntAft
						End If
					End If
				Case "BtnCncl"
				
				'	Checking if button needs to be clicked
					If UCase(sValue) = "CLICK" Then
						
					'	Clicking on the 'Cancel' button
						funClickObject wbtnCnclAddGrpWinGM, "'Cancel' button"
					
					'	Checking if 'Add Group' window disappears
						funCheckElementDisappearance  welAddGrpWinGM, "'Add Group' window"
					End If
				Case "bValidation"
				
				'	Checking if validation message existence needs to be checked
					If UCase(sValue) = "TRUE" Then
					
					'	Checking the existence of validation message for duplicate Group Name
						funObjectIsPresent welValMsgGrpNameAddGrpGM, "validation message for duplicate 'Group Name'", 10
					End If
			End Select
		Next
	Next
End Function


'*******************************************************************************************************************
'  Function Name	   	:   funChkElementsInGrpMainWin
'  Function Description :   Function for checking the existence of elements in 'Group Maintenance' screen
'  Function Parameters  :	sWinName = Window Name
'  Date Created      	:   28th Mar, 2017
'  Author               :  	Karan Mehta
'  Last modified  on    :  	
'*******************************************************************************************************************
Public Function funChkElementsInGrpMainWin(ByVal sWinName)
	
Dim iLoop 'Reference variable for iteration	
	
'	Setting the window object and array containing field names based on window name
	If sWinName = arrWinNameGM(0) Then
		Set welElement = welAddGrpWinGM
		arrElements = arrElmntsAddGrpMainGM
	Else
		Set welElement = welEdtGrpWinGM
		arrElements = arrElmntsEdtGrpMainGM
	End If
	
'	Checking the existence of 'Add New Client Group'/'Edit Client Group' window
	bFlag = funObjectIsPresent(welElement, "'" & sWinName & "' window", 20)
	If bFlag = False Then
		funHTMLResult "Fail", "Check existence of '" & sWinName & "' window", "Failed as '" & sWinName & "' window does not appear."
		ExitTest
	End If
	
'	Loop for checking the existence of elements
	For iLoop = 0 To UBound(arrElements)
	
	'	Getting the object for the selected element
		Set welElement = funGetFieldObjGrpMain(sWinName, arrElements(iLoop))
		
	'	Checking the existence of required element	
		funObjectIsPresent welElement, "'" & arrElements(iLoop) & "' field/button", 10
	Next
End Function


'*******************************************************************************************************************
'  Function Name	   	:   funGetFieldObjGrpMain
'  Function Description :   Function for getting the object of fields in windows of 'Group Maintenance' screen
'  Function Parameters  :	sScrName = Window Name, sFieldName = Field Name for which object is required
'  Date Created      	:   28th Mar, 2017
'  Author               :  	Karan Mehta
'  Last modified  on    :  	
'*******************************************************************************************************************
Public Function funGetFieldObjGrpMain(ByVal sWinName, ByVal sFieldName)

	Select Case sWinName
	
	'	Setting the objects for 'Add Group' window
		Case arrWinNameGM(0)
			Select Case sFieldName
				Case "Group Name"
					Set welElement = wedGrpNameAddGrpWinGM	'Object for 'Group Name' field
				Case "Group Description"
					Set welElement = wedGrpDescAddGrpWinGM 'Object for 'Group Description' field
				Case "Save"
					Set welElement = wbtnSaveAddGrpWinGM 'Object for 'Save' button
				Case "Cancel"
					Set welElement = wbtnCnclAddGrpWinGM 'Object for 'Cancel' button
			End Select
			
	'	Setting the objects for 'Edit Group' window
		Case arrWinNameGM(1)
			Select Case sFieldName
				Case "Group Name"
					Set welElement = wedGrpNameEdtGrpWinGM 'Object for 'Group Name' field
				Case "Group Description"
					Set welElement = wedGrpDescEdtGrpWinGM 'Object for 'Group Description' field
				Case "Save"
					Set welElement = wbtnSaveEdtGrpWinGM 'Object for 'Save' button
				Case "Cancel"
					Set welElement = wbtnCnclEdtGrpWinGM 'Object for 'Cancel' button
			End Select
		
		Case arrWinNameGM(2)
			Select Case sFieldName
				Case "Module"
					Set welElement = wlstModAddAccRhtGM
				Case "Screen"
					Set welElement = wlstScrAddAccRhtGM
				Case "Functionality"
					Set welElement = wlstFuncAddAccRhtGM
				Case "Access Type>>Full Access"
					Set welElement = welFullAddAccRhtGM
				Case "Access Type>>Partial Access"
					Set welElement = welPrtlAddAccRhtGM
				Case "Access Type>>Read Access"
					Set welElement = welRdOnlyAddAccRhtGM
				Case "Access Type>>No Access"
					Set welElement = welNoneAddAccRhtGM
				Case "Save"
				
				Case "Cancel"
					
			End Select
		
		Case arrWinNameGM(3)
			
	End Select

'	Setting the output of the function
	Set funGetFieldObjGrpMain = welElement
End Function


'*******************************************************************************************************************
'  Function Name	   	:   funGetUniqueDataInGM
'  Function Description :   Function for getting the unique data for fields of 'Add Group'/'Edit Group' window 
'							in 'Group Maintenance' screen
'  Function Parameters  :	sWinName = Window Name, sFieldName = Field Name
'  Date Created      	:   28th Mar, 2017
'  Author               :  	Karan Mehta
'  Last modified  on    :  	
'*******************************************************************************************************************
Public Function funGetUniqueDataInGM(ByVal sWinName, ByVal sFieldName)

'	Setting the object of the field where value needs to be entered and corresponding validation msg which can appear
	Select Case sWinName
		Case arrWinNameGM(0)
			Select Case sFieldName
				Case arrFldsAddGrpMainGM(0)
					Set welElement = wedGrpNameAddGrpWinGM
					Set welValMsg = welValMsgGrpNameAddGrpGM
			End Select
	End Select
	
'	Loop for getting the data which is already not present in the application
	Do
	'	Getting the value to be entered for the field
		sValue = GetRandomString("A", 12, "U")
		
	'	Entering the value in the field
		funSetValueInEditBox welElement, "'" & sFieldName & "' field", sValue
		
	'	Checking if validation message appears?
		bFlag = funCheckElementExistence(welValMsg, 3)
	Loop While bFlag
	
'	Setting the output of the function
	funGetUniqueDataInGM = sValue
End Function


'*******************************************************************************************************************
'  Function Name	   	:   funDelFstRecInGrpMaint
'  Function Description :   Function for deleting the first record in 'Group Maintenance' screen 
'  Function Parameters  :	None
'  Date Created      	:   29th Mar, 2017
'  Author               :  	Karan Mehta
'  Last modified  on    :  	
'*******************************************************************************************************************
Public Function funDelFstRecInGrpMaint()

'	Getting the count of records in the table before performing delete operation
	iTblRecCntBef = funGetTotlRecInTable(welPgsPgtnGM, wtblDataGM)
	
'	Clicking on the delete group icon
	funClickObject welDelFstRecGM, "'Delete' icon for first record in table"
	
'	Checking the existence of validation dialog for deleting the record
	bFlag = funObjectIsPresent(welDelDlgGM, "validation dialog for deleting the record", 20)
	If bFlag = False Then
		ExitTest
	End If
		
'	Clicking on the 'Delete' icon of validation dialog
	funClickObject wbtnDelDelDlgGM, "'Delete' button in validation dialog"

'	Checking if the validation dialog disappears
	funCheckElementDisappearance welModDelDlgModSI, "validation dialog while deleting the module"

'	Getting the count of records in the table after performing the Delete operation
	iTblRecCntAft = funGetTotlRecInTable(welPgsPgtnGM, wtblDataGM)

'	Checking if the record gets deleted successfully?
	If iTblRecCntAft = iTblRecCntBef - 1 Then
		funHTMLResult "Pass", "Check deletion of record", "Successfully checked that record gets deleted. Expected Count : " & (iTblRecCntBef-1) & " & Actual Count : " & iTblRecCntAft
	Else
		funHTMLResult "Fail", "Check deletion of record", "Failed as record doesn't get deleted. Expected Count : " & (iTblRecCntBef-1) & " & Actual Count : " & iTblRecCntAft
	End If
End Function


'*******************************************************************************************************************
'  Function Name	   	:   funChkEdtDelFuncInGrpMain
'  Function Description :   Function for checking the edit and delete functionality in 'Group Maintenance' screen 
'  Function Parameters  :	None
'  Date Created      	:   29th Mar, 2017
'  Author               :  	Karan Mehta
'  Last modified  on    :  	
'*******************************************************************************************************************
Public Function funChkEdtDelFuncInGrpMain()

Dim iLoop, iLoop1 'Reference variables for iteration
Dim bSheetExist 'Reference variable for checking the existence of TestData sheet
Dim iRecCountSheet 'Reference variable for getting the count of records in the TestData sheet
Dim sNameBef, sNameAft 'Reference variable for getting the Group name of the record
Dim iTblRecCntBef, iTblRecCntAft 'Reference variable for getting the count of records in table

arrColsTDSheet = Array("bDelete", "Group_Name", "Group_Description", "BtnSave", "BtnCncl", "DlgBtnDel", "DlgBtnCncl")
	
'	Checking the existence of TestData sheet
	CheckSheetExistence sTDFileGM, sEdtDelFuncSheetGM, bSheetExist
	
'	Importing the TestData (if sheet exists) and creating the object for DataTable sheet
	If bSheetExist Then
		DataTable.AddSheet sEdtDelFuncSheetGM
		DataTable.ImportSheet sTDFileGM, sEdtDelFuncSheetGM, sEdtDelFuncSheetGM
		Set objDTSheet = DataTable.GetSheet(sEdtDelFuncSheetGM)
	Else
		funHTMLResult "Fail", "Check Test Data sheet existence", "Failed as Test Data sheet : " & sEdtDelFuncSheetGM & " does not exists at path : " &  sTDFileGM
		ExitTest	
	End If
	
'	Getting the count of records in the TestData sheet
	iRecCountSheet = objDTSheet.GetRowCount
	
'	Adding a new record in the 'Group Maintenance' screen
	funChkAddFuncInGrpMaint sAddSheetGM
	
'	Getting the 'Name' of the newly added record
	sNameBef = funGetDataFromTblInAdmin(wtblDataGM, wtblHdrGM, arrTblColsGM(2), 2)

'	Loop for checking the fields format
	For iLoop = 1 To iRecCountSheet
	
	'	Setting the row in the sheet
		objDTSheet.SetCurrentRow iLoop
		
	'	Loop for getting the TestData for selected column in TestData sheet
		For iLoop1 = 0 To UBound(arrColsTDSheet)
		
		'	Getting the value of selected column
			sValue = objDTSheet.GetParameter(arrColsTDSheet(iLoop1)).Value
			sValue = Trim(sValue)
			
		'	Checking the condition in TestData sheet and performing the action accordingly
			Select Case arrColsTDSheet(iLoop1)
	
				Case "bDelete"
					If UCase(sValue) = "FALSE" Then
					
					'	Checking the existence of 'Edit Group' window
						bFlag = funCheckElementExistence(welEdtGrpWinGM, 3)
						If bFlag = False Then
							
						'	Clicking on the edit icon for the first record
							funClickObject welEdtFstRecGM, "'Edit' icon for first record"
							
						'	Checking the existence of elements in 'Edit Group' window
							funChkElementsInGrpMainWin arrWinNameGM(1)	
						End If
					Else
					'	Getting the count of records before performing 'Delete' operation
						iTblRecCntBef = funGetTotlRecInTable(welPgsPgtnGM, wtblDataGM)
					
					'	Clicking on the 'Delete' icon for the first record
						funClickObject welDelFstRecGM, "'Delete' icon for first record"
						
					'	Checking the existence of 'Delete' dialog
						bFlag = funObjectIsPresent(welDelDlgGM, "'Delete' dialog", 20)
						If bFlag = False Then
							ExitTest
						End If
					End If	
				Case "Group_Name"
					
				'	Checking the value in the TestData sheet for 'Group_Name' column
					If sValue = "GET_UNIQUE_DATA" Then
					
					'	Setting the unique 'Group Name' in the field
						funGetUniqueDataInGM arrWinNameGM(1), arrFldsEdtGrpMainGM(0)
					End If
				Case "Group_Description"
				
					'	Checking if 'Group Description' needs to be entered
						If UCase(sValue) <> "FALSE" Then

						'	Entering the value for 'Group Description' field
							funSetValueInEditBox wedGrpDescEdtGrpWinGM, "'Group Description' field", sValue						
						End If
				Case "BtnSave"
				'	Checking if button needs to be clicked
					If UCase(sValue) = "CLICK" Then
					
					'	Clicking on the 'Save' button
						funClickObject wbtnSaveEdtGrpWinGM, "'Save' button"
						funWaitForLoadImgToDispr welLoadIconGM
						
					'	Getting the Name of the first record
						sNameAft = funGetDataFromTblInAdmin(wtblDataGM, wtblHdrGM, arrTblColsGM(2), 2)
						
					'	Checking if the record is edited?
						If sNameBef <> sNameAft Then
							funHTMLResult "Pass", "Check if record is edited on clicking 'Save' button", "Successfully checked that record is edited. Value before editing : " & sNameBef & " & Value after editing : " & sNameAft
						Else
							funHTMLResult "Fail", "Check if record is edited on clicking 'Save' button", "Failed as record is not edited. Value before editing : " & sNameBef & " & Value after editing : " & sNameAft
						End If	
					End If
				Case "BtnCncl"
				'	Checking if button needs to be clicked
					If UCase(sValue) = "CLICK" Then
						
					'	Clicking on the 'Cancel' button
						funClickObject wbtnCnclEdtGrpWinGM, "'Cancel' button"
						
					'	Wait for window to disappear
						funCheckElementDisappearance welEdtGrpWinGM, "'Edit Group' window"
						
					'	Getting the Name of the first record
						sNameAft = funGetDataFromTblInAdmin(wtblDataGM, wtblHdrGM, arrTblColsGM(2), 2)
						
					'	Checking if the record is not edited?
						If sNameBef = sNameAft Then
							funHTMLResult "Pass", "Check if record is edited on clicking 'Cancel' button", "Successfully checked that record is not edited. Expected Value : " & sNameBef & " & Actual Value : " & sNameAft
						Else
							funHTMLResult "Fail", "Check if record is edited on clicking 'Cancel' button", "Failed as record got edited. Expected Value : " & sNameBef & " & Actual Value : " & sNameAft
						End If	
					End If	
				Case "DlgBtnDel"
					If UCase(sValue) = "CLICK" Then
						
					'	Clicking on the 'Delete' button of confirmation dialog for deleting the record
						funClickObject wbtnDelDelDlgGM, "'Delete' button"
						
					'	Waiting till validation dialog disappears
						funCheckElementDisappearance welDelDlgGM, "validation dialog for deleting the record"
						
					'	Getting the count of records in the table
						iTblRecCntAft = funGetTotlRecInTable(welPgsPgtnGM, wtblDataGM)
					
					'	Checking if the record is deleted successfully?
						If iTblRecCntAft = iTblRecCntBef - 1 Then
							funHTMLResult "Pass", "Check record deletion on clicking 'Delete' button of validation dialog", "Successfully deleted the record. Expected Count : " & (iTblRecCntBef - 1) & " & Actual Count : " & iTblRecCntAft
						Else
							funHTMLResult "Fail", "Check record deletion on clicking 'Delete' button of validation dialog", "Failed as record is not deleted. Expected Count : " & (iTblRecCntBef - 1) & " & Actual Count : " & iTblRecCntAft
						End If
					End If
				Case "DlgBtnCncl"
					If UCase(sValue) = "CLICK" Then
						
					'	Clicking on the 'Cancel' button of confirmation dialog for deleting the record
						funClickObject wbtnCnclDelDlgGM, "'Cancel' button"
						
					'	Waiting till validation dialog disappears
						funCheckElementDisappearance welDelDlgGM, "validation dialog for deleting the record"
						
					'	Getting the count of records in the table
						iTblRecCntAft = funGetTotlRecInTable(welPgsPgtnGM, wtblDataGM)
					
					'	Checking if the record is deleted successfully?
						If iTblRecCntAft = iTblRecCntBef Then
							funHTMLResult "Pass", "Check record deletion on clicking 'Cancel' button of validation dialog", "Successfully checked that record is not deleted. Expected Count : " & iTblRecCntBef & " & Actual Count : " & iTblRecCntAft
						Else
							funHTMLResult "Fail", "Check record deletion on clicking 'Cancel' button of validation dialog", "Failed as record is deleted. Expected Count : " & iTblRecCntBef & " & Actual Count : " & iTblRecCntAft
						End If
					End If
			End Select
		Next
	Next
End Function


'*******************************************************************************************************************
'  Function Name	   	:   funChkSortInMangAccGM
'  Function Description :   Function for checking the sort functionality in 'Request Access' section of 'Group Maintenance' screen 
'  Function Parameters  :	None
'  Date Created      	:   29th Mar, 2017
'  Author               :  	Karan Mehta
'  Last modified  on    :  	
'*******************************************************************************************************************
Public Function funChkSortInMangAccGM()
	
'	Sorting the records in 'Ascending' order of 'ID' field
	funSortTblCols wtblHdrGM, arrTblColsGM(1), arrSortType(0)
	
'	Clicking on the 'Access Rights' for the first record
	funClickObject welAccRtFstRecGM, "'Access Rights' icon for first record"
	funWaitForLoadImgToDispr welLoadIconGM
	
'	Checking if 'Access Rights' section is displayed
	bFlag = funObjectIsPresent(wtblDataRtGM, "'Access Rights' section in 'Group Maintenance' screen", 20)
	If bFlag = False Then
		ExitTest
	End If
	
'	Checking the 'Sorting' functionality
	funCheckSortInAdmin sGrpMainScr
End Function


'*******************************************************************************************************************
'  Function Name	   	:   funOpenMngAccessRghtsScr
'  Function Description :   Function for opening the 'Manage Access Rights' section of 'Group Maintenance' screen 
'  Function Parameters  :	None
'  Date Created      	:   10th Apr, 2017
'  Author               :  	Karan Mehta
'  Last modified  on    :  	
'*******************************************************************************************************************
Public Function funOpenMngAccessRghtsScr()
	
'	Clicking on the 'Access Rights' icon for first record in 'Group Maintenance' screen
	funClickObject welAccRtFstRecGM, "'Access Rights' icon for first record"
	funWaitForLoadImgToDispr welLoadIconGM
	
'	Checking the existence of 'Access Rights' screen
	bFlag = funObjectIsPresent(welScrAccRhtGM, "'Manage Access Rights' screen", 20)
	If bFlag = False Then
		ExitTest
	End If
End Function


'*******************************************************************************************************************
'  Function Name	   	:   funChkGrpAccessRghtsFunc
'  Function Description :   Function for checking the 'Access Rights' functionality in 'Group Maintenance' screen 
'  Function Parameters  :	None
'  Date Created      	:   11th Apr, 2017
'  Author               :  	Karan Mehta
'  Last modified  on    :  	
'*******************************************************************************************************************
Public Function funChkGrpAccessRghtsFunc()

Dim iLoop, iLooop1, iLoop2 'Reference variable for iteration
Dim iTblRecCntBef, iTblRecCntAft 'Reference variables for getting the count of records in the table
Dim sValue 'Reference variable for storing the TestData

arrTDFileCols = Array("Function", "Module", "Screen", "Functionality", "Access_Type", "btnSave", "btnCncl", "btnDlgDel", "btnDlgCncl") 'Array for storing the column names in TestData sheet
arrDefValFlds = Array("Module", "Screen", "Functionality", "Access Type")
arrDefValExp = Array("Main", "Home", "Main", "FullAccess")

'	Adding a record in 'Group Maintenance' screen
	funChkAddFuncInGrpMaint sAddSheetGM

'	Opening the 'Manage Access Rights' screen
	funOpenMngAccessRghtsScr()
	
'	Checking the existence of TestData file
	CheckSheetExistence sTDFileGM, sAccRghtFunc, bSheetExist
	
'	Checking if TestData sheet exists?
	If bSheetExist Then
		
	'	Importing the TestData file
		DataTable.AddSheet sAccRghtFunc
		DataTable.ImportSheet sTDFileGM, sAccRghtFunc, sAccRghtFunc
		
	'	Setting the object of sheet in DataTable
		Set objDTSheet = DataTable.GetSheet(sAccRghtFunc)
		
	'	Getting the count of records in the TestData sheet
		iRecCountSheet = objDTSheet.GetRowCount
	Else
		funHTMLResult "Fail", "Check existence of TestData sheet", "Failed as sheet : " & sAccRghtFunc & " does not exists in file present at path : " & sTDFileGM
		ExitTest
	End If
	
'	Loop for checking the functionality
	For iLoop = 1 To iRecCountSheet
	
	'	Settting the current row in the sheet
		objDTSheet.SetCurrentRow iLoop
	
	'	Loop for getting the value of the selected column from the sheet
		For iLoop1 = 0 To UBound(arrTDFileCols)
			
		'	Getting the value of the cell from the sheet
			sValue = objDTSheet.GetParameter(arrTDFileCols(iLoop1)).Value
			
			Select Case arrTDFileCols(iLoop1)
			
				Case "Function"
				
				'	Getting the value for the 'Functionality' column
					sFunctionality = sValue
				
				'	Checking the functionality
					Select Case sFunctionality
						Case "Add"
							Set welClickElem = wlnkAddRhtGM
							Set welElemExist = welAddNewRhtWinGM
							sIcon = "'Add Rights' icon"
							sWindow = "'Add New Rights' window"
						Case "Edit"
							Set welClickElem = welFstEdtRhtGM
							Set welElemExist = welEdtRhtWinGM
							sIcon = "'Edit Rights' icon"
							sWindow = "'Edit Rights' window"
						Case "Delete"
							Set welClickElem = welFstDelRhtGM
							Set welElemExist = welDelDlgAccRhtGM
							sIcon = "'Delete Rights' icon"
							sWindow = "'Delete' dialog"
					End Select
					
				'	Getting the count of records in the table
					iTblRecCntBef = funGetTotlRecInTable(welPgsPgtnGM, wtblDataRtGM)
					
				'	Clicking on the required icon
					funClickObject welClickElem, sIcon
					
				'	Checking the existence of window/dialog
					bFlag = funObjectIsPresent(welElemExist, sWindow, 20)
					If bFlag = False Then
						ExitTest
					Else
					'	Checking the functionality
						If sValue = "Add" Then
							
						'	Waiting for the fields to be populated
							Wait(5)
							
						'	Loop for checking the default value of the fields
							For iLoop2 = 0 To UBound(arrDefValFlds)
								
							'	Getting the actual default value for the selected field
								If arrDefValFlds(iLoop2) = "Access Type" Then
									sDefValAct = funFetchROProperty(wrbDefAccTypeAddRhtGM, "default value for 'Access Type' field", "value")
								Else
									Set welElement = funGetFieldObjGrpMain(arrWinNameGM(2), arrDefValFlds(iLoop2))
									sDefValAct = funFetchROProperty(welElement, "'" & arrDefValFlds(iLoop2) & "' field", "value")
								End If
								
							'	Checking if default value for the selected field is proper
								If Trim(sDefValAct) = Trim(arrDefValExp(iLoop2)) Then
									funHTMLResult "Pass", "Check default value for '" & arrDefValFlds(iLoop2) & "' field", "Successfully checked the default value. Expected Value : " & arrDefValExp(iLoop2) & " & Actual Value : " & sDefValAct
								Else
									funHTMLResult "Fail", "Check default value for '" & arrDefValFlds(iLoop2) & "' field", "Failed as default value is not proper. Successfully checked the default value. Expected Value : " & arrDefValExp(iLoop2) & " & Actual Value : " & sDefValAct
								End If
							Next					
						
						End If
					End If
				Case "Module", "Screen", "Functionality"
				
				'	Checking if 'Add' functionality need to be performed
					If sFunctionality = "Add" Then
						
					'	Getting the object of the field and selecting the value in the list
						Set welElement = funGetFieldObjGrpMain(arrWinNameGM(2), arrTDFileCols(iLoop1))
						funSelectFromList welElement, "'" & arrTDFileCols(iLoop1) & "' field", sValue
					End If
				Case "Access_Type"
				
				'	Checking if any data is present for the selected cell in the TestData sheet
					If Len(sValue) > 0 Then
						
					'	Getting the object and selecting the radio button
						Set welElement = funGetFieldObjGrpMain(arrWinNameGM(2), "Access Type>>" & sValue)
						funClickObject welElement, "'Access Type>>" & sValue & "' radio button"
					End If
				Case "btnSave"
					
				'	Checking if 'Click' operation needs to be performed
					If sValue = "CLICK" Then
					
					'	Setting the object for 'Save' button based on the functionality to be performed
						If sFunctionality = "Add" Then
							Set wbtnSaveAccRht = wbtnSaveAddAccRhtGM
						Else
							Set wbtnSaveAccRht = wbtnSaveEdtAccRhtGM
						End If
				
					'	Clicking on the 'Save' button and waiting till loading image is getting displayed
						funClickObject wbtnSaveAccRht, "'Save' button"
						funWaitForLoadImgToDispr welLoadIconGM
						
						Select Case sFunctionality
							Case "Add"
							
							'	Getting the count of records in the table
								iTblRecCntAft = funGetTotlRecInTable(welPgsPgtnGM, wtblDataRtGM)
								
							'	Checking if right record is not added in the table as 'Save' button is clicked
								If iTblRecCntAft = (iTblRecCntBef + 1) Then
									funHTMLResult "Pass", "Check record addition on clicking 'Save' button of window", "Successfully checked that record is added in the table. Expected Records : " & (iTblRecCntBef+1) & " & Actual Records : " & iTblRecCntAft
								Else
									funHTMLResult "Fail", "Check record addition on clicking 'Save' button of window", "Failed as record is not added in the table. Expected Records : " & (iTblRecCntBef+1) & " & Actual Records : " & iTblRecCntAft
									ExitTest
								End If
							Case "Edit"
							
							'	Getting the value for 'Access Type' field (value selected while editing)
								sAccessTypeEditVal = objDTSheet.GetParameter(arrTDFileCols(4)).Value
								
							'	Getting the 'Access Type' of record from table
								sAccessTypeTbl = funGetDataFromTblInAdmin(wtblDataRtGM, wtblHdrRtGM, arrTblColsRtGM(4), 2)
								
							'	Checking if the record is edited successfully?
								If Trim(sAccessTypeEditVal) = Trim(sAccessTypeTbl) Then
									funHTMLResult "Pass", "Check 'Edit' functionality on clicking 'Save' button", "Successfully checked the editing of 'Access Type' field. Expected Value : " & sAccessTypeEditVal & " & Actual Value : " & sAccessTypeTbl
								Else
									funHTMLResult "Fail", "Check 'Edit' functionality on clicking 'Save' button", "Failed as 'Access Type' field is not edited. Expected Value : " & sAccessTypeEditVal & " & Actual Value : " & sAccessTypeTbl
								End If
						End Select
					End If
				Case "btnCncl"
				
				'	Checking if 'Click' operation needs to be performed
					If sValue = "CLICK" Then
					
					'	Checking if 'Add' functionality needs to be checked. Based on the functionality, setting the objects
						If sFunctionality = "Add" Then
							Set wbtnCnclAccRht = wbtnCnclAddAccRhtGM
							Set welWindow = welAddNewRhtWinGM
							sWindow = "'Add New Rights' window"
						Else
							Set wbtnCnclAccRht = wbtnCnclEdtAccRhtGM
							Set welWindow = welEdtRhtWinGM
							sWindow = "'Edit Rights' window"
						End If
				
					'	Clicking on the 'Cancel' button and checking the disappearance of window
						funClickObject wbtnCnclAccRht, "'Cancel' button"
						funCheckElementDisappearance welWindow, sWindow
						
						Select Case sFunctionality
							Case "Add"
							
							'	Getting the count of records in the table
								iTblRecCntAft = funGetTotlRecInTable(welPgsPgtnGM, wtblDataRtGM)
								
							'	Checking if right record is not added in the table as 'Cancel' button is clicked
								If iTblRecCntBef = iTblRecCntAft Then
									funHTMLResult "Pass", "Check record addition on clicking 'Cancel' button of window", "Successfully checked that record is not added in the table. Expected Records : " & iTblRecCntBef & " & Actual Records : " & iTblRecCntAft
								Else
									funHTMLResult "Fail", "Check record addition on clicking 'Cancel' button of window", "Failed as record is added in the table. Expected Records : " & iTblRecCntBef & " & Actual Records : " & iTblRecCntAft
								End If
							Case "Edit"
								
							'	Getting the value for 'Access Type' field (value selected while editing)
								sAccessTypeEditVal = objDTSheet.GetParameter(arrTDFileCols(4)).Value
								
							'	Getting the 'Access Type' of record from table
								sAccessTypeTbl = funGetDataFromTblInAdmin(wtblDataRtGM, wtblHdrRtGM, arrTblColsRtGM(4), 2)
								
							'	Checking if the record is edited successfully?
								If Trim(sAccessTypeEditVal) <> Trim(sAccessTypeTbl) Then
									funHTMLResult "Pass", "Check 'Edit' functionality on clicking 'Cancel' button", "Successfully checked that 'Access Type' field is not edited. Edited Value : " & sAccessTypeEditVal & " & Table Value : " & sAccessTypeTbl
								Else
									funHTMLResult "Fail", "Check 'Edit' functionality on clicking 'Cancel' button", "Failed as 'Access Type' field is edited. Edited Value : " & sAccessTypeEditVal & " & Table Value : " & sAccessTypeTbl
								End If
						End Select
					End If
					
				Case "btnDlgDel"
				
				'	Checking if 'Delete' buton needs to be clicked?
					If sValue = "CLICK" Then
					
					'	Clicking the 'Delete' button and waiting till the loading image is getting displayed
						funClickObject wbtnDelDelDlgAccRhtGM, "'Cancel' button of validation dialog"
						funWaitForLoadImgToDispr welLoadIconGM
						
					'	Getting the count of records in the table
						iTblRecCntAft = funGetTotlRecInTable(welPgsPgtnGM, wtblDataRtGM)
						
					'	Checking if the record is deleted or not?
						If iTblRecCntAft = (iTblRecCntBef - 1) Then
							funHTMLResult "Pass", "Check record deletion on clicking 'Delete' button in validation dialog", "Successfully checked that record is deleted. Expected Count : " & (iTblRecCntBef-1) & " & Actual Count : " & iTblRecCntAft
						Else
							funHTMLResult "Fail", "Check record deletion on clicking 'Delete' button in validation dialog", "Failed as record is not deleted. Expected Count : " & (iTblRecCntBef-1) & " & Actual Count : " & iTblRecCntAft
						End If
					End If
				
				Case "btnDlgCncl"
			
				'	Checking if 'Cancel' button needs to be clicked
					If sValue = "CLICK" Then
					
					'	Clicking the 'Cancel' button and waiting till the validation dialog gets disappeared
						funClickObject wbtnCnclDelDlgAccRhtGM, "'Cancel' button of validation dialog"
						funCheckElementDisappearance wbtnDelDelDlgGM, "validation dialog for deleting the record"
					
					'	Getting the count of records in the table
						iTblRecCntAft = funGetTotlRecInTable(welPgsPgtnGM, wtblDataRtGM)
						
					'	Checking if the record is deleted or not?
						If iTblRecCntAft = iTblRecCntBef Then
							funHTMLResult "Pass", "Check record deletion on clicking 'Cancel' button in validation dialog", "Successfully checked that record is not deleted. Expected Count : " & iTblRecCntBef & " & Actual Count : " & iTblRecCntAft
						Else
							funHTMLResult "Fail", "Check record deletion on clicking 'Cancel' button in validation dialog", "Failed as record is deleted. Expected Count : " & iTblRecCntBef & " & Actual Count : " & iTblRecCntAft
						End If
					End If
			End Select
		Next
	Next
	
'	Clicking on 'Back to group maintenance' button
	funClickObject wlnkBckToGrpMainAccRhtGM, "'Back to group maintenance' button"
	funWaitForLoadImgToDispr welLoadIconGM
	
'	Sorting the 'ID' column in 'Descending' order
	funSortTblCols wtblHdrGM, arrTblColsGM(1), arrSortType(1)
	
'	Deleting the first record from the table
	funDelFstRecInGrpMaint()
End Function


'*******************************************************************************************************************
'  Function Name	   	:   funChkDirInputFuncMngClnt
'  Function Description :   Function for checking the 'Direct Input' functionality of 'Manage Client' screen in 'User Maintenance'
'  Function Parameters  :	sTabName = Tab selected in 'User Maintenance' screen
'  Date Created      	:   7th May, 2017
'  Author               :  	Karan Mehta
'  Last modified  on    :  	
'*******************************************************************************************************************
Public Function funChkDirInputFuncMngClnt(ByVal sTabName)
	
Dim bSheetExist 'Reference variable for checking the existence of TestData sheet	
Dim iRecCountSheet 'Reference variable for getting the count of records in TestData sheet
Dim iLoop 'Reference variable for iteration

arrTDFileCols = Array("ChngTabAndCmBck", "DirInpField", "CurMapSec", "Value", "Code", "btnAddSel", "ResFactRel", "RemMap") 'Array for storing the column names of TestData sheet

'	Checking if 'Active' or 'Inact Users' tab is selected in 'User Maintenance' screen
'	Settting the table object and array sotring table columns based on tab selection
	If sTabName = arrTabsInUsrMain(0) Then
		Set wtblHdr = wtblHdrActUsrUM
		arrTblColsUM = arrTblColsActUsrUM
		sSecChkRecCol = "SSO_Active"
	Else
		Set wtblHdr = wtblHdrInactUsrUM
		arrTblColsUM = arrTblColsInactUsrUM
		sSecChkRecCol = "SSO_Inactive"
	End If
	
'	Checking the existence of TestData sheet
	CheckSheetExistence sTDFileUM, sChkSecSheetMCUM, bSheetExist
	If bSheetExist = False Then
		funHTMLResult "Fail", "Check Sheet Existence", "Failed as Sheet : " & sChkSecSheetMCUM & " does not exists in file at path : " & sTDFileUM
		ExitTest
	End If
	
'	Adding a new sheet and importing the TestData sheet in DataTable
	DataTable.AddSheet sChkSecSheetMCUM
	DataTable.ImportSheet sTDFileUM, sChkSecSheetMCUM, sChkSecSheetMCUM
	Set objDTSheet = DataTable.GetSheet(sChkSecSheetMCUM)
	
'	Getting the user's SSO
	sUsrSSO = objDTSheet.GetParameter(sSecChkRecCol).Value
	
'	Selecting the required tab in the 'User Maintenance' screen
	funSelTabInUserMain sTabName
	
'	Setting the 'SSO' in the filter and checking if record appears on top after sorting by 'SSO'
	funSetSSOFltrInUM sTabName, sUsrSSO
	
'	Open 'Manage Clients' screen for the selected record
	funSelSetSecInUsrMain sTabName, arrOptnsSetUsrMain(1)

'	Checking the existence of elements in the 'Manage Clients' screen
	funChkElmntsInMngClnt()
	
'	Changing the status of the record as per the expectation
	funChngRecStatusUsrMain sTabName
	
'	Open 'Manage Clients' screen for the selected record
	funSelSetSecInUsrMain sTabName, arrOptnsSetUsrMain(1)
	
'	Checking the existence of TestData sheet
	CheckSheetExistence sTDFileUM, sDirInpSheetMCUM, bSheetExist
	If bSheetExist = False Then
		funHTMLResult "Fail", "Check Sheet Existence", "Failed as Sheet : " & sDirInpSheetMCUM & " does not exists in file at path : " & sTDFileUM
		ExitTest
	End If
	
'	Adding a new sheet and importing the TestData sheet in DataTable
	DataTable.AddSheet sDirInpSheetMCUM
	DataTable.ImportSheet sTDFileUM, sDirInpSheetMCUM, sDirInpSheetMCUM
	Set objDTSheet = DataTable.GetSheet(sDirInpSheetMCUM)
	
'	Getting the count of records from the sheet
	iRecCountSheet = objDTSheet.GetRowCount
	
'	Getting the count of records in 'Current Mapping' and 'Resulting Factorlink Relationships' before performing the operation
	iCurMapCntBef = funGetCntCurMapAndFactRelMCUM(arrSecMCUM(0))
	iFactRelCntBef = funGetCntCurMapAndFactRelMCUM(arrSecMCUM(1))
	
'	Loop for iterating through all the records in the TestData sheet
	For iLoop = 1 To iRecCountSheet
	
	'	Setting the row in the TestData sheet
		objDTSheet.SetCurrentRow iLoop
		
	'	Loop for iterating through all the columns of TestData sheet
		For iLoop1 = 0 to UBound(arrTDFileCols)
		
		'	Getting the value of the cell from the TestData sheet
			sValue = objDTSheet.GetParameter(arrTDFileCols(iLoop1)).Value
			
			Select Case arrTDFileCols(iLoop1)
				Case "DirInpField"
					sDIFldName = sValue
				Case "CurMapSec"
					sCurMapSec = sValue
				Case "Value"
					sFldVal = sValue
				Case "Code"
					sCode = sValue
				Case "btnAddSel"
					If sValue = "CLICK" Then
					
					'	Removing the record from 'Current Mapping' section (if already present)
						bFlag = funRemCurMapElemMCUM(sCurMapSec, sCode)
						If bFlag Then
							
						'	Selecting the 'Hierarchy view' and coming back to 'Direct input' view to reflect teh changes
							funSelTabInMngClntUM arrTabsMCUM(1)
							funSelTabInMngClntUM arrTabsMCUM(0)
						End If
					
					'	Setting the field with the desired value
						funSetFldsInDirInpMCUM sDIFldName, sFldVal
						
					'	Getting the object of the 'Add Selected' button for selected field and clicking on it
						Set welElement = funGetElmntObjInMngClntUM(sDIFldName & ">>Add selected")
						funClickObject welElement, "'Add selected' button for '" & sDIFldName & "' field"
						
					'	Checking the existence of record in 'Current Mapping' section
						bFlag = funChkElemInCurMapSecMCUM(sCurMapSec, sCode)
						If bFlag Then
							funHTMLResult "Pass", "Check record in 'Current Mapping>>" & sCurMapSec & "' section", "Successfully checked that record with code : '" & sCode & "' exists under 'Current Mapping>>" & sCurMapSec & "' section."
						Else
							funHTMLResult "Fail", "Check record in 'Current Mapping>>" & sCurMapSec & "' section", "Failed as record with code : '" & sCode & "' doesn't exists under 'Current Mapping>>" & sCurMapSec & "' section."
						End If
					End If
				Case "ResFactRel"
					sResFactRel = sValue
					If Len(Trim(sResFactRel)) > 0 Then
						
					'	Setting the object for element in 'Resulting Factorlink Relationships' table
						Set welElement = wpgUsrMain.WebElement("xpath:=//table[@class='table factorlink']/tbody//td[contains(text(), '" & sResFactRel & "')]")	
					
					'	Checking the existence of 'Resulting Factorlink Relations' entry in the table
						funObjectIsPresent welElement, "Factorlink Relation having value : '" & sResFactRel & "'", 20
					End If	
				Case "RemMap"	
					If sValue = "TRUE" Then
					
					'	Removing the record from 'Current Mapping' section
						funRemCurMapElemMCUM sCurMapSec, sCode
						
					'	Setting the object of 'Factorlink Relationship' record
						Set welElement = wpgUsrMain.WebElement("xpath:=//table[@class='table factorlink']/tbody//td[contains(text(), '" & sResFactRel & "')]")
						funCheckElementDisappearance welElement, "'Resulting Factorlink Relationship having Code : " & sResFactRel
					End If
				Case "ChngTabAndCmBck"
					If sValue = "TRUE" Then
						
					'	Selecting the 'Hierarchy view' and coming back to 'Direct input' view to reflect teh changes
						funSelTabInMngClntUM arrTabsMCUM(1)
						funSelTabInMngClntUM arrTabsMCUM(0)
					End If
			End Select	
		Next
	Next
	
'	NOTE: 'Remove All' button is not available in the screen. Defect already raised for this (DEFECT : 2695)
	
'	Clicking on the 'Cancel' button
	funClickObject welCnclMCUM, "'Cancel' button"
	Wait(7)
	
'	Getting the count of records in 'Current Mapping' and 'Resulting Factorlink Relationships' after clicking on 'Cancel' button
	iCurMapCntAft = funGetCntCurMapAndFactRelMCUM(arrSecMCUM(0))
	iFactRelCntAft = funGetCntCurMapAndFactRelMCUM(arrSecMCUM(1))
	
'	Checking if the record is set to the default 
	If (iCurMapCntAft = iCurMapCntBef) AND (iFactRelCntAft = iFactRelCntBef) Then
		funHTMLResult "Pass", "Check if the changes are cancelled", "Successfully checked that the changes are cancelled. Expected " &_
					  "Current Mapping Count : " & iCurMapCntBef & " & Actual Current Mapping Count : " & iCurMapCntAft & ", Expected " &_
					  "Factorlink Relationship Count : " & iFactRelCntBef & " & Actual Factorlink Relationship Count : " & iFactRelCntAft
	Else
		funHTMLResult "Fail", "Check if the changes are cancelled", "Failed as changes are not cancelled. Expected " &_
					  "Current Mapping Count : " & iCurMapCntBef & " & Actual Current Mapping Count : " & iCurMapCntAft & ", Expected " &_
					  "Factorlink Relationship Count : " & iFactRelCntBef & " & Actual Factorlink Relationship Count : " & iFactRelCntAft
	End If	
End Function


'*******************************************************************************************************************
'  Function Name	   	:   funChkElmntsInMngClnt
'  Function Description :   Function for checking the existence of elements in 'Direct Input' section of 'Manage Client' screen in 'User Maintenance'
'  Function Parameters  :	sTabName = Tab selected in 'User Maintenance' screen
'  Date Created      	:   7th May, 2017
'  Author               :  	Karan Mehta
'  Last modified  on    :  	
'*******************************************************************************************************************
Public Function funChkElmntsInMngClnt()

Dim iLoop 'Reference variable for iteration

'	Loop for checking the existence of elements
	For iLoop = 0 To UBound(arrElmntsDirInpMCUM)
	
	'	Getting the object and checking the existence of the element
		Set welElement = funGetElmntObjInMngClntUM(arrElmntsDirInpMCUM(iLoop))
		funObjectIsPresent welElement, "'" & arrElmntsDirInpMCUM(iLoop) & "' field/button/element", 5
	Next
	
'	Verifying if 'Direct input' tab is selected by default?
	funVerifygetROProperty wlnkSelTabMCUM, "selected tab in 'Manage Client' screen", "name", arrTabsMCUM(0)
	
'	Clicking on 'Back to user maintenance' button
	funClickObject welBckToUsrMainMCUM, "'Back to user maintenance' button"
	funWaitForLoadImgToDispr welLoadIconUM

'	Checking the existence of 'User Maintenance' screen
	bFlag = funObjectIsPresent(welScrTitleUM, "'User Maintenance' screen", 120)
	If bFlag = False Then
		ExitTest
	End If
End Function


'*******************************************************************************************************************
'  Function Name	   	:   funGetElmntObjInMngClntUM
'  Function Description :   Function for getting the object for elements in 'Direct Input' section of 'Manage Client' screen in 'User Maintenance'
'  Function Parameters  :	sElmntName = Element for which object is required
'  Date Created      	:   8th May, 2017
'  Author               :  	Karan Mehta
'  Last modified  on    :  	
'*******************************************************************************************************************
Public Function funGetElmntObjInMngClntUM(ByVal sElmntName)

	Select Case sElmntName
		Case "Add new mapping"
			Set welElement = welAddNewMapMCUM 'Object for 'Add new mapping' section in 'Manage Client' screen
		Case "Business"
			Set welElement = welBussMCUM 'Object for 'Business' field in 'Direct input' section in 'Manage Client' screen
		Case "Sub-business"
			Set welElement = welSubBussMCUM 'Object for 'Sub-business' field in 'Direct input' section in 'Manage Client' screen
		Case "Client"
			Set welElement = welClntMCUM 'Object for 'Client' field in 'Direct input' section in 'Manage Client' screen
		Case "Factorlink numbers"
			Set welElement = welFactNumsMCUM 'Object for 'Factorlink numbers' field in 'Direct input' section in 'Manage Client' screen
		Case "Business>>Add selected"
			Set welElement = welAddSelBussMCUM 'Object for 'Add selected' button beside 'Business' field in 'Direct input' section in 'Manage Client' screen
		Case "Sub-business>>Add selected"
			Set welElement = welAddSelSubBussMCUM 'Object for 'Add selected' button beside 'Sub-business' field in 'Direct input' section in 'Manage Client' screen
		Case "Client>>Add selected"
			Set welElement = welAddSelClntMCUM 'Object for 'Add selected' button beside 'Client' field in 'Direct input' section in 'Manage Client' screen
		Case "Factorlink numbers>>Add selected"
			Set welElement = welAddSelFactNumsMCUM 'Object for 'Add selected' button beside 'Factorlink numbers' field in 'Direct input' section in 'Manage Client' screen
		Case "Current Mapping"
			Set welElement = welCurrMapMCUM 'Object for 'Current Mapping' section in 'Manage Client' screen
		Case "Businesses"
			Set welElement = welBusCurrMapMCUM 'Object for 'Businesses' section under 'Current Mapping' section of 'Manage Client' screen
		Case "Sub-businesses"
			Set welElement = welSubBusCurrMapMCUM 'Object for 'Sub-business' section under 'Current Mapping' section of 'Manage Client' screen
		Case "Clients"
			Set welElement = welClntCurrMapMCUM 'Object for 'Clients' section under 'Current Mapping' section of 'Manage Client' screen
		Case "Resulting Factorlink Relationships"
			Set welElement = welResFactRelMCUM 'Object for 'Resulting Factorlink Relationships' section in 'Manage Client' screen
		Case "Save"
			Set welElement = wbtnSaveMCUM 'Object for 'Save' button in 'Manage Client' screen
		Case "Cancel"
			Set welElement = welCnclMCUM 'Object for 'Cancel' button in 'Manage Client' screen
		Case "Synchronize"
			Set welElement = wbtnSyncMCUM 'Object for 'Synchronize' button in 'Manage Client' screen
		Case "Back to user maintenance"
			Set welElement = welBckToUsrMainMCUM 'Object for 'Back to user maintenance' button in 'Manage Client' screen
	End Select
	
'	Setting the output of the function
	Set funGetElmntObjInMngClntUM = welElement
End Function


'*******************************************************************************************************************
'  Function Name	   	:   funSetFldsInDirInpMCUM
'  Function Description :   Function for selecting the fields in 'Direct Input' section of 'Manage Client' screen in 'User Maintenance'
'  Function Parameters  :	sFldName = Field Name, sFldVal = Value to be selected for the field
'  Date Created      	:   9th May, 2017
'  Author               :  	Karan Mehta
'  Last modified  on    :  	
'*******************************************************************************************************************
Public Function funSetFldsInDirInpMCUM(ByVal sFldName, ByVal sFldVal)

Dim iCount 'Reference variable for getting the count of records selected in the field
Dim iLoop 'Reference variable for iteration

	Select Case sFldName
		Case "Business"
			Set welElement = welBussMCUM
		Case "Sub-business"
			Set welElement = welSubBussMCUM
		Case "Client"
			Set welElement = welClntMCUM
		Case "Factorlink numbers"
			Set welElement = welFactNumsMCUM
	End Select

'	Loop for entering the value in the field
	For iLoop = 1 To 5
	
	'	Setting the value in the field
		funClickObject welElement, "'" & sFldName & "' field"
		funPressKey sFldVal & "{ENTER}"
		Wait(3)
		
	'	Creating the Description object and setting the object properties
		Set objDesc = Description.Create
		objDesc("micClass").value = "WebElement"
		objDesc("xpath").value = "//label[normalize-space(.)='" & sFldName & "']/following-sibling::div[1]//div[@class='item']"
		
	'	Setting the object for getting the count of records selected for the field
		wpgUsrMain.RefreshObject
		Set objChild = wpgUsrMain.ChildObjects(objDesc)
		
	'	Getting the count of records selected in the field
		iCount = objChild.Count
	
	'	Checking if the record is selected in the field?
		If iCount = 1 Then
	
		'	Setting the property to be checked for getting the selected value
			Select Case UCASE(sExecBrowser)
				Case "IEXPLORE.EXE"
					sPropName = "innertext"
				Case "CHROME.EXE"
					sPropName = "text"
			End Select
		
		'	Getting the value of the item selected in the field		
			sFldValSel = objChild(0).getroproperty(sPropName)
			
		'	Checking if the correct value is selected?
			If Trim(sFldValSel) = Trim(sFldVal) Then
				funHTMLResult "Pass", "Check value selected for '" & sFldName & "' field", "Successfully checked the value selected. Expected Value : " & sFldVal & " & Actual Value : " & sFldValSel
				Exit For
			End If
		Else
		'	Clicking on the 'Cancel' button
			funClickObject welCnclMCUM, "'Cancel' button"
			Wait(2)
		End If	
	Next
	
'	Checking if the value is set correctly in the field
	If iLoop > 5 Then
		funHTMLResult "Fail", "Check value selected for '" & sFldName & "' field", "Failed as value selected is not proper. Expected Value : " & sFldVal & " & Actual Value : " & sFldValSel
		ExitTest
	End If
End Function


'*******************************************************************************************************************
'  Function Name	   	:   funRemCurMapElemMCUM
'  Function Description :   Function for removing the element in 'Current Mapping' section of 'Manage Client' 
'							screen in 'User Maintenance'
'  Function Parameters  :	sElemName = Element Name, sCode = Code present under selected element which need to be removed
'  Date Created      	:   10th May, 2017
'  Author               :  	Karan Mehta
'  Last modified  on    :  	
'*******************************************************************************************************************
Public Function funRemCurMapElemMCUM(ByVal sElemName, ByVal sCode)

Dim bFlag 'Reference variable for checking if the 'Removal' operation needs to be performed or not

'	Checking the existence of record in 'Current Mapping' section of 'Manage Client' screen
	bFlag = funChkElemInCurMapSecMCUM(sElemName, sCode)
	If bFlag Then
	
	'	Setting the object for item in 'Current Mapping' section of 'Manage Client' screen
		Set welElement = wpgUsrMain.WebElement("xpath:=//table[@class='table currentMapping ng-scope']/thead//th[contains(text(), '" & sElemName & "')]/../../../tbody//td[normalize-space(.)='" & sCode & "']/a")
	
	'	Clicking on the 'Remove' icon
		funClickObject welElement,  "Remove icon for '" & sCode & "' item of type : " & sElemName
		funCheckElementDisappearance welElement, "'" & sCode & "' item of type : " & sElemName
	End If
	
'	Setting the output of function
	funRemCurMapElemMCUM = bFlag
End Function


'*******************************************************************************************************************
'  Function Name	   	:   funChkElemInCurMapSecMCUM
'  Function Description :   Function for checking the existence of elements in 'Current Mapping' section of 'Manage Client' 
'							screen in 'User Maintenance'
'  Function Parameters  :	sElemName = Element Name, sCode = Code present under selected element whose existence need to be checked
'  Date Created      	:   11th May, 2017
'  Author               :  	Karan Mehta
'  Last modified  on    :  	
'*******************************************************************************************************************
Public Function funChkElemInCurMapSecMCUM(ByVal sElemName, ByVal sCode)
	
Dim bFlag	'Reference flag for checking the existence of the element
	
'	Setting the object for item in 'Current Mapping' section of 'Manage Client' screen
	Set welElement = wpgUsrMain.WebElement("xpath:=//table[@class='table currentMapping ng-scope']/thead//th[contains(text(), '" & sElemName & "')]/../../../tbody//td[normalize-space(.)='" & sCode & "']/a")
	
'	Checking the existence of record in 'Current Mapping' section of 'Manage Client' screen
	bFlag = funCheckElementExistence(welElement, 7)
	
'	Setting the output of the function
	funChkElemInCurMapSecMCUM = bFlag
End Function


'*******************************************************************************************************************
'  Function Name	   	:   funSelTabInMngClntUM
'  Function Description :   Function for selecting the tab in 'Manage Client' screen in 'User Maintenance'
'  Function Parameters  :	sTabName = Tab to be selected
'  Date Created      	:   11th May, 2017
'  Author               :  	Karan Mehta
'  Last modified  on    :  	
'*******************************************************************************************************************
Public Function funSelTabInMngClntUM(ByVal sTabName)
	
'	Setting the object of the tab to be selected
	Set wlnkLink = wpgUsrMain.Link("xpath:=//ul[@class='nav nav-tabs']//a[normalize-space(.)='" & sTabName & "']")
	
'	Clicking on the tab
	funCLickObject wlnkLink, "'" & sTabName & "' tab"
	Wait(2)
	
'	Checking if the correct tab is selected
	funVerifygetROProperty wlnkSelTabMCUM, "selected tab in 'Manage Client' screen", "name", sTabName
End Function


'*******************************************************************************************************************
'  Function Name	   	:   funGetCntCurMapAndFactRelMCUM
'  Function Description :   Function for getting the count of records available in 'Current Mapping' and 
						    'Resulting Factorlink Relationships' section of 'Manage Client' screen in 'User Maintenance'
'  Function Parameters  :	sSecName = Section for which record count need to be checked
'  Date Created      	:   11th May, 2017
'  Author               :  	Karan Mehta
'  Last modified  on    :  	
'*******************************************************************************************************************
Public Function funGetCntCurMapAndFactRelMCUM(ByVal sSecName)

'	Checking if record count need to be checked for 'Current Mapping' or 'Resulting Factorlink Relationships' section?
'	Based on the selection, setting the XPath of the object to get the count of records
	If sSecName = arrSecMCUM(0) Then
		sXPath = "//table[@class='table currentMapping ng-scope']/tbody//td"
	Else
		sXPath = "//table[@class='table factorlink']/tbody//td"
	End If
	
'	Creating the Description object and setting the object properties to get the count of records available
	Set objDesc = Description.Create
	objDesc("micClass").Value = "WebElement"
	objDesc("xpath").Value = sXPath
	
'	Setting the object having desired properties
	Set objChild = wpgUsrMain.ChildObjects(objDesc)
	
'	Setting the output of the function as count of records available
	funGetCntCurMapAndFactRelMCUM = objChild.Count
End Function


'*******************************************************************************************************************
'  Function Name	   	:   funSetSSOFltrInUM
'  Function Description :   Function for setting the 'SSO' filter in 'User Maintenance' screen and checking if the required
'							record appears on top when sorted by 'ASCENDING' order of 'SSO' column   
'  Function Parameters  :	sSecName = Section for which record count need to be checked
'  Date Created      	:   26th May, 2017
'  Author               :  	Karan Mehta
'  Last modified  on    :  	
'*******************************************************************************************************************
Public Function funSetSSOFltrInUM(ByVal sSection, ByVal sUsrSSO)
	
Dim iTblRecCount 'Reference variable for getting the total records in selected page of table

'	Setting the objects based on section selected for 'User maintenance' screen
	If sSection = arrTabsInUsrMain(0) Then
		Set wtblHdr = wtblHdrActUsrUM
		Set wtblData = wtblDataActUsrUM
		sTblCol = arrTblColsActUsrUM(3)
	Else
		Set wtblHdr = wtblHdrInactUsrUM
		Set wtblData = wtblDataInactUsrUM
		sTblCol = arrTblColsInactUsrUM(3)
	End If
	
'	Filtering the record
	funSetFilterInAdmin wedtFltrUM, wbtnFltrUM, sUsrSSO
	
'	Sorting the records in 'ASCENDING' order of 'SSO'
	funSortTblCols wtblHdr, sTblCol, arrSortType(0)
	
'	Getting the count of records in the selected page of table
	iTblRecCount = funGetTblPgRecCount(wtblData)
	
'	Checking if any record is present?
	If iTblRecCount = 0 Then
		funHTMLResult "Fail", "Filter record having SSO : " & sUsrSSO, "Failed as no record exists in '" & sSection & "' section having SSO : " & sUsrSSO 
		ExitTest
	End If
	
'	Getting the 'SSO' for first record
	sSSOFstRec = funGetDataFromTblInAdmin(wtblData, wtblHdr, sTblCol, 2)
	
'	Checking if the required record is displayed on the top?
	If Trim(sSSOFstRec) = Trim(sUsrSSO) Then
		funHTMLResult "Pass", "Check if user record displayed on top", "Successfully checked that user record is displayed on top. Expected Value : " & sUsrSSO & " & Actual Value : " & sSSOFstRec
	Else
		funHTMLResult "Fail", "Check if user record displayed on top", "Failed as user record is not displayed on top. Expected Value : " & sUsrSSO & " & Actual Value : " & sSSOFstRec
		ExitTest
	End If
End Function



'''''''''''''''''''''''''''''''''Application Log functions''''''''''''''''''''''''''''''

Public Function funSetFltrsForSortInAL()
	
Dim bSheetExist 'Reference variable for checking the existence of TestData sheet	
Dim sValue

arrTDFileCols = Array("Date", "Date_From", "Date_To") 'Array for storing the column names of TestData sheet 
	
'	Checking the existence of TestData sheet
	CheckSheetExistence sTDFileAL, sSortSheetAL, bSheetExist
	If bSheetExist = False Then
		ExitTest
	End If	
	
'	Adding new sheet in DataTable and importing the TestData in the sheet
	DataTable.AddSheet sSortSheetAL
	DataTable.ImportSheet sTDFileAL, sSortSheetAL, sSortSheetAL
	Set objDTSheet = DataTable.GetSheet(sSortSheetAL)
	
'	Loop for setting the values in the fields
	For iLoop = 0 To UBound(arrTDFileCols)
	
	'	Getting the value of the column
		sValue = objDTSheet.GetParameter(arrTDFileCols(iLoop)).Value
	
	'	Setting the value in the required field
		Select Case arrTDFileCols(iLoop)
			
			Case "Date"
				funSelDateTimeFldsInAL arrTDFileCols(iLoop), sValue
			Case "Date_From", "Date_To"
				If arrTDFileCols(iLoop) = "Date_From" Then
					Set welField = wedDtStrtSAL
				Else
					Set welField = wedDtEndSAL
				End If
				
			'	Setting the value in the field
				funSetValueInEditBox welField, "'" & arrTDFileCols(iLoop) & "' field", sValue
		End Select
	Next
	
'	Clicking on the 'Search' button
	funClickObject wbtnSrchSAL, "'Search' button in 'Search Application Log' section"
	funWaitForLoadImgToDispr welLoadIconAL
	
'	Getting the count of records from the table
	iTblRecCnt = funGetTotlRecInTable(welPgsPgtnSRAL, wtblSRDataAL)
	
'	Checking if any record is available in the table
	If iTblRecCnt > 0 Then
		funHTMLResult "Pass", "Check record existence in 'Search Results' table", "Successfully checked that record exists in the table. Record Count : " & iTblRecCnt
	Else
		funHTMLResult "Fail", "Check record existence in 'Search Results' table", "Failed as no record exists in the table. Record Count : " & iTblRecCnt
		ExitTest
	End If
	
'	Checking the existence of columns in the 'Search Results' table
	funCheckColsInTable wtblSRHdrAL, arrTblColsSRAL, "'Search Results' table"
End Function


Public Function funSelDateTimeFldsInAL(ByVal sFldName, ByVal sFldVal)
	
	Select Case sFldName
		Case "Date"
			Set welFldValSecAL = welDtValSecAL
			Set welFldForOptns = welDtFldSAL
		Case "Time"
			Set welFldValSecAL = welTimValSecAL
			Set welFldForOptns = welTimFldSAL
	End Select
	
	'	Checking if any value is selected for the field?
	'	If no value selected, then field needs to be clicked to display the options in the dropdown
		sDtSel = funFetchROProperty(welFldValSecAL, "value for '" & sFldName & "' field", "value")
		If Len(Trim(sDtSel)) = 0 Then
			 funClickObject welFldForOptns, "'" & sFldName & "' field for loading the options"
		End If
	
	'	Setting the object for option to select in the field and clicking the option to select the value for the field
		Set welField = welSALSecAL.WebElement("xpath:=//label[normalize-space(.)='" & sFldName & "']/..//div[normalize-space(.)='" & sFldVal & "']")
		wbtnSrchSAL.FireEvent "onMouseOver"
		funClickObject welField, "'" & sFldVal & "' option in '" & sFldName & "' field"
End Function

Public Function funGetFldObjInAL(ByVal sFldName)
	
	Select Case sFldName
		Case "Date"
			Set welField = welDtFldSAL
		Case "Date From"
			Set welField = wedDtStrtSAL
		Case "Date To"
			Set welField = wedDtEndSAL
		Case "Time"
			Set welField = welTimFldSAL
		Case "Time From"
			Set welField = wedTimStrtSAL
		Case "Time To"
			Set welField = wedTimEndSAL
		Case "Screen (optional)"
			Set welField = wedScrSAL
		Case "Session ID (optional)"
			Set welField = wedSesIDSAL
		Case "SSO (optional)"
			Set welField = wedSSOSAL
		Case "Exclude Batch Processes"
			Set welField = wcbxExBtcProsSRAL
		Case "Exclude System Processes"	
			Set welField = wcbxExSysProsSRAL
		Case "Export"
			Set welField = wlnkExportSRAL
		Case "Records Per Page"
			Set welField = wlstRecPerPgSRAL
	
	End Select
	
'	Setting the output of the function as field object
	Set funGetFldObjInAL = welField
End Function

Public Function funChkLookAndFeelAL()

Dim iLoop 'Reference variable for iteration
Dim iRecCountSheet 'Reference variable for getting the count of records in the TestData sheet
Dim bSheetExist 'Reference variable for checking the existence of TestData sheet
Dim sFieldSel 'Reference variable for getting the name of field on which operation needs to be performed
Dim sFldVal 'Reference variable for getting the value which is selected for 'Date' and 'Time' fields

arrFields = Array("Date", "Date From", "Date To", "Time", "Time From", "Time To", "Screen (optional)", "Session ID (optional)", "SSO (optional)", "Exclude Batch Processes", "Exclude System Processes", "Export", "Records Per Page") 'Array for storing the field names for which existence need to be checked
arrColsSheet = Array("Field", "Field_Val", "From", "To", "Error", "btnSearch") 'Array for storing the column names of TestData sheet

'	Loop for checking the existence of fields
	For iLoop = 0 To UBound(arrFields)
	
	'	Getting the object of the field and checking the existence of field
		Set welField = funGetFldObjInAL(arrFields(iLoop))
		funObjectIsPresent welField, "'" & arrFields(iLoop) & "' field/button", 5
	Next
	
'	Clicking on '^' button in 'Search Application Log'
	funClickObject wbtnColpsSAL, "'^' button"
	Wait(2)
	
'	Checking if 'Search Application Log' section is collapsed
	funVerifygetROProperty welSALSecAL, "Collapsing of 'Search Application Log' section on clicking '^' button", "class", "collapse"
		
'	Clicking on 'V' button in 'Search Application Log'
	funClickObject wbtnExpndSAL, "'V' button"
	Wait(2)
	
'	Checking if 'Search Application Log' section is expanded
	funVerifygetROProperty welSALSecAL, "Expansion of 'Search Application Log' section on clicking 'V' button", "class", "collapse in"
	
'	Going to the end of the page, clicking on icon to view top of page and check if control is moved to top
	funClickObject wlstRecPerPgSRAL, "'Records Per Page' dropdown to go to end of page"
	funClickObject welGoToTopAL, "'Goto Top of the Page' icon"
	funCheckElementDisappearance welGoToTopAL, "'Goto Top of the Page' icon"

'	Checking the existence of TestData sheet
	CheckSheetExistence sTDFileAL, sLookFeelSheetAL, bSheetExist
	If bSheetExist = False Then
		ExitTest
	End If
	
'	Adding a new sheet and importing the contents from TestData sheet
	DataTable.AddSheet sLookFeelSheetAL
	DataTable.ImportSheet sTDFileAL, sLookFeelSheetAL, sLookFeelSheetAL
	Set objDTSheet = DataTable.GetSheet(sLookFeelSheetAL)
	
'	Getting the count of records in the TestData sheet
	iRecCountSheet = objDTSheet.GetRowCount
	
'	Loop for checking the functionality for 'Look and Feel'
	For iLoop = 1 To iRecCountSheet
	
	'	Setting the row in the TestData sheet
		objDTSheet.SetCurrentRow iLoop
		
	'	Loop for iteration through all the columns of TestData sheet
		For iLoop1 = 0 To UBound(arrColsSheet)
		
		'	Getting the value of the selected cell
			sValue = objDTSheet.GetParameter(arrColsSheet(iLoop1)).Value 
			
			Select Case arrColsSheet(iLoop1)
				
				Case "Field"
				
				'	Getting the value of the field on which operation needs to be performed and storing the value in the variable
					sFieldSel = sValue		
				Case "Field_Val"
				
				'	Getting the field value and storing it in the variable
					sFldVal = sValue
				
				'	Setting the value for 'Date' and 'Time' field
					funSelDateTimeFldsInAL sFieldSel, sFldVal
				Case "From", "To"
					
				'	Setting the objects of 'Date' and 'Time' fields
					If arrColsSheet(iLoop1) = "From" Then
						If sFieldSel = "Date" Then
							Set welField = wedDtStrtSAL
						Else
							Set welField = wedTimStrtSAL
						End If
					Else	
						If sFieldSel = "Date" Then
							Set welField = wedTimEndSAL
						Else
							Set welField = wedDtEndSAL
						End If
					End If	
					
					Select Case sValue
						Case "ENABLED"
						
						'	Checking if the field is enabled?
							funVerifygetROProperty welField, "'" & sFieldSel & " " & arrColsSheet(iLoop1) & "' field", "disabled", 0
						Case "CHECK_VALIDATION"
						
						'	Getting the value of the field
							sFldValAct = funFetchROProperty(welField, "'" & sFieldSel & " " & arrColsSheet(iLoop1) & "' field", "value")
							
						'	Checking the field on which operation needs to be performed
							If sFieldSel = "Date" Then
							
							'	Changing the value to date format
								sFldValAct = cDate(sFldValAct)
								
								Select Case sFldVal
									Case "Today"
										sFrmValExp = Date
										sToValExp = sFrmValExp
									Case "Yesterday"
										sFrmValExp = Date - 1
										sToValExp = sFromValExp
									Case "This Week"
										If WeekDay(Date) = 1 Then
											sFrmDate = Date - 6
											sToDate = Date
										Else
											sFrmDate = Date - Abs(WeekDay(Date) - 2)
											sToDate = Date + Abs(WeekDay(Date) - 8)
										End If
									Case "Last Week"
										If WeekDay(Date) = 1 Then
											sFrmDate = Date - 13
											sToDate = Date - 7
										Else
											sFrmDate = Date - Abs(WeekDay(Date) - 2) - 7
											sToDate = Date + Abs(WeekDay(Date) - 8) - 7
										End If
									Case "This Month"
										
									Case "Last Month"
										
								End Select
							Else
								Select Case sFldVal
									Case "Custom Range"
									
									Case "Custom Range"
									
									Case "The past 30 minutes"
									
									Case "The past hour"
									
									Case "The past 8 hours"
									
									Case "The past 24 hours"
									
								End Select
							End If	
						Case Else
						
						'	Entering the value in the field
							funSetValueInEditBox welField, "'" & sFieldSel & " " & arrColsSheet(iLoop1) & "' field", sValue
					End Select
					
				Case "Error"
					If sValue = "TRUE" Then
					
					'	Setting the object for the validation message for Date and Time fields
						If sFieldSel = "Date" Then
							Set welValidationMsg = welValMsgDtSAL
						Else
							Set welValidationMsg = welValMsgTimSAL
						End If
						
					'	Checking the existence of validation message
						funObjectIsPresent welValidationMsg, "validation message for '" & sFieldSel & "' field", 5
					End If
				Case "btnSearch"
					If sValue = "DISABLED" Then
					
					'	Checking if 'Search' button is disabled?
						funVerifygetROProperty wbtnSrchSAL, "'Search' button", "disabled", 1
					End If
			End Select
		Next
	Next
End Function


